"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/telegraf";
exports.ids = ["vendor-chunks/telegraf"];
exports.modules = {

/***/ "(rsc)/./node_modules/telegraf/lib/button.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/button.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.webApp = exports.login = exports.pay = exports.game = exports.switchToCurrentChat = exports.switchToChat = exports.callback = exports.url = exports.channelRequest = exports.groupRequest = exports.botRequest = exports.userRequest = exports.pollRequest = exports.locationRequest = exports.contactRequest = exports.text = void 0;\nfunction text(text, hide = false) {\n    return { text, hide };\n}\nexports.text = text;\nfunction contactRequest(text, hide = false) {\n    return { text, request_contact: true, hide };\n}\nexports.contactRequest = contactRequest;\nfunction locationRequest(text, hide = false) {\n    return { text, request_location: true, hide };\n}\nexports.locationRequest = locationRequest;\nfunction pollRequest(text, type, hide = false) {\n    return { text, request_poll: { type }, hide };\n}\nexports.pollRequest = pollRequest;\nfunction userRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, extra, hide = false) {\n    return {\n        text,\n        request_users: { request_id, ...extra },\n        hide,\n    };\n}\nexports.userRequest = userRequest;\nfunction botRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, extra, hide = false) {\n    return {\n        text,\n        request_users: { request_id, user_is_bot: true, ...extra },\n        hide,\n    };\n}\nexports.botRequest = botRequest;\nfunction groupRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, extra, hide = false) {\n    return {\n        text,\n        request_chat: { request_id, chat_is_channel: false, ...extra },\n        hide,\n    };\n}\nexports.groupRequest = groupRequest;\nfunction channelRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, extra, hide = false) {\n    return {\n        text,\n        request_chat: { request_id, chat_is_channel: true, ...extra },\n        hide,\n    };\n}\nexports.channelRequest = channelRequest;\nfunction url(text, url, hide = false) {\n    return { text, url, hide };\n}\nexports.url = url;\nfunction callback(text, data, hide = false) {\n    return { text, callback_data: data, hide };\n}\nexports.callback = callback;\nfunction switchToChat(text, value, hide = false) {\n    return { text, switch_inline_query: value, hide };\n}\nexports.switchToChat = switchToChat;\nfunction switchToCurrentChat(text, value, hide = false) {\n    return { text, switch_inline_query_current_chat: value, hide };\n}\nexports.switchToCurrentChat = switchToCurrentChat;\nfunction game(text, hide = false) {\n    return { text, callback_game: {}, hide };\n}\nexports.game = game;\nfunction pay(text, hide = false) {\n    return { text, pay: true, hide };\n}\nexports.pay = pay;\nfunction login(text, url, opts = {}, hide = false) {\n    return {\n        text,\n        login_url: { ...opts, url },\n        hide,\n    };\n}\nexports.login = login;\nfunction webApp(text, url, hide = false\n// works as both InlineKeyboardButton and KeyboardButton\n) {\n    return {\n        text,\n        web_app: { url },\n        hide,\n    };\n}\nexports.webApp = webApp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2J1dHRvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsYUFBYSxHQUFHLFdBQVcsR0FBRyxZQUFZLEdBQUcsMkJBQTJCLEdBQUcsb0JBQW9CLEdBQUcsZ0JBQWdCLEdBQUcsV0FBVyxHQUFHLHNCQUFzQixHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQixHQUFHLHVCQUF1QixHQUFHLHNCQUFzQixHQUFHLFlBQVk7QUFDcFU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxZQUFZO0FBQ1o7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxhQUFhO0FBQ2I7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxhQUFhLHNCQUFzQixNQUFNO0FBQ3pDO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlDQUF5QztBQUNsRTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw4Q0FBOEM7QUFDdEU7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkNBQTZDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBLGFBQWE7QUFDYjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGFBQWE7QUFDYjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYLG1DQUFtQztBQUNuQztBQUNBO0FBQ0EscUJBQXFCLGNBQWM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsS0FBSztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2J1dHRvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2ViQXBwID0gZXhwb3J0cy5sb2dpbiA9IGV4cG9ydHMucGF5ID0gZXhwb3J0cy5nYW1lID0gZXhwb3J0cy5zd2l0Y2hUb0N1cnJlbnRDaGF0ID0gZXhwb3J0cy5zd2l0Y2hUb0NoYXQgPSBleHBvcnRzLmNhbGxiYWNrID0gZXhwb3J0cy51cmwgPSBleHBvcnRzLmNoYW5uZWxSZXF1ZXN0ID0gZXhwb3J0cy5ncm91cFJlcXVlc3QgPSBleHBvcnRzLmJvdFJlcXVlc3QgPSBleHBvcnRzLnVzZXJSZXF1ZXN0ID0gZXhwb3J0cy5wb2xsUmVxdWVzdCA9IGV4cG9ydHMubG9jYXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5jb250YWN0UmVxdWVzdCA9IGV4cG9ydHMudGV4dCA9IHZvaWQgMDtcbmZ1bmN0aW9uIHRleHQodGV4dCwgaGlkZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHsgdGV4dCwgaGlkZSB9O1xufVxuZXhwb3J0cy50ZXh0ID0gdGV4dDtcbmZ1bmN0aW9uIGNvbnRhY3RSZXF1ZXN0KHRleHQsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7IHRleHQsIHJlcXVlc3RfY29udGFjdDogdHJ1ZSwgaGlkZSB9O1xufVxuZXhwb3J0cy5jb250YWN0UmVxdWVzdCA9IGNvbnRhY3RSZXF1ZXN0O1xuZnVuY3Rpb24gbG9jYXRpb25SZXF1ZXN0KHRleHQsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7IHRleHQsIHJlcXVlc3RfbG9jYXRpb246IHRydWUsIGhpZGUgfTtcbn1cbmV4cG9ydHMubG9jYXRpb25SZXF1ZXN0ID0gbG9jYXRpb25SZXF1ZXN0O1xuZnVuY3Rpb24gcG9sbFJlcXVlc3QodGV4dCwgdHlwZSwgaGlkZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHsgdGV4dCwgcmVxdWVzdF9wb2xsOiB7IHR5cGUgfSwgaGlkZSB9O1xufVxuZXhwb3J0cy5wb2xsUmVxdWVzdCA9IHBvbGxSZXF1ZXN0O1xuZnVuY3Rpb24gdXNlclJlcXVlc3QodGV4dCwgXG4vKiogTXVzdCBmaXQgaW4gYSBzaWduZWQgMzIgYml0IGludCAqL1xucmVxdWVzdF9pZCwgZXh0cmEsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRleHQsXG4gICAgICAgIHJlcXVlc3RfdXNlcnM6IHsgcmVxdWVzdF9pZCwgLi4uZXh0cmEgfSxcbiAgICAgICAgaGlkZSxcbiAgICB9O1xufVxuZXhwb3J0cy51c2VyUmVxdWVzdCA9IHVzZXJSZXF1ZXN0O1xuZnVuY3Rpb24gYm90UmVxdWVzdCh0ZXh0LCBcbi8qKiBNdXN0IGZpdCBpbiBhIHNpZ25lZCAzMiBiaXQgaW50ICovXG5yZXF1ZXN0X2lkLCBleHRyYSwgaGlkZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dCxcbiAgICAgICAgcmVxdWVzdF91c2VyczogeyByZXF1ZXN0X2lkLCB1c2VyX2lzX2JvdDogdHJ1ZSwgLi4uZXh0cmEgfSxcbiAgICAgICAgaGlkZSxcbiAgICB9O1xufVxuZXhwb3J0cy5ib3RSZXF1ZXN0ID0gYm90UmVxdWVzdDtcbmZ1bmN0aW9uIGdyb3VwUmVxdWVzdCh0ZXh0LCBcbi8qKiBNdXN0IGZpdCBpbiBhIHNpZ25lZCAzMiBiaXQgaW50ICovXG5yZXF1ZXN0X2lkLCBleHRyYSwgaGlkZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dCxcbiAgICAgICAgcmVxdWVzdF9jaGF0OiB7IHJlcXVlc3RfaWQsIGNoYXRfaXNfY2hhbm5lbDogZmFsc2UsIC4uLmV4dHJhIH0sXG4gICAgICAgIGhpZGUsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ3JvdXBSZXF1ZXN0ID0gZ3JvdXBSZXF1ZXN0O1xuZnVuY3Rpb24gY2hhbm5lbFJlcXVlc3QodGV4dCwgXG4vKiogTXVzdCBmaXQgaW4gYSBzaWduZWQgMzIgYml0IGludCAqL1xucmVxdWVzdF9pZCwgZXh0cmEsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRleHQsXG4gICAgICAgIHJlcXVlc3RfY2hhdDogeyByZXF1ZXN0X2lkLCBjaGF0X2lzX2NoYW5uZWw6IHRydWUsIC4uLmV4dHJhIH0sXG4gICAgICAgIGhpZGUsXG4gICAgfTtcbn1cbmV4cG9ydHMuY2hhbm5lbFJlcXVlc3QgPSBjaGFubmVsUmVxdWVzdDtcbmZ1bmN0aW9uIHVybCh0ZXh0LCB1cmwsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7IHRleHQsIHVybCwgaGlkZSB9O1xufVxuZXhwb3J0cy51cmwgPSB1cmw7XG5mdW5jdGlvbiBjYWxsYmFjayh0ZXh0LCBkYXRhLCBoaWRlID0gZmFsc2UpIHtcbiAgICByZXR1cm4geyB0ZXh0LCBjYWxsYmFja19kYXRhOiBkYXRhLCBoaWRlIH07XG59XG5leHBvcnRzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5mdW5jdGlvbiBzd2l0Y2hUb0NoYXQodGV4dCwgdmFsdWUsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7IHRleHQsIHN3aXRjaF9pbmxpbmVfcXVlcnk6IHZhbHVlLCBoaWRlIH07XG59XG5leHBvcnRzLnN3aXRjaFRvQ2hhdCA9IHN3aXRjaFRvQ2hhdDtcbmZ1bmN0aW9uIHN3aXRjaFRvQ3VycmVudENoYXQodGV4dCwgdmFsdWUsIGhpZGUgPSBmYWxzZSkge1xuICAgIHJldHVybiB7IHRleHQsIHN3aXRjaF9pbmxpbmVfcXVlcnlfY3VycmVudF9jaGF0OiB2YWx1ZSwgaGlkZSB9O1xufVxuZXhwb3J0cy5zd2l0Y2hUb0N1cnJlbnRDaGF0ID0gc3dpdGNoVG9DdXJyZW50Q2hhdDtcbmZ1bmN0aW9uIGdhbWUodGV4dCwgaGlkZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHsgdGV4dCwgY2FsbGJhY2tfZ2FtZToge30sIGhpZGUgfTtcbn1cbmV4cG9ydHMuZ2FtZSA9IGdhbWU7XG5mdW5jdGlvbiBwYXkodGV4dCwgaGlkZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHsgdGV4dCwgcGF5OiB0cnVlLCBoaWRlIH07XG59XG5leHBvcnRzLnBheSA9IHBheTtcbmZ1bmN0aW9uIGxvZ2luKHRleHQsIHVybCwgb3B0cyA9IHt9LCBoaWRlID0gZmFsc2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0LFxuICAgICAgICBsb2dpbl91cmw6IHsgLi4ub3B0cywgdXJsIH0sXG4gICAgICAgIGhpZGUsXG4gICAgfTtcbn1cbmV4cG9ydHMubG9naW4gPSBsb2dpbjtcbmZ1bmN0aW9uIHdlYkFwcCh0ZXh0LCB1cmwsIGhpZGUgPSBmYWxzZVxuLy8gd29ya3MgYXMgYm90aCBJbmxpbmVLZXlib2FyZEJ1dHRvbiBhbmQgS2V5Ym9hcmRCdXR0b25cbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRleHQsXG4gICAgICAgIHdlYl9hcHA6IHsgdXJsIH0sXG4gICAgICAgIGhpZGUsXG4gICAgfTtcbn1cbmV4cG9ydHMud2ViQXBwID0gd2ViQXBwO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/button.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/composer.js":
/*!***********************************************!*\
  !*** ./node_modules/telegraf/lib/composer.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/** @format */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Composer = void 0;\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"(rsc)/./node_modules/telegraf/lib/context.js\"));\nconst filters_1 = __webpack_require__(/*! ./filters */ \"(rsc)/./node_modules/telegraf/lib/filters.js\");\nconst args_1 = __webpack_require__(/*! ./core/helpers/args */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/args.js\");\nfunction always(x) {\n    return () => x;\n}\nconst anoop = always(Promise.resolve());\nclass Composer {\n    constructor(...fns) {\n        this.handler = Composer.compose(fns);\n    }\n    /**\n     * Registers a middleware.\n     */\n    use(...fns) {\n        this.handler = Composer.compose([this.handler, ...fns]);\n        return this;\n    }\n    /**\n     * Registers middleware for handling updates\n     * matching given type guard function.\n     * @deprecated use `Composer::on`\n     */\n    guard(guardFn, ...fns) {\n        return this.use(Composer.guard(guardFn, ...fns));\n    }\n    on(filters, ...fns) {\n        // @ts-expect-error This should get resolved when the overloads are removed in v5\n        return this.use(Composer.on(filters, ...fns));\n    }\n    /**\n     * Registers middleware for handling matching text messages.\n     */\n    hears(triggers, ...fns) {\n        return this.use(Composer.hears(triggers, ...fns));\n    }\n    /**\n     * Registers middleware for handling specified commands.\n     */\n    command(command, ...fns) {\n        return this.use(Composer.command(command, ...fns));\n    }\n    /**\n     * Registers middleware for handling matching callback queries.\n     */\n    action(triggers, ...fns) {\n        return this.use(Composer.action(triggers, ...fns));\n    }\n    /**\n     * Registers middleware for handling matching inline queries.\n     */\n    inlineQuery(triggers, ...fns) {\n        return this.use(Composer.inlineQuery(triggers, ...fns));\n    }\n    /**\n     * Registers middleware for handling game queries\n     */\n    gameQuery(...fns) {\n        return this.use(Composer.gameQuery(...fns));\n    }\n    reaction(reaction, ...fns) {\n        return this.use(Composer.reaction(reaction, ...fns));\n    }\n    /**\n     * Registers middleware for dropping matching updates.\n     */\n    drop(predicate) {\n        return this.use(Composer.drop(predicate));\n    }\n    /** @deprecated use `Composer::drop` */\n    filter(predicate) {\n        return this.use(Composer.filter(predicate));\n    }\n    entity(predicate, ...fns) {\n        return this.use(Composer.entity(predicate, ...fns));\n    }\n    email(email, ...fns) {\n        return this.use(Composer.email(email, ...fns));\n    }\n    url(url, ...fns) {\n        return this.use(Composer.url(url, ...fns));\n    }\n    textLink(link, ...fns) {\n        return this.use(Composer.textLink(link, ...fns));\n    }\n    textMention(mention, ...fns) {\n        return this.use(Composer.textMention(mention, ...fns));\n    }\n    mention(mention, ...fns) {\n        return this.use(Composer.mention(mention, ...fns));\n    }\n    phone(number, ...fns) {\n        return this.use(Composer.phone(number, ...fns));\n    }\n    hashtag(hashtag, ...fns) {\n        return this.use(Composer.hashtag(hashtag, ...fns));\n    }\n    cashtag(cashtag, ...fns) {\n        return this.use(Composer.cashtag(cashtag, ...fns));\n    }\n    spoiler(text, ...fns) {\n        return this.use(Composer.spoiler(text, ...fns));\n    }\n    /**\n     * Registers a middleware for handling /start\n     */\n    start(...fns) {\n        const handler = Composer.compose(fns);\n        return this.command('start', (ctx, next) => handler(Object.assign(ctx, { startPayload: ctx.payload }), next));\n    }\n    /**\n     * Registers a middleware for handling /help\n     */\n    help(...fns) {\n        return this.command('help', ...fns);\n    }\n    /**\n     * Registers a middleware for handling /settings\n     */\n    settings(...fns) {\n        return this.command('settings', ...fns);\n    }\n    middleware() {\n        return this.handler;\n    }\n    static reply(...args) {\n        return (ctx) => ctx.reply(...args);\n    }\n    static catch(errorHandler, ...fns) {\n        const handler = Composer.compose(fns);\n        // prettier-ignore\n        return (ctx, next) => Promise.resolve(handler(ctx, next))\n            .catch((err) => errorHandler(err, ctx));\n    }\n    /**\n     * Generates middleware that runs in the background.\n     */\n    static fork(middleware) {\n        const handler = Composer.unwrap(middleware);\n        return async (ctx, next) => {\n            await Promise.all([handler(ctx, anoop), next()]);\n        };\n    }\n    static tap(middleware) {\n        const handler = Composer.unwrap(middleware);\n        return (ctx, next) => Promise.resolve(handler(ctx, anoop)).then(() => next());\n    }\n    /**\n     * Generates middleware that gives up control to the next middleware.\n     */\n    static passThru() {\n        return (ctx, next) => next();\n    }\n    static lazy(factoryFn) {\n        if (typeof factoryFn !== 'function') {\n            throw new Error('Argument must be a function');\n        }\n        return (ctx, next) => Promise.resolve(factoryFn(ctx)).then((middleware) => Composer.unwrap(middleware)(ctx, next));\n    }\n    static log(logFn = console.log) {\n        return (ctx, next) => {\n            logFn(JSON.stringify(ctx.update, null, 2));\n            return next();\n        };\n    }\n    /**\n     * @param trueMiddleware middleware to run if the predicate returns true\n     * @param falseMiddleware middleware to run if the predicate returns false\n     */\n    static branch(predicate, trueMiddleware, falseMiddleware) {\n        if (typeof predicate !== 'function') {\n            return Composer.unwrap(predicate ? trueMiddleware : falseMiddleware);\n        }\n        return Composer.lazy((ctx) => Promise.resolve(predicate(ctx)).then((value) => value ? trueMiddleware : falseMiddleware));\n    }\n    /**\n     * Generates optional middleware.\n     * @param predicate predicate to decide on a context object whether to run the middleware\n     * @param fns middleware to run if the predicate returns true\n     */\n    static optional(predicate, ...fns) {\n        return Composer.branch(predicate, Composer.compose(fns), Composer.passThru());\n    }\n    /** @deprecated use `Composer.drop` */\n    static filter(predicate) {\n        return Composer.branch(predicate, Composer.passThru(), anoop);\n    }\n    /**\n     * Generates middleware for dropping matching updates.\n     */\n    static drop(predicate) {\n        return Composer.branch(predicate, anoop, Composer.passThru());\n    }\n    static dispatch(routeFn, handlers) {\n        return Composer.lazy((ctx) => Promise.resolve(routeFn(ctx)).then((value) => handlers[value]));\n    }\n    // EXPLANATION FOR THE ts-expect-error ANNOTATIONS\n    // The annotations around function invocations with `...fns` are there\n    // whenever we perform validation logic that the flow analysis of TypeScript\n    // cannot comprehend. We always make sure that the middleware functions are\n    // only invoked with properly constrained context objects, but this cannot be\n    // determined automatically.\n    /**\n     * Generates optional middleware based on a predicate that only operates on `ctx.update`.\n     *\n     * Example:\n     * ```ts\n     * import { Composer, Update } from 'telegraf'\n     *\n     * const predicate = (u): u is Update.MessageUpdate => 'message' in u\n     * const middleware = Composer.guard(predicate, (ctx) => {\n     *   const message = ctx.update.message\n     * })\n     * ```\n     *\n     * Note that `Composer.on('message')` is preferred over this.\n     *\n     * @param guardFn predicate to decide whether to run the middleware based on the `ctx.update` object\n     * @param fns middleware to run if the predicate returns true\n     * @see `Composer.optional` for a more generic version of this method that allows the predicate to operate on `ctx` itself\n     * @deprecated use `Composer.on`\n     */\n    static guard(guardFn, ...fns) {\n        return Composer.optional((ctx) => guardFn(ctx.update), \n        // @ts-expect-error see explanation above\n        ...fns);\n    }\n    static on(updateType, ...fns) {\n        const filters = Array.isArray(updateType) ? updateType : [updateType];\n        const predicate = (update) => {\n            for (const filter of filters) {\n                if (\n                // TODO: this should change to === 'function' once TS bug is fixed\n                // https://github.com/microsoft/TypeScript/pull/51502\n                typeof filter !== 'string'\n                    ? // filter is a type guard\n                        filter(update)\n                    : // check if filter is the update type\n                        filter in update ||\n                            // check if filter is the msg type\n                            // TODO: remove in v5!\n                            ('message' in update && filter in update.message)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        return Composer.optional((ctx) => predicate(ctx.update), ...fns);\n    }\n    static entity(predicate, ...fns) {\n        if (typeof predicate !== 'function') {\n            const entityTypes = normaliseTextArguments(predicate);\n            return Composer.entity(({ type }) => entityTypes.includes(type), ...fns);\n        }\n        return Composer.optional((ctx) => {\n            var _a;\n            const msg = (_a = ctx.message) !== null && _a !== void 0 ? _a : ctx.channelPost;\n            if (msg === undefined) {\n                return false;\n            }\n            const text = getText(msg);\n            const entities = getEntities(msg);\n            if (text === undefined)\n                return false;\n            return entities.some((entity) => predicate(entity, text.substring(entity.offset, entity.offset + entity.length), ctx));\n        }, \n        // @ts-expect-error see explanation above\n        ...fns);\n    }\n    static entityText(entityType, predicate, ...fns) {\n        if (fns.length === 0) {\n            // prettier-ignore\n            return Array.isArray(predicate)\n                // @ts-expect-error predicate is really the middleware\n                ? Composer.entity(entityType, ...predicate)\n                // @ts-expect-error predicate is really the middleware\n                : Composer.entity(entityType, predicate);\n        }\n        const triggers = normaliseTriggers(predicate);\n        return Composer.entity(({ type }, value, ctx) => {\n            if (type !== entityType) {\n                return false;\n            }\n            for (const trigger of triggers) {\n                // @ts-expect-error define so far unknown property `match`\n                if ((ctx.match = trigger(value, ctx))) {\n                    return true;\n                }\n            }\n            return false;\n        }, \n        // @ts-expect-error see explanation above\n        ...fns);\n    }\n    static email(email, ...fns) {\n        return Composer.entityText('email', email, ...fns);\n    }\n    static phone(number, ...fns) {\n        return Composer.entityText('phone_number', number, ...fns);\n    }\n    static url(url, ...fns) {\n        return Composer.entityText('url', url, ...fns);\n    }\n    static textLink(link, ...fns) {\n        return Composer.entityText('text_link', link, ...fns);\n    }\n    static textMention(mention, ...fns) {\n        return Composer.entityText('text_mention', mention, ...fns);\n    }\n    static mention(mention, ...fns) {\n        return Composer.entityText('mention', normaliseTextArguments(mention, '@'), ...fns);\n    }\n    static hashtag(hashtag, ...fns) {\n        return Composer.entityText('hashtag', normaliseTextArguments(hashtag, '#'), ...fns);\n    }\n    static cashtag(cashtag, ...fns) {\n        return Composer.entityText('cashtag', normaliseTextArguments(cashtag, '$'), ...fns);\n    }\n    static spoiler(text, ...fns) {\n        return Composer.entityText('spoiler', text, ...fns);\n    }\n    static match(triggers, ...fns) {\n        const handler = Composer.compose(fns);\n        return (ctx, next) => {\n            var _a, _b, _c, _d;\n            const text = (_c = (_b = (_a = getText(ctx.message)) !== null && _a !== void 0 ? _a : getText(ctx.channelPost)) !== null && _b !== void 0 ? _b : getText(ctx.callbackQuery)) !== null && _c !== void 0 ? _c : (_d = ctx.inlineQuery) === null || _d === void 0 ? void 0 : _d.query;\n            if (text === undefined)\n                return next();\n            for (const trigger of triggers) {\n                const match = trigger(text, ctx);\n                if (match)\n                    return handler(Object.assign(ctx, { match }), next);\n            }\n            return next();\n        };\n    }\n    /**\n     * Generates middleware for handling matching text messages.\n     */\n    static hears(triggers, ...fns) {\n        return Composer.on('text', Composer.match(normaliseTriggers(triggers), ...fns));\n    }\n    /**\n     * Generates middleware for handling specified commands.\n     */\n    static command(command, ...fns) {\n        if (fns.length === 0)\n            // @ts-expect-error command is really the middleware\n            return Composer.entity('bot_command', command);\n        const triggers = normaliseTriggers(command);\n        const filter = (0, filters_1.message)('text');\n        const handler = Composer.compose(fns);\n        return Composer.on(filter, (ctx, next) => {\n            const { entities } = ctx.message;\n            const cmdEntity = entities === null || entities === void 0 ? void 0 : entities[0];\n            if ((cmdEntity === null || cmdEntity === void 0 ? void 0 : cmdEntity.type) !== 'bot_command')\n                return next();\n            if (cmdEntity.offset > 0)\n                return next();\n            const len = cmdEntity.length;\n            const text = ctx.message.text;\n            const [cmdPart, to] = text.slice(0, len).split('@');\n            if (!cmdPart)\n                return next();\n            // always check for bot's own username case-insensitively\n            if (to && to.toLowerCase() !== ctx.me.toLowerCase())\n                return next();\n            const command = cmdPart.slice(1);\n            for (const trigger of triggers) {\n                const match = trigger(command, ctx);\n                if (match) {\n                    const payloadOffset = len + 1;\n                    const payload = text.slice(payloadOffset);\n                    const c = Object.assign(ctx, { match, command, payload, args: [] });\n                    let _args = undefined;\n                    // using defineProperty only to make parsing lazy on access\n                    Object.defineProperty(c, 'args', {\n                        enumerable: true,\n                        configurable: true,\n                        get() {\n                            if (_args != null)\n                                return _args;\n                            // once parsed, cache and don't parse again on every access\n                            return (_args = (0, args_1.argsParser)(payload, entities, payloadOffset));\n                        },\n                        set(args) {\n                            _args = args;\n                        },\n                    });\n                    return handler(c, next);\n                }\n            }\n            return next();\n        });\n    }\n    /**\n     * Generates middleware for handling matching callback queries.\n     */\n    static action(triggers, ...fns) {\n        return Composer.on('callback_query', Composer.match(normaliseTriggers(triggers), ...fns));\n    }\n    /**\n     * Generates middleware for handling matching inline queries.\n     */\n    static inlineQuery(triggers, ...fns) {\n        return Composer.on('inline_query', Composer.match(normaliseTriggers(triggers), ...fns));\n    }\n    static reaction(reaction, ...fns) {\n        const reactions = Array.isArray(reaction) ? reaction : [reaction];\n        const handler = Composer.compose(fns);\n        return Composer.on('message_reaction', (ctx, next) => {\n            const match = reactions.find((r) => typeof r === 'string' && r.startsWith('-')\n                ? ctx.reactions.removed.has(r.slice(1))\n                : ctx.reactions.added.has(r));\n            if (match)\n                return handler(Object.assign(ctx, { match }), next);\n            return next();\n        });\n    }\n    /**\n     * Generates middleware responding only to specified users.\n     */\n    static acl(userId, ...fns) {\n        if (typeof userId === 'function') {\n            return Composer.optional(userId, ...fns);\n        }\n        const allowed = Array.isArray(userId) ? userId : [userId];\n        // prettier-ignore\n        return Composer.optional((ctx) => !ctx.from || allowed.includes(ctx.from.id), ...fns);\n    }\n    static memberStatus(status, ...fns) {\n        const statuses = Array.isArray(status) ? status : [status];\n        return Composer.optional(async (ctx) => {\n            if (ctx.message === undefined)\n                return false;\n            const member = await ctx.getChatMember(ctx.message.from.id);\n            return statuses.includes(member.status);\n        }, ...fns);\n    }\n    /**\n     * Generates middleware responding only to chat admins and chat creator.\n     */\n    static admin(...fns) {\n        return Composer.memberStatus(['administrator', 'creator'], ...fns);\n    }\n    /**\n     * Generates middleware responding only to chat creator.\n     */\n    static creator(...fns) {\n        return Composer.memberStatus('creator', ...fns);\n    }\n    /**\n     * Generates middleware running only in specified chat types.\n     */\n    static chatType(type, ...fns) {\n        const types = Array.isArray(type) ? type : [type];\n        return Composer.optional((ctx) => {\n            const chat = ctx.chat;\n            return chat !== undefined && types.includes(chat.type);\n        }, ...fns);\n    }\n    /**\n     * Generates middleware running only in private chats.\n     */\n    static privateChat(...fns) {\n        return Composer.chatType('private', ...fns);\n    }\n    /**\n     * Generates middleware running only in groups and supergroups.\n     */\n    static groupChat(...fns) {\n        return Composer.chatType(['group', 'supergroup'], ...fns);\n    }\n    /**\n     * Generates middleware for handling game queries.\n     */\n    static gameQuery(...fns) {\n        return Composer.guard((0, filters_1.callbackQuery)('game_short_name'), ...fns);\n    }\n    static unwrap(handler) {\n        if (!handler) {\n            throw new Error('Handler is undefined');\n        }\n        return 'middleware' in handler ? handler.middleware() : handler;\n    }\n    static compose(middlewares) {\n        if (!Array.isArray(middlewares)) {\n            throw new Error('Middlewares must be an array');\n        }\n        if (middlewares.length === 0) {\n            return Composer.passThru();\n        }\n        if (middlewares.length === 1) {\n            // Quite literally asserted in the above condition\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return Composer.unwrap(middlewares[0]);\n        }\n        return (ctx, next) => {\n            let index = -1;\n            return execute(0, ctx);\n            async function execute(i, context) {\n                var _a;\n                if (!(context instanceof context_1.default)) {\n                    throw new Error('next(ctx) called with invalid context');\n                }\n                if (i <= index) {\n                    throw new Error('next() called multiple times');\n                }\n                index = i;\n                const handler = Composer.unwrap((_a = middlewares[i]) !== null && _a !== void 0 ? _a : next);\n                await handler(context, async (ctx = context) => {\n                    await execute(i + 1, ctx);\n                });\n            }\n        };\n    }\n}\nexports.Composer = Composer;\n/**\n * Generates middleware for handling provided update types.\n * @deprecated use `Composer.on` instead\n */\nComposer.mount = Composer.on;\nfunction escapeRegExp(s) {\n    // $& means the whole matched string\n    return s.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction normaliseTriggers(triggers) {\n    if (!Array.isArray(triggers))\n        triggers = [triggers];\n    return triggers.map((trigger) => {\n        if (!trigger)\n            throw new Error('Invalid trigger');\n        if (typeof trigger === 'function')\n            return trigger;\n        if (trigger instanceof RegExp)\n            return (value = '') => {\n                trigger.lastIndex = 0;\n                return trigger.exec(value);\n            };\n        const regex = new RegExp(`^${escapeRegExp(trigger)}$`);\n        return (value) => regex.exec(value);\n    });\n}\nfunction getEntities(msg) {\n    var _a, _b;\n    if (msg == null)\n        return [];\n    if ('caption_entities' in msg)\n        return (_a = msg.caption_entities) !== null && _a !== void 0 ? _a : [];\n    if ('entities' in msg)\n        return (_b = msg.entities) !== null && _b !== void 0 ? _b : [];\n    return [];\n}\nfunction getText(msg) {\n    if (msg == null)\n        return undefined;\n    if ('caption' in msg)\n        return msg.caption;\n    if ('text' in msg)\n        return msg.text;\n    if ('data' in msg)\n        return msg.data;\n    if ('game_short_name' in msg)\n        return msg.game_short_name;\n    return undefined;\n}\nfunction normaliseTextArguments(argument, prefix = '') {\n    const args = Array.isArray(argument) ? argument : [argument];\n    // prettier-ignore\n    return args\n        .filter(Boolean)\n        .map((arg) => prefix && typeof arg === 'string' && !arg.startsWith(prefix) ? `${prefix}${arg}` : arg);\n}\nexports[\"default\"] = Composer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvbXBvc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsa0NBQWtDLG1CQUFPLENBQUMsK0RBQVc7QUFDckQsa0JBQWtCLG1CQUFPLENBQUMsK0RBQVc7QUFDckMsZUFBZSxtQkFBTyxDQUFDLG1GQUFxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsMkJBQTJCO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxNQUFNO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxNQUFNO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELE9BQU87QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsbUNBQW1DO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxPQUFPO0FBQzNEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHNCQUFzQjtBQUMzRDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLE9BQU8sRUFBRSxJQUFJO0FBQ3JHO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtraXJhZS9EZXNrdG9wL0F1cnVtQm90L2Zyb250ZW5kL25vZGVfbW9kdWxlcy90ZWxlZ3JhZi9saWIvY29tcG9zZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQGZvcm1hdCAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21wb3NlciA9IHZvaWQgMDtcbmNvbnN0IGNvbnRleHRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb250ZXh0XCIpKTtcbmNvbnN0IGZpbHRlcnNfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnNcIik7XG5jb25zdCBhcmdzXzEgPSByZXF1aXJlKFwiLi9jb3JlL2hlbHBlcnMvYXJnc1wiKTtcbmZ1bmN0aW9uIGFsd2F5cyh4KSB7XG4gICAgcmV0dXJuICgpID0+IHg7XG59XG5jb25zdCBhbm9vcCA9IGFsd2F5cyhQcm9taXNlLnJlc29sdmUoKSk7XG5jbGFzcyBDb21wb3NlciB7XG4gICAgY29uc3RydWN0b3IoLi4uZm5zKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IENvbXBvc2VyLmNvbXBvc2UoZm5zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbWlkZGxld2FyZS5cbiAgICAgKi9cbiAgICB1c2UoLi4uZm5zKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IENvbXBvc2VyLmNvbXBvc2UoW3RoaXMuaGFuZGxlciwgLi4uZm5zXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgbWlkZGxld2FyZSBmb3IgaGFuZGxpbmcgdXBkYXRlc1xuICAgICAqIG1hdGNoaW5nIGdpdmVuIHR5cGUgZ3VhcmQgZnVuY3Rpb24uXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGBDb21wb3Nlcjo6b25gXG4gICAgICovXG4gICAgZ3VhcmQoZ3VhcmRGbiwgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZShDb21wb3Nlci5ndWFyZChndWFyZEZuLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgb24oZmlsdGVycywgLi4uZm5zKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVGhpcyBzaG91bGQgZ2V0IHJlc29sdmVkIHdoZW4gdGhlIG92ZXJsb2FkcyBhcmUgcmVtb3ZlZCBpbiB2NVxuICAgICAgICByZXR1cm4gdGhpcy51c2UoQ29tcG9zZXIub24oZmlsdGVycywgLi4uZm5zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyBtYXRjaGluZyB0ZXh0IG1lc3NhZ2VzLlxuICAgICAqL1xuICAgIGhlYXJzKHRyaWdnZXJzLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLmhlYXJzKHRyaWdnZXJzLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIG1pZGRsZXdhcmUgZm9yIGhhbmRsaW5nIHNwZWNpZmllZCBjb21tYW5kcy5cbiAgICAgKi9cbiAgICBjb21tYW5kKGNvbW1hbmQsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gdGhpcy51c2UoQ29tcG9zZXIuY29tbWFuZChjb21tYW5kLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIG1pZGRsZXdhcmUgZm9yIGhhbmRsaW5nIG1hdGNoaW5nIGNhbGxiYWNrIHF1ZXJpZXMuXG4gICAgICovXG4gICAgYWN0aW9uKHRyaWdnZXJzLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLmFjdGlvbih0cmlnZ2VycywgLi4uZm5zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyBtYXRjaGluZyBpbmxpbmUgcXVlcmllcy5cbiAgICAgKi9cbiAgICBpbmxpbmVRdWVyeSh0cmlnZ2VycywgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZShDb21wb3Nlci5pbmxpbmVRdWVyeSh0cmlnZ2VycywgLi4uZm5zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyBnYW1lIHF1ZXJpZXNcbiAgICAgKi9cbiAgICBnYW1lUXVlcnkoLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZShDb21wb3Nlci5nYW1lUXVlcnkoLi4uZm5zKSk7XG4gICAgfVxuICAgIHJlYWN0aW9uKHJlYWN0aW9uLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLnJlYWN0aW9uKHJlYWN0aW9uLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIG1pZGRsZXdhcmUgZm9yIGRyb3BwaW5nIG1hdGNoaW5nIHVwZGF0ZXMuXG4gICAgICovXG4gICAgZHJvcChwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLmRyb3AocHJlZGljYXRlKSk7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgYENvbXBvc2VyOjpkcm9wYCAqL1xuICAgIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLmZpbHRlcihwcmVkaWNhdGUpKTtcbiAgICB9XG4gICAgZW50aXR5KHByZWRpY2F0ZSwgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZShDb21wb3Nlci5lbnRpdHkocHJlZGljYXRlLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgZW1haWwoZW1haWwsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gdGhpcy51c2UoQ29tcG9zZXIuZW1haWwoZW1haWwsIC4uLmZucykpO1xuICAgIH1cbiAgICB1cmwodXJsLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLnVybCh1cmwsIC4uLmZucykpO1xuICAgIH1cbiAgICB0ZXh0TGluayhsaW5rLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLnRleHRMaW5rKGxpbmssIC4uLmZucykpO1xuICAgIH1cbiAgICB0ZXh0TWVudGlvbihtZW50aW9uLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLnRleHRNZW50aW9uKG1lbnRpb24sIC4uLmZucykpO1xuICAgIH1cbiAgICBtZW50aW9uKG1lbnRpb24sIC4uLmZucykge1xuICAgICAgICByZXR1cm4gdGhpcy51c2UoQ29tcG9zZXIubWVudGlvbihtZW50aW9uLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgcGhvbmUobnVtYmVyLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLnBob25lKG51bWJlciwgLi4uZm5zKSk7XG4gICAgfVxuICAgIGhhc2h0YWcoaGFzaHRhZywgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZShDb21wb3Nlci5oYXNodGFnKGhhc2h0YWcsIC4uLmZucykpO1xuICAgIH1cbiAgICBjYXNodGFnKGNhc2h0YWcsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gdGhpcy51c2UoQ29tcG9zZXIuY2FzaHRhZyhjYXNodGFnLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgc3BvaWxlcih0ZXh0LCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKENvbXBvc2VyLnNwb2lsZXIodGV4dCwgLi4uZm5zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG1pZGRsZXdhcmUgZm9yIGhhbmRsaW5nIC9zdGFydFxuICAgICAqL1xuICAgIHN0YXJ0KC4uLmZucykge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gQ29tcG9zZXIuY29tcG9zZShmbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKCdzdGFydCcsIChjdHgsIG5leHQpID0+IGhhbmRsZXIoT2JqZWN0LmFzc2lnbihjdHgsIHsgc3RhcnRQYXlsb2FkOiBjdHgucGF5bG9hZCB9KSwgbmV4dCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyAvaGVscFxuICAgICAqL1xuICAgIGhlbHAoLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoJ2hlbHAnLCAuLi5mbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyAvc2V0dGluZ3NcbiAgICAgKi9cbiAgICBzZXR0aW5ncyguLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCgnc2V0dGluZ3MnLCAuLi5mbnMpO1xuICAgIH1cbiAgICBtaWRkbGV3YXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVyO1xuICAgIH1cbiAgICBzdGF0aWMgcmVwbHkoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gKGN0eCkgPT4gY3R4LnJlcGx5KC4uLmFyZ3MpO1xuICAgIH1cbiAgICBzdGF0aWMgY2F0Y2goZXJyb3JIYW5kbGVyLCAuLi5mbnMpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IENvbXBvc2VyLmNvbXBvc2UoZm5zKTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHJldHVybiAoY3R4LCBuZXh0KSA9PiBQcm9taXNlLnJlc29sdmUoaGFuZGxlcihjdHgsIG5leHQpKVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGVycm9ySGFuZGxlcihlcnIsIGN0eCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgbWlkZGxld2FyZSB0aGF0IHJ1bnMgaW4gdGhlIGJhY2tncm91bmQuXG4gICAgICovXG4gICAgc3RhdGljIGZvcmsobWlkZGxld2FyZSkge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gQ29tcG9zZXIudW53cmFwKG1pZGRsZXdhcmUpO1xuICAgICAgICByZXR1cm4gYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW2hhbmRsZXIoY3R4LCBhbm9vcCksIG5leHQoKV0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgdGFwKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IENvbXBvc2VyLnVud3JhcChtaWRkbGV3YXJlKTtcbiAgICAgICAgcmV0dXJuIChjdHgsIG5leHQpID0+IFByb21pc2UucmVzb2x2ZShoYW5kbGVyKGN0eCwgYW5vb3ApKS50aGVuKCgpID0+IG5leHQoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBtaWRkbGV3YXJlIHRoYXQgZ2l2ZXMgdXAgY29udHJvbCB0byB0aGUgbmV4dCBtaWRkbGV3YXJlLlxuICAgICAqL1xuICAgIHN0YXRpYyBwYXNzVGhydSgpIHtcbiAgICAgICAgcmV0dXJuIChjdHgsIG5leHQpID0+IG5leHQoKTtcbiAgICB9XG4gICAgc3RhdGljIGxhenkoZmFjdG9yeUZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmFjdG9yeUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY3R4LCBuZXh0KSA9PiBQcm9taXNlLnJlc29sdmUoZmFjdG9yeUZuKGN0eCkpLnRoZW4oKG1pZGRsZXdhcmUpID0+IENvbXBvc2VyLnVud3JhcChtaWRkbGV3YXJlKShjdHgsIG5leHQpKTtcbiAgICB9XG4gICAgc3RhdGljIGxvZyhsb2dGbiA9IGNvbnNvbGUubG9nKSB7XG4gICAgICAgIHJldHVybiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBsb2dGbihKU09OLnN0cmluZ2lmeShjdHgudXBkYXRlLCBudWxsLCAyKSk7XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdHJ1ZU1pZGRsZXdhcmUgbWlkZGxld2FyZSB0byBydW4gaWYgdGhlIHByZWRpY2F0ZSByZXR1cm5zIHRydWVcbiAgICAgKiBAcGFyYW0gZmFsc2VNaWRkbGV3YXJlIG1pZGRsZXdhcmUgdG8gcnVuIGlmIHRoZSBwcmVkaWNhdGUgcmV0dXJucyBmYWxzZVxuICAgICAqL1xuICAgIHN0YXRpYyBicmFuY2gocHJlZGljYXRlLCB0cnVlTWlkZGxld2FyZSwgZmFsc2VNaWRkbGV3YXJlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcG9zZXIudW53cmFwKHByZWRpY2F0ZSA/IHRydWVNaWRkbGV3YXJlIDogZmFsc2VNaWRkbGV3YXJlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQ29tcG9zZXIubGF6eSgoY3R4KSA9PiBQcm9taXNlLnJlc29sdmUocHJlZGljYXRlKGN0eCkpLnRoZW4oKHZhbHVlKSA9PiB2YWx1ZSA/IHRydWVNaWRkbGV3YXJlIDogZmFsc2VNaWRkbGV3YXJlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBvcHRpb25hbCBtaWRkbGV3YXJlLlxuICAgICAqIEBwYXJhbSBwcmVkaWNhdGUgcHJlZGljYXRlIHRvIGRlY2lkZSBvbiBhIGNvbnRleHQgb2JqZWN0IHdoZXRoZXIgdG8gcnVuIHRoZSBtaWRkbGV3YXJlXG4gICAgICogQHBhcmFtIGZucyBtaWRkbGV3YXJlIHRvIHJ1biBpZiB0aGUgcHJlZGljYXRlIHJldHVybnMgdHJ1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBvcHRpb25hbChwcmVkaWNhdGUsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIuYnJhbmNoKHByZWRpY2F0ZSwgQ29tcG9zZXIuY29tcG9zZShmbnMpLCBDb21wb3Nlci5wYXNzVGhydSgpKTtcbiAgICB9XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSBgQ29tcG9zZXIuZHJvcGAgKi9cbiAgICBzdGF0aWMgZmlsdGVyKHByZWRpY2F0ZSkge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIuYnJhbmNoKHByZWRpY2F0ZSwgQ29tcG9zZXIucGFzc1RocnUoKSwgYW5vb3ApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgbWlkZGxld2FyZSBmb3IgZHJvcHBpbmcgbWF0Y2hpbmcgdXBkYXRlcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZHJvcChwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLmJyYW5jaChwcmVkaWNhdGUsIGFub29wLCBDb21wb3Nlci5wYXNzVGhydSgpKTtcbiAgICB9XG4gICAgc3RhdGljIGRpc3BhdGNoKHJvdXRlRm4sIGhhbmRsZXJzKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5sYXp5KChjdHgpID0+IFByb21pc2UucmVzb2x2ZShyb3V0ZUZuKGN0eCkpLnRoZW4oKHZhbHVlKSA9PiBoYW5kbGVyc1t2YWx1ZV0pKTtcbiAgICB9XG4gICAgLy8gRVhQTEFOQVRJT04gRk9SIFRIRSB0cy1leHBlY3QtZXJyb3IgQU5OT1RBVElPTlNcbiAgICAvLyBUaGUgYW5ub3RhdGlvbnMgYXJvdW5kIGZ1bmN0aW9uIGludm9jYXRpb25zIHdpdGggYC4uLmZuc2AgYXJlIHRoZXJlXG4gICAgLy8gd2hlbmV2ZXIgd2UgcGVyZm9ybSB2YWxpZGF0aW9uIGxvZ2ljIHRoYXQgdGhlIGZsb3cgYW5hbHlzaXMgb2YgVHlwZVNjcmlwdFxuICAgIC8vIGNhbm5vdCBjb21wcmVoZW5kLiBXZSBhbHdheXMgbWFrZSBzdXJlIHRoYXQgdGhlIG1pZGRsZXdhcmUgZnVuY3Rpb25zIGFyZVxuICAgIC8vIG9ubHkgaW52b2tlZCB3aXRoIHByb3Blcmx5IGNvbnN0cmFpbmVkIGNvbnRleHQgb2JqZWN0cywgYnV0IHRoaXMgY2Fubm90IGJlXG4gICAgLy8gZGV0ZXJtaW5lZCBhdXRvbWF0aWNhbGx5LlxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBvcHRpb25hbCBtaWRkbGV3YXJlIGJhc2VkIG9uIGEgcHJlZGljYXRlIHRoYXQgb25seSBvcGVyYXRlcyBvbiBgY3R4LnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYHRzXG4gICAgICogaW1wb3J0IHsgQ29tcG9zZXIsIFVwZGF0ZSB9IGZyb20gJ3RlbGVncmFmJ1xuICAgICAqXG4gICAgICogY29uc3QgcHJlZGljYXRlID0gKHUpOiB1IGlzIFVwZGF0ZS5NZXNzYWdlVXBkYXRlID0+ICdtZXNzYWdlJyBpbiB1XG4gICAgICogY29uc3QgbWlkZGxld2FyZSA9IENvbXBvc2VyLmd1YXJkKHByZWRpY2F0ZSwgKGN0eCkgPT4ge1xuICAgICAqICAgY29uc3QgbWVzc2FnZSA9IGN0eC51cGRhdGUubWVzc2FnZVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgYENvbXBvc2VyLm9uKCdtZXNzYWdlJylgIGlzIHByZWZlcnJlZCBvdmVyIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ3VhcmRGbiBwcmVkaWNhdGUgdG8gZGVjaWRlIHdoZXRoZXIgdG8gcnVuIHRoZSBtaWRkbGV3YXJlIGJhc2VkIG9uIHRoZSBgY3R4LnVwZGF0ZWAgb2JqZWN0XG4gICAgICogQHBhcmFtIGZucyBtaWRkbGV3YXJlIHRvIHJ1biBpZiB0aGUgcHJlZGljYXRlIHJldHVybnMgdHJ1ZVxuICAgICAqIEBzZWUgYENvbXBvc2VyLm9wdGlvbmFsYCBmb3IgYSBtb3JlIGdlbmVyaWMgdmVyc2lvbiBvZiB0aGlzIG1ldGhvZCB0aGF0IGFsbG93cyB0aGUgcHJlZGljYXRlIHRvIG9wZXJhdGUgb24gYGN0eGAgaXRzZWxmXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGBDb21wb3Nlci5vbmBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ3VhcmQoZ3VhcmRGbiwgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5vcHRpb25hbCgoY3R4KSA9PiBndWFyZEZuKGN0eC51cGRhdGUpLCBcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBzZWUgZXhwbGFuYXRpb24gYWJvdmVcbiAgICAgICAgLi4uZm5zKTtcbiAgICB9XG4gICAgc3RhdGljIG9uKHVwZGF0ZVR5cGUsIC4uLmZucykge1xuICAgICAgICBjb25zdCBmaWx0ZXJzID0gQXJyYXkuaXNBcnJheSh1cGRhdGVUeXBlKSA/IHVwZGF0ZVR5cGUgOiBbdXBkYXRlVHlwZV07XG4gICAgICAgIGNvbnN0IHByZWRpY2F0ZSA9ICh1cGRhdGUpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIGZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBzaG91bGQgY2hhbmdlIHRvID09PSAnZnVuY3Rpb24nIG9uY2UgVFMgYnVnIGlzIGZpeGVkXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvNTE1MDJcbiAgICAgICAgICAgICAgICB0eXBlb2YgZmlsdGVyICE9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IC8vIGZpbHRlciBpcyBhIHR5cGUgZ3VhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcih1cGRhdGUpXG4gICAgICAgICAgICAgICAgICAgIDogLy8gY2hlY2sgaWYgZmlsdGVyIGlzIHRoZSB1cGRhdGUgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyIGluIHVwZGF0ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGZpbHRlciBpcyB0aGUgbXNnIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgaW4gdjUhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCdtZXNzYWdlJyBpbiB1cGRhdGUgJiYgZmlsdGVyIGluIHVwZGF0ZS5tZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5vcHRpb25hbCgoY3R4KSA9PiBwcmVkaWNhdGUoY3R4LnVwZGF0ZSksIC4uLmZucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlbnRpdHkocHJlZGljYXRlLCAuLi5mbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eVR5cGVzID0gbm9ybWFsaXNlVGV4dEFyZ3VtZW50cyhwcmVkaWNhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIENvbXBvc2VyLmVudGl0eSgoeyB0eXBlIH0pID0+IGVudGl0eVR5cGVzLmluY2x1ZGVzKHR5cGUpLCAuLi5mbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5vcHRpb25hbCgoY3R4KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSAoX2EgPSBjdHgubWVzc2FnZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3R4LmNoYW5uZWxQb3N0O1xuICAgICAgICAgICAgaWYgKG1zZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGdldFRleHQobXNnKTtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0aWVzID0gZ2V0RW50aXRpZXMobXNnKTtcbiAgICAgICAgICAgIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0aWVzLnNvbWUoKGVudGl0eSkgPT4gcHJlZGljYXRlKGVudGl0eSwgdGV4dC5zdWJzdHJpbmcoZW50aXR5Lm9mZnNldCwgZW50aXR5Lm9mZnNldCArIGVudGl0eS5sZW5ndGgpLCBjdHgpKTtcbiAgICAgICAgfSwgXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igc2VlIGV4cGxhbmF0aW9uIGFib3ZlXG4gICAgICAgIC4uLmZucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlbnRpdHlUZXh0KGVudGl0eVR5cGUsIHByZWRpY2F0ZSwgLi4uZm5zKSB7XG4gICAgICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByZWRpY2F0ZSlcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHByZWRpY2F0ZSBpcyByZWFsbHkgdGhlIG1pZGRsZXdhcmVcbiAgICAgICAgICAgICAgICA/IENvbXBvc2VyLmVudGl0eShlbnRpdHlUeXBlLCAuLi5wcmVkaWNhdGUpXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBwcmVkaWNhdGUgaXMgcmVhbGx5IHRoZSBtaWRkbGV3YXJlXG4gICAgICAgICAgICAgICAgOiBDb21wb3Nlci5lbnRpdHkoZW50aXR5VHlwZSwgcHJlZGljYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmlnZ2VycyA9IG5vcm1hbGlzZVRyaWdnZXJzKHByZWRpY2F0ZSk7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5lbnRpdHkoKHsgdHlwZSB9LCB2YWx1ZSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gZW50aXR5VHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJpZ2dlciBvZiB0cmlnZ2Vycykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgZGVmaW5lIHNvIGZhciB1bmtub3duIHByb3BlcnR5IGBtYXRjaGBcbiAgICAgICAgICAgICAgICBpZiAoKGN0eC5tYXRjaCA9IHRyaWdnZXIodmFsdWUsIGN0eCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSwgXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igc2VlIGV4cGxhbmF0aW9uIGFib3ZlXG4gICAgICAgIC4uLmZucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlbWFpbChlbWFpbCwgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5lbnRpdHlUZXh0KCdlbWFpbCcsIGVtYWlsLCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgcGhvbmUobnVtYmVyLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLmVudGl0eVRleHQoJ3Bob25lX251bWJlcicsIG51bWJlciwgLi4uZm5zKTtcbiAgICB9XG4gICAgc3RhdGljIHVybCh1cmwsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIuZW50aXR5VGV4dCgndXJsJywgdXJsLCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgdGV4dExpbmsobGluaywgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5lbnRpdHlUZXh0KCd0ZXh0X2xpbmsnLCBsaW5rLCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgdGV4dE1lbnRpb24obWVudGlvbiwgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5lbnRpdHlUZXh0KCd0ZXh0X21lbnRpb24nLCBtZW50aW9uLCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgbWVudGlvbihtZW50aW9uLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLmVudGl0eVRleHQoJ21lbnRpb24nLCBub3JtYWxpc2VUZXh0QXJndW1lbnRzKG1lbnRpb24sICdAJyksIC4uLmZucyk7XG4gICAgfVxuICAgIHN0YXRpYyBoYXNodGFnKGhhc2h0YWcsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIuZW50aXR5VGV4dCgnaGFzaHRhZycsIG5vcm1hbGlzZVRleHRBcmd1bWVudHMoaGFzaHRhZywgJyMnKSwgLi4uZm5zKTtcbiAgICB9XG4gICAgc3RhdGljIGNhc2h0YWcoY2FzaHRhZywgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5lbnRpdHlUZXh0KCdjYXNodGFnJywgbm9ybWFsaXNlVGV4dEFyZ3VtZW50cyhjYXNodGFnLCAnJCcpLCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgc3BvaWxlcih0ZXh0LCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLmVudGl0eVRleHQoJ3Nwb2lsZXInLCB0ZXh0LCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgbWF0Y2godHJpZ2dlcnMsIC4uLmZucykge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gQ29tcG9zZXIuY29tcG9zZShmbnMpO1xuICAgICAgICByZXR1cm4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IChfYyA9IChfYiA9IChfYSA9IGdldFRleHQoY3R4Lm1lc3NhZ2UpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBnZXRUZXh0KGN0eC5jaGFubmVsUG9zdCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGdldFRleHQoY3R4LmNhbGxiYWNrUXVlcnkpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2QgPSBjdHguaW5saW5lUXVlcnkpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5xdWVyeTtcbiAgICAgICAgICAgIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJpZ2dlciBvZiB0cmlnZ2Vycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdHJpZ2dlcih0ZXh0LCBjdHgpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoT2JqZWN0LmFzc2lnbihjdHgsIHsgbWF0Y2ggfSksIG5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIG1pZGRsZXdhcmUgZm9yIGhhbmRsaW5nIG1hdGNoaW5nIHRleHQgbWVzc2FnZXMuXG4gICAgICovXG4gICAgc3RhdGljIGhlYXJzKHRyaWdnZXJzLCAuLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLm9uKCd0ZXh0JywgQ29tcG9zZXIubWF0Y2gobm9ybWFsaXNlVHJpZ2dlcnModHJpZ2dlcnMpLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIG1pZGRsZXdhcmUgZm9yIGhhbmRsaW5nIHNwZWNpZmllZCBjb21tYW5kcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgY29tbWFuZChjb21tYW5kLCAuLi5mbnMpIHtcbiAgICAgICAgaWYgKGZucy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNvbW1hbmQgaXMgcmVhbGx5IHRoZSBtaWRkbGV3YXJlXG4gICAgICAgICAgICByZXR1cm4gQ29tcG9zZXIuZW50aXR5KCdib3RfY29tbWFuZCcsIGNvbW1hbmQpO1xuICAgICAgICBjb25zdCB0cmlnZ2VycyA9IG5vcm1hbGlzZVRyaWdnZXJzKGNvbW1hbmQpO1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSAoMCwgZmlsdGVyc18xLm1lc3NhZ2UpKCd0ZXh0Jyk7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBDb21wb3Nlci5jb21wb3NlKGZucyk7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5vbihmaWx0ZXIsIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZW50aXRpZXMgfSA9IGN0eC5tZXNzYWdlO1xuICAgICAgICAgICAgY29uc3QgY21kRW50aXR5ID0gZW50aXRpZXMgPT09IG51bGwgfHwgZW50aXRpZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVudGl0aWVzWzBdO1xuICAgICAgICAgICAgaWYgKChjbWRFbnRpdHkgPT09IG51bGwgfHwgY21kRW50aXR5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbWRFbnRpdHkudHlwZSkgIT09ICdib3RfY29tbWFuZCcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIGlmIChjbWRFbnRpdHkub2Zmc2V0ID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gY21kRW50aXR5Lmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBjdHgubWVzc2FnZS50ZXh0O1xuICAgICAgICAgICAgY29uc3QgW2NtZFBhcnQsIHRvXSA9IHRleHQuc2xpY2UoMCwgbGVuKS5zcGxpdCgnQCcpO1xuICAgICAgICAgICAgaWYgKCFjbWRQYXJ0KVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgICAgICAvLyBhbHdheXMgY2hlY2sgZm9yIGJvdCdzIG93biB1c2VybmFtZSBjYXNlLWluc2Vuc2l0aXZlbHlcbiAgICAgICAgICAgIGlmICh0byAmJiB0by50b0xvd2VyQ2FzZSgpICE9PSBjdHgubWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IGNtZFBhcnQuc2xpY2UoMSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdHJpZ2dlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IHRyaWdnZXIoY29tbWFuZCwgY3R4KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZE9mZnNldCA9IGxlbiArIDE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB0ZXh0LnNsaWNlKHBheWxvYWRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gT2JqZWN0LmFzc2lnbihjdHgsIHsgbWF0Y2gsIGNvbW1hbmQsIHBheWxvYWQsIGFyZ3M6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgX2FyZ3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVzaW5nIGRlZmluZVByb3BlcnR5IG9ubHkgdG8gbWFrZSBwYXJzaW5nIGxhenkgb24gYWNjZXNzXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjLCAnYXJncycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9hcmdzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYXJncztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmNlIHBhcnNlZCwgY2FjaGUgYW5kIGRvbid0IHBhcnNlIGFnYWluIG9uIGV2ZXJ5IGFjY2Vzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2FyZ3MgPSAoMCwgYXJnc18xLmFyZ3NQYXJzZXIpKHBheWxvYWQsIGVudGl0aWVzLCBwYXlsb2FkT2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0KGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYXJncyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoYywgbmV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyBtYXRjaGluZyBjYWxsYmFjayBxdWVyaWVzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhY3Rpb24odHJpZ2dlcnMsIC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIub24oJ2NhbGxiYWNrX3F1ZXJ5JywgQ29tcG9zZXIubWF0Y2gobm9ybWFsaXNlVHJpZ2dlcnModHJpZ2dlcnMpLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIG1pZGRsZXdhcmUgZm9yIGhhbmRsaW5nIG1hdGNoaW5nIGlubGluZSBxdWVyaWVzLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbmxpbmVRdWVyeSh0cmlnZ2VycywgLi4uZm5zKSB7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5vbignaW5saW5lX3F1ZXJ5JywgQ29tcG9zZXIubWF0Y2gobm9ybWFsaXNlVHJpZ2dlcnModHJpZ2dlcnMpLCAuLi5mbnMpKTtcbiAgICB9XG4gICAgc3RhdGljIHJlYWN0aW9uKHJlYWN0aW9uLCAuLi5mbnMpIHtcbiAgICAgICAgY29uc3QgcmVhY3Rpb25zID0gQXJyYXkuaXNBcnJheShyZWFjdGlvbikgPyByZWFjdGlvbiA6IFtyZWFjdGlvbl07XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBDb21wb3Nlci5jb21wb3NlKGZucyk7XG4gICAgICAgIHJldHVybiBDb21wb3Nlci5vbignbWVzc2FnZV9yZWFjdGlvbicsIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcmVhY3Rpb25zLmZpbmQoKHIpID0+IHR5cGVvZiByID09PSAnc3RyaW5nJyAmJiByLnN0YXJ0c1dpdGgoJy0nKVxuICAgICAgICAgICAgICAgID8gY3R4LnJlYWN0aW9ucy5yZW1vdmVkLmhhcyhyLnNsaWNlKDEpKVxuICAgICAgICAgICAgICAgIDogY3R4LnJlYWN0aW9ucy5hZGRlZC5oYXMocikpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKE9iamVjdC5hc3NpZ24oY3R4LCB7IG1hdGNoIH0pLCBuZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgbWlkZGxld2FyZSByZXNwb25kaW5nIG9ubHkgdG8gc3BlY2lmaWVkIHVzZXJzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhY2wodXNlcklkLCAuLi5mbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wb3Nlci5vcHRpb25hbCh1c2VySWQsIC4uLmZucyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxsb3dlZCA9IEFycmF5LmlzQXJyYXkodXNlcklkKSA/IHVzZXJJZCA6IFt1c2VySWRdO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLm9wdGlvbmFsKChjdHgpID0+ICFjdHguZnJvbSB8fCBhbGxvd2VkLmluY2x1ZGVzKGN0eC5mcm9tLmlkKSwgLi4uZm5zKTtcbiAgICB9XG4gICAgc3RhdGljIG1lbWJlclN0YXR1cyhzdGF0dXMsIC4uLmZucykge1xuICAgICAgICBjb25zdCBzdGF0dXNlcyA9IEFycmF5LmlzQXJyYXkoc3RhdHVzKSA/IHN0YXR1cyA6IFtzdGF0dXNdO1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIub3B0aW9uYWwoYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eC5tZXNzYWdlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbWVtYmVyID0gYXdhaXQgY3R4LmdldENoYXRNZW1iZXIoY3R4Lm1lc3NhZ2UuZnJvbS5pZCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzZXMuaW5jbHVkZXMobWVtYmVyLnN0YXR1cyk7XG4gICAgICAgIH0sIC4uLmZucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBtaWRkbGV3YXJlIHJlc3BvbmRpbmcgb25seSB0byBjaGF0IGFkbWlucyBhbmQgY2hhdCBjcmVhdG9yLlxuICAgICAqL1xuICAgIHN0YXRpYyBhZG1pbiguLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLm1lbWJlclN0YXR1cyhbJ2FkbWluaXN0cmF0b3InLCAnY3JlYXRvciddLCAuLi5mbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgbWlkZGxld2FyZSByZXNwb25kaW5nIG9ubHkgdG8gY2hhdCBjcmVhdG9yLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdG9yKC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIubWVtYmVyU3RhdHVzKCdjcmVhdG9yJywgLi4uZm5zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIG1pZGRsZXdhcmUgcnVubmluZyBvbmx5IGluIHNwZWNpZmllZCBjaGF0IHR5cGVzLlxuICAgICAqL1xuICAgIHN0YXRpYyBjaGF0VHlwZSh0eXBlLCAuLi5mbnMpIHtcbiAgICAgICAgY29uc3QgdHlwZXMgPSBBcnJheS5pc0FycmF5KHR5cGUpID8gdHlwZSA6IFt0eXBlXTtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLm9wdGlvbmFsKChjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXQgPSBjdHguY2hhdDtcbiAgICAgICAgICAgIHJldHVybiBjaGF0ICE9PSB1bmRlZmluZWQgJiYgdHlwZXMuaW5jbHVkZXMoY2hhdC50eXBlKTtcbiAgICAgICAgfSwgLi4uZm5zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIG1pZGRsZXdhcmUgcnVubmluZyBvbmx5IGluIHByaXZhdGUgY2hhdHMuXG4gICAgICovXG4gICAgc3RhdGljIHByaXZhdGVDaGF0KC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIuY2hhdFR5cGUoJ3ByaXZhdGUnLCAuLi5mbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgbWlkZGxld2FyZSBydW5uaW5nIG9ubHkgaW4gZ3JvdXBzIGFuZCBzdXBlcmdyb3Vwcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ3JvdXBDaGF0KC4uLmZucykge1xuICAgICAgICByZXR1cm4gQ29tcG9zZXIuY2hhdFR5cGUoWydncm91cCcsICdzdXBlcmdyb3VwJ10sIC4uLmZucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBtaWRkbGV3YXJlIGZvciBoYW5kbGluZyBnYW1lIHF1ZXJpZXMuXG4gICAgICovXG4gICAgc3RhdGljIGdhbWVRdWVyeSguLi5mbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2VyLmd1YXJkKCgwLCBmaWx0ZXJzXzEuY2FsbGJhY2tRdWVyeSkoJ2dhbWVfc2hvcnRfbmFtZScpLCAuLi5mbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgdW53cmFwKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhbmRsZXIgaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdtaWRkbGV3YXJlJyBpbiBoYW5kbGVyID8gaGFuZGxlci5taWRkbGV3YXJlKCkgOiBoYW5kbGVyO1xuICAgIH1cbiAgICBzdGF0aWMgY29tcG9zZShtaWRkbGV3YXJlcykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWlkZGxld2FyZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pZGRsZXdhcmVzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlkZGxld2FyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcG9zZXIucGFzc1RocnUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlkZGxld2FyZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBRdWl0ZSBsaXRlcmFsbHkgYXNzZXJ0ZWQgaW4gdGhlIGFib3ZlIGNvbmRpdGlvblxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIHJldHVybiBDb21wb3Nlci51bndyYXAobWlkZGxld2FyZXNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRlKDAsIGN0eCk7XG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBleGVjdXRlKGksIGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaWYgKCEoY29udGV4dCBpbnN0YW5jZW9mIGNvbnRleHRfMS5kZWZhdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25leHQoY3R4KSBjYWxsZWQgd2l0aCBpbnZhbGlkIGNvbnRleHQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPD0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXh0KCkgY2FsbGVkIG11bHRpcGxlIHRpbWVzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gQ29tcG9zZXIudW53cmFwKChfYSA9IG1pZGRsZXdhcmVzW2ldKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXh0KTtcbiAgICAgICAgICAgICAgICBhd2FpdCBoYW5kbGVyKGNvbnRleHQsIGFzeW5jIChjdHggPSBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGV4ZWN1dGUoaSArIDEsIGN0eCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Db21wb3NlciA9IENvbXBvc2VyO1xuLyoqXG4gKiBHZW5lcmF0ZXMgbWlkZGxld2FyZSBmb3IgaGFuZGxpbmcgcHJvdmlkZWQgdXBkYXRlIHR5cGVzLlxuICogQGRlcHJlY2F0ZWQgdXNlIGBDb21wb3Nlci5vbmAgaW5zdGVhZFxuICovXG5Db21wb3Nlci5tb3VudCA9IENvbXBvc2VyLm9uO1xuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHMpIHtcbiAgICAvLyAkJiBtZWFucyB0aGUgd2hvbGUgbWF0Y2hlZCBzdHJpbmdcbiAgICByZXR1cm4gcy5yZXBsYWNlKC9bLiorXFwtP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXNlVHJpZ2dlcnModHJpZ2dlcnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHJpZ2dlcnMpKVxuICAgICAgICB0cmlnZ2VycyA9IFt0cmlnZ2Vyc107XG4gICAgcmV0dXJuIHRyaWdnZXJzLm1hcCgodHJpZ2dlcikgPT4ge1xuICAgICAgICBpZiAoIXRyaWdnZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHJpZ2dlcicpO1xuICAgICAgICBpZiAodHlwZW9mIHRyaWdnZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlcjtcbiAgICAgICAgaWYgKHRyaWdnZXIgaW5zdGFuY2VvZiBSZWdFeHApXG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlID0gJycpID0+IHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2VzY2FwZVJlZ0V4cCh0cmlnZ2VyKX0kYCk7XG4gICAgICAgIHJldHVybiAodmFsdWUpID0+IHJlZ2V4LmV4ZWModmFsdWUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0RW50aXRpZXMobXNnKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAobXNnID09IG51bGwpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBpZiAoJ2NhcHRpb25fZW50aXRpZXMnIGluIG1zZylcbiAgICAgICAgcmV0dXJuIChfYSA9IG1zZy5jYXB0aW9uX2VudGl0aWVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICBpZiAoJ2VudGl0aWVzJyBpbiBtc2cpXG4gICAgICAgIHJldHVybiAoX2IgPSBtc2cuZW50aXRpZXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgIHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIGdldFRleHQobXNnKSB7XG4gICAgaWYgKG1zZyA9PSBudWxsKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmICgnY2FwdGlvbicgaW4gbXNnKVxuICAgICAgICByZXR1cm4gbXNnLmNhcHRpb247XG4gICAgaWYgKCd0ZXh0JyBpbiBtc2cpXG4gICAgICAgIHJldHVybiBtc2cudGV4dDtcbiAgICBpZiAoJ2RhdGEnIGluIG1zZylcbiAgICAgICAgcmV0dXJuIG1zZy5kYXRhO1xuICAgIGlmICgnZ2FtZV9zaG9ydF9uYW1lJyBpbiBtc2cpXG4gICAgICAgIHJldHVybiBtc2cuZ2FtZV9zaG9ydF9uYW1lO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBub3JtYWxpc2VUZXh0QXJndW1lbnRzKGFyZ3VtZW50LCBwcmVmaXggPSAnJykge1xuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5pc0FycmF5KGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogW2FyZ3VtZW50XTtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4gYXJnc1xuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgIC5tYXAoKGFyZykgPT4gcHJlZml4ICYmIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICYmICFhcmcuc3RhcnRzV2l0aChwcmVmaXgpID8gYCR7cHJlZml4fSR7YXJnfWAgOiBhcmcpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9zZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/composer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/context.js":
/*!**********************************************!*\
  !*** ./node_modules/telegraf/lib/context.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Context = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst reactions_1 = __webpack_require__(/*! ./reactions */ \"(rsc)/./node_modules/telegraf/lib/reactions.js\");\nconst debug = (0, debug_1.default)('telegraf:context');\nclass Context {\n    constructor(update, telegram, botInfo) {\n        this.update = update;\n        this.telegram = telegram;\n        this.botInfo = botInfo;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.state = {};\n    }\n    get updateType() {\n        for (const key in this.update) {\n            if (typeof this.update[key] === 'object')\n                return key;\n        }\n        throw new Error(`Cannot determine \\`updateType\\` of ${JSON.stringify(this.update)}`);\n    }\n    get me() {\n        var _a;\n        return (_a = this.botInfo) === null || _a === void 0 ? void 0 : _a.username;\n    }\n    /**\n     * @deprecated Use ctx.telegram instead\n     */\n    get tg() {\n        return this.telegram;\n    }\n    get message() {\n        return this.update.message;\n    }\n    get editedMessage() {\n        return this.update.edited_message;\n    }\n    get inlineQuery() {\n        return this.update.inline_query;\n    }\n    get shippingQuery() {\n        return this.update.shipping_query;\n    }\n    get preCheckoutQuery() {\n        return this.update.pre_checkout_query;\n    }\n    get chosenInlineResult() {\n        return this.update.chosen_inline_result;\n    }\n    get channelPost() {\n        return this.update.channel_post;\n    }\n    get editedChannelPost() {\n        return this.update.edited_channel_post;\n    }\n    get messageReaction() {\n        return this.update.message_reaction;\n    }\n    get messageReactionCount() {\n        return this.update.message_reaction_count;\n    }\n    get callbackQuery() {\n        return this.update.callback_query;\n    }\n    get poll() {\n        return this.update.poll;\n    }\n    get pollAnswer() {\n        return this.update.poll_answer;\n    }\n    get myChatMember() {\n        return this.update.my_chat_member;\n    }\n    get chatMember() {\n        return this.update.chat_member;\n    }\n    get chatJoinRequest() {\n        return this.update.chat_join_request;\n    }\n    get chatBoost() {\n        return this.update.chat_boost;\n    }\n    get removedChatBoost() {\n        return this.update.removed_chat_boost;\n    }\n    /** Shorthand for any `message` object present in the current update. One of\n     * `message`, `edited_message`, `channel_post`, `edited_channel_post` or\n     * `callback_query.message`\n     */\n    get msg() {\n        return getMessageFromAnySource(this);\n    }\n    /** Shorthand for any message_id present in the current update. */\n    get msgId() {\n        return getMsgIdFromAnySource(this);\n    }\n    get chat() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        return (_g = ((_f = (_e = (_d = (_c = (_b = (_a = this.msg) !== null && _a !== void 0 ? _a : this.messageReaction) !== null && _b !== void 0 ? _b : this.messageReactionCount) !== null && _c !== void 0 ? _c : this.chatJoinRequest) !== null && _d !== void 0 ? _d : this.chatMember) !== null && _e !== void 0 ? _e : this.myChatMember) !== null && _f !== void 0 ? _f : this.removedChatBoost)) === null || _g === void 0 ? void 0 : _g.chat;\n    }\n    get senderChat() {\n        const msg = this.msg;\n        return ((msg === null || msg === void 0 ? void 0 : msg.has('sender_chat')) && msg.sender_chat);\n    }\n    get from() {\n        return getUserFromAnySource(this);\n    }\n    get inlineMessageId() {\n        var _a, _b;\n        return (_b = ((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.chosenInlineResult)) === null || _b === void 0 ? void 0 : _b.inline_message_id;\n    }\n    get passportData() {\n        var _a;\n        if (this.message == null)\n            return undefined;\n        if (!('passport_data' in this.message))\n            return undefined;\n        return (_a = this.message) === null || _a === void 0 ? void 0 : _a.passport_data;\n    }\n    get webAppData() {\n        if (!(this.message && 'web_app_data' in this.message))\n            return undefined;\n        const { data, button_text } = this.message.web_app_data;\n        return {\n            data: {\n                json() {\n                    return JSON.parse(data);\n                },\n                text() {\n                    return data;\n                },\n            },\n            button_text,\n        };\n    }\n    /**\n     * @deprecated use {@link Telegram.webhookReply}\n     */\n    get webhookReply() {\n        return this.telegram.webhookReply;\n    }\n    set webhookReply(enable) {\n        this.telegram.webhookReply = enable;\n    }\n    get reactions() {\n        return reactions_1.MessageReactions.from(this);\n    }\n    /**\n     * @internal\n     */\n    assert(value, method) {\n        if (value === undefined) {\n            throw new TypeError(`Telegraf: \"${method}\" isn't available for \"${this.updateType}\"`);\n        }\n    }\n    has(filters) {\n        if (!Array.isArray(filters))\n            filters = [filters];\n        for (const filter of filters)\n            if (\n            // TODO: this should change to === 'function' once TS bug is fixed\n            // https://github.com/microsoft/TypeScript/pull/51502\n            typeof filter !== 'string'\n                ? // filter is a type guard\n                    filter(this.update)\n                : // check if filter is the update type\n                    filter in this.update)\n                return true;\n        return false;\n    }\n    get text() {\n        return getTextAndEntitiesFromAnySource(this)[0];\n    }\n    entities(...types) {\n        const [text = '', entities = []] = getTextAndEntitiesFromAnySource(this);\n        return (types.length\n            ? entities.filter((entity) => types.includes(entity.type))\n            : entities).map((entity) => ({\n            ...entity,\n            fragment: text.slice(entity.offset, entity.offset + entity.length),\n        }));\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n    answerInlineQuery(...args) {\n        this.assert(this.inlineQuery, 'answerInlineQuery');\n        return this.telegram.answerInlineQuery(this.inlineQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n    answerCbQuery(...args) {\n        this.assert(this.callbackQuery, 'answerCbQuery');\n        return this.telegram.answerCbQuery(this.callbackQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n    answerGameQuery(...args) {\n        this.assert(this.callbackQuery, 'answerGameQuery');\n        return this.telegram.answerGameQuery(this.callbackQuery.id, ...args);\n    }\n    /**\n     * Shorthand for {@link Telegram.getUserChatBoosts}\n     */\n    getUserChatBoosts() {\n        this.assert(this.chat, 'getUserChatBoosts');\n        this.assert(this.from, 'getUserChatBoosts');\n        return this.telegram.getUserChatBoosts(this.chat.id, this.from.id);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answershippingquery\n     */\n    answerShippingQuery(...args) {\n        this.assert(this.shippingQuery, 'answerShippingQuery');\n        return this.telegram.answerShippingQuery(this.shippingQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n     */\n    answerPreCheckoutQuery(...args) {\n        this.assert(this.preCheckoutQuery, 'answerPreCheckoutQuery');\n        return this.telegram.answerPreCheckoutQuery(this.preCheckoutQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n    editMessageText(text, extra) {\n        var _a, _b;\n        this.assert((_a = this.msgId) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageText');\n        return this.telegram.editMessageText((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, this.msgId, this.inlineMessageId, text, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n    editMessageCaption(caption, extra) {\n        var _a, _b;\n        this.assert((_a = this.msgId) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageCaption');\n        return this.telegram.editMessageCaption((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, this.msgId, this.inlineMessageId, caption, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagemedia\n     */\n    editMessageMedia(media, extra) {\n        var _a, _b;\n        this.assert((_a = this.msgId) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageMedia');\n        return this.telegram.editMessageMedia((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, this.msgId, this.inlineMessageId, media, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagereplymarkup\n     */\n    editMessageReplyMarkup(markup) {\n        var _a, _b;\n        this.assert((_a = this.msgId) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageReplyMarkup');\n        return this.telegram.editMessageReplyMarkup((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, this.msgId, this.inlineMessageId, markup);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagelivelocation\n     */\n    editMessageLiveLocation(latitude, longitude, extra) {\n        var _a, _b;\n        this.assert((_a = this.msgId) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageLiveLocation');\n        return this.telegram.editMessageLiveLocation((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, this.msgId, this.inlineMessageId, latitude, longitude, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n     */\n    stopMessageLiveLocation(markup) {\n        var _a, _b;\n        this.assert((_a = this.msgId) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'stopMessageLiveLocation');\n        return this.telegram.stopMessageLiveLocation((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, this.msgId, this.inlineMessageId, markup);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    sendMessage(text, extra) {\n        this.assert(this.chat, 'sendMessage');\n        return this.telegram.sendMessage(this.chat.id, text, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    reply(...args) {\n        return this.sendMessage(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n    getChat(...args) {\n        this.assert(this.chat, 'getChat');\n        return this.telegram.getChat(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#exportchatinvitelink\n     */\n    exportChatInviteLink(...args) {\n        this.assert(this.chat, 'exportChatInviteLink');\n        return this.telegram.exportChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#createchatinvitelink\n     */\n    createChatInviteLink(...args) {\n        this.assert(this.chat, 'createChatInviteLink');\n        return this.telegram.createChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editchatinvitelink\n     */\n    editChatInviteLink(...args) {\n        this.assert(this.chat, 'editChatInviteLink');\n        return this.telegram.editChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#revokechatinvitelink\n     */\n    revokeChatInviteLink(...args) {\n        this.assert(this.chat, 'revokeChatInviteLink');\n        return this.telegram.revokeChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#banchatmember\n     */\n    banChatMember(...args) {\n        this.assert(this.chat, 'banChatMember');\n        return this.telegram.banChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#banchatmember\n     * @deprecated since API 5.3. Use {@link Context.banChatMember}\n     */\n    get kickChatMember() {\n        return this.banChatMember;\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unbanchatmember\n     */\n    unbanChatMember(...args) {\n        this.assert(this.chat, 'unbanChatMember');\n        return this.telegram.unbanChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#restrictchatmember\n     */\n    restrictChatMember(...args) {\n        this.assert(this.chat, 'restrictChatMember');\n        return this.telegram.restrictChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#promotechatmember\n     */\n    promoteChatMember(...args) {\n        this.assert(this.chat, 'promoteChatMember');\n        return this.telegram.promoteChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n     */\n    setChatAdministratorCustomTitle(...args) {\n        this.assert(this.chat, 'setChatAdministratorCustomTitle');\n        return this.telegram.setChatAdministratorCustomTitle(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatphoto\n     */\n    setChatPhoto(...args) {\n        this.assert(this.chat, 'setChatPhoto');\n        return this.telegram.setChatPhoto(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#deletechatphoto\n     */\n    deleteChatPhoto(...args) {\n        this.assert(this.chat, 'deleteChatPhoto');\n        return this.telegram.deleteChatPhoto(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchattitle\n     */\n    setChatTitle(...args) {\n        this.assert(this.chat, 'setChatTitle');\n        return this.telegram.setChatTitle(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatdescription\n     */\n    setChatDescription(...args) {\n        this.assert(this.chat, 'setChatDescription');\n        return this.telegram.setChatDescription(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#pinchatmessage\n     */\n    pinChatMessage(...args) {\n        this.assert(this.chat, 'pinChatMessage');\n        return this.telegram.pinChatMessage(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unpinchatmessage\n     */\n    unpinChatMessage(...args) {\n        this.assert(this.chat, 'unpinChatMessage');\n        return this.telegram.unpinChatMessage(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unpinallchatmessages\n     */\n    unpinAllChatMessages(...args) {\n        this.assert(this.chat, 'unpinAllChatMessages');\n        return this.telegram.unpinAllChatMessages(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n    leaveChat(...args) {\n        this.assert(this.chat, 'leaveChat');\n        return this.telegram.leaveChat(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatpermissions\n     */\n    setChatPermissions(...args) {\n        this.assert(this.chat, 'setChatPermissions');\n        return this.telegram.setChatPermissions(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n    getChatAdministrators(...args) {\n        this.assert(this.chat, 'getChatAdministrators');\n        return this.telegram.getChatAdministrators(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n    getChatMember(...args) {\n        this.assert(this.chat, 'getChatMember');\n        return this.telegram.getChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchatmembercount\n     */\n    getChatMembersCount(...args) {\n        this.assert(this.chat, 'getChatMembersCount');\n        return this.telegram.getChatMembersCount(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setpassportdataerrors\n     */\n    setPassportDataErrors(errors) {\n        this.assert(this.from, 'setPassportDataErrors');\n        return this.telegram.setPassportDataErrors(this.from.id, errors);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendphoto\n     */\n    sendPhoto(photo, extra) {\n        this.assert(this.chat, 'sendPhoto');\n        return this.telegram.sendPhoto(this.chat.id, photo, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendphoto\n     */\n    replyWithPhoto(...args) {\n        return this.sendPhoto(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     */\n    sendMediaGroup(media, extra) {\n        this.assert(this.chat, 'sendMediaGroup');\n        return this.telegram.sendMediaGroup(this.chat.id, media, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     */\n    replyWithMediaGroup(...args) {\n        return this.sendMediaGroup(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendaudio\n     */\n    sendAudio(audio, extra) {\n        this.assert(this.chat, 'sendAudio');\n        return this.telegram.sendAudio(this.chat.id, audio, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendaudio\n     */\n    replyWithAudio(...args) {\n        return this.sendAudio(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n    sendDice(extra) {\n        this.assert(this.chat, 'sendDice');\n        return this.telegram.sendDice(this.chat.id, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n    replyWithDice(...args) {\n        return this.sendDice(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddocument\n     */\n    sendDocument(document, extra) {\n        this.assert(this.chat, 'sendDocument');\n        return this.telegram.sendDocument(this.chat.id, document, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddocument\n     */\n    replyWithDocument(...args) {\n        return this.sendDocument(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n    sendSticker(sticker, extra) {\n        this.assert(this.chat, 'sendSticker');\n        return this.telegram.sendSticker(this.chat.id, sticker, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n    replyWithSticker(...args) {\n        return this.sendSticker(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideo\n     */\n    sendVideo(video, extra) {\n        this.assert(this.chat, 'sendVideo');\n        return this.telegram.sendVideo(this.chat.id, video, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideo\n     */\n    replyWithVideo(...args) {\n        return this.sendVideo(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendanimation\n     */\n    sendAnimation(animation, extra) {\n        this.assert(this.chat, 'sendAnimation');\n        return this.telegram.sendAnimation(this.chat.id, animation, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendanimation\n     */\n    replyWithAnimation(...args) {\n        return this.sendAnimation(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     */\n    sendVideoNote(videoNote, extra) {\n        this.assert(this.chat, 'sendVideoNote');\n        return this.telegram.sendVideoNote(this.chat.id, videoNote, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     */\n    replyWithVideoNote(...args) {\n        return this.sendVideoNote(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n    sendInvoice(invoice, extra) {\n        this.assert(this.chat, 'sendInvoice');\n        return this.telegram.sendInvoice(this.chat.id, invoice, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n    replyWithInvoice(...args) {\n        return this.sendInvoice(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n    sendGame(game, extra) {\n        this.assert(this.chat, 'sendGame');\n        return this.telegram.sendGame(this.chat.id, game, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n    replyWithGame(...args) {\n        return this.sendGame(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvoice\n     */\n    sendVoice(voice, extra) {\n        this.assert(this.chat, 'sendVoice');\n        return this.telegram.sendVoice(this.chat.id, voice, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvoice\n     */\n    replyWithVoice(...args) {\n        return this.sendVoice(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    sendPoll(poll, options, extra) {\n        this.assert(this.chat, 'sendPoll');\n        return this.telegram.sendPoll(this.chat.id, poll, options, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    replyWithPoll(...args) {\n        return this.sendPoll(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    sendQuiz(quiz, options, extra) {\n        this.assert(this.chat, 'sendQuiz');\n        return this.telegram.sendQuiz(this.chat.id, quiz, options, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    replyWithQuiz(...args) {\n        return this.sendQuiz(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#stoppoll\n     */\n    stopPoll(...args) {\n        this.assert(this.chat, 'stopPoll');\n        return this.telegram.stopPoll(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n    sendChatAction(action, extra) {\n        this.assert(this.chat, 'sendChatAction');\n        return this.telegram.sendChatAction(this.chat.id, action, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendchataction\n     *\n     * Sends the sendChatAction request repeatedly, with a delay between requests,\n     * as long as the provided callback function is being processed.\n     *\n     * The sendChatAction errors should be ignored, because the goal is the actual long process completing and performing an action.\n     *\n     * @param action - chat action type.\n     * @param callback - a function to run along with the chat action.\n     * @param extra - extra parameters for sendChatAction.\n     * @param {number} [extra.intervalDuration=8000] - The duration (in milliseconds) between subsequent sendChatAction requests.\n     */\n    async persistentChatAction(action, callback, { intervalDuration, ...extra } = {}) {\n        await this.sendChatAction(action, { ...extra });\n        const timer = setInterval(() => this.sendChatAction(action, { ...extra }).catch((err) => {\n            debug('Ignored error while persisting sendChatAction:', err);\n        }), intervalDuration !== null && intervalDuration !== void 0 ? intervalDuration : 4000);\n        try {\n            await callback();\n        }\n        finally {\n            clearInterval(timer);\n        }\n    }\n    /**\n     * @deprecated use {@link Context.sendChatAction} instead\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n    replyWithChatAction(...args) {\n        return this.sendChatAction(...args);\n    }\n    /**\n     * Shorthand for {@link Telegram.setMessageReaction}\n     * @param reaction An emoji or custom_emoji_id to set as reaction to current message. Leave empty to remove reactions.\n     * @param is_big Pass True to set the reaction with a big animation\n     */\n    react(reaction, is_big) {\n        this.assert(this.chat, 'setMessageReaction');\n        this.assert(this.msgId, 'setMessageReaction');\n        const emojis = reaction\n            ? Array.isArray(reaction)\n                ? reaction\n                : [reaction]\n            : undefined;\n        const reactions = emojis === null || emojis === void 0 ? void 0 : emojis.map((emoji) => typeof emoji === 'string'\n            ? reactions_1.Digit.has(emoji[0])\n                ? { type: 'custom_emoji', custom_emoji_id: emoji }\n                : { type: 'emoji', emoji: emoji }\n            : emoji);\n        return this.telegram.setMessageReaction(this.chat.id, this.msgId, reactions, is_big);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n    sendLocation(latitude, longitude, extra) {\n        this.assert(this.chat, 'sendLocation');\n        return this.telegram.sendLocation(this.chat.id, latitude, longitude, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n    replyWithLocation(...args) {\n        return this.sendLocation(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n    sendVenue(latitude, longitude, title, address, extra) {\n        this.assert(this.chat, 'sendVenue');\n        return this.telegram.sendVenue(this.chat.id, latitude, longitude, title, address, { message_thread_id: getThreadId(this), ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n    replyWithVenue(...args) {\n        return this.sendVenue(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n    sendContact(phoneNumber, firstName, extra) {\n        this.assert(this.chat, 'sendContact');\n        return this.telegram.sendContact(this.chat.id, phoneNumber, firstName, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n    replyWithContact(...args) {\n        return this.sendContact(...args);\n    }\n    /**\n     * @deprecated use {@link Telegram.getStickerSet}\n     * @see https://core.telegram.org/bots/api#getstickerset\n     */\n    getStickerSet(setName) {\n        return this.telegram.getStickerSet(setName);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatstickerset\n     */\n    setChatStickerSet(setName) {\n        this.assert(this.chat, 'setChatStickerSet');\n        return this.telegram.setChatStickerSet(this.chat.id, setName);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#deletechatstickerset\n     */\n    deleteChatStickerSet() {\n        this.assert(this.chat, 'deleteChatStickerSet');\n        return this.telegram.deleteChatStickerSet(this.chat.id);\n    }\n    /**\n     * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this\n     * to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a\n     * ForumTopic object.\n     *\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n    createForumTopic(...args) {\n        this.assert(this.chat, 'createForumTopic');\n        return this.telegram.createForumTopic(this.chat.id, ...args);\n    }\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the\n     * topic. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n    editForumTopic(extra) {\n        var _a;\n        this.assert(this.chat, 'editForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'editForumTopic');\n        return this.telegram.editForumTopic(this.chat.id, this.message.message_thread_id, extra);\n    }\n    /**\n     * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n    closeForumTopic() {\n        var _a;\n        this.assert(this.chat, 'closeForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'closeForumTopic');\n        return this.telegram.closeForumTopic(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n    reopenForumTopic() {\n        var _a;\n        this.assert(this.chat, 'reopenForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'reopenForumTopic');\n        return this.telegram.reopenForumTopic(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an\n     * administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     * Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n    deleteForumTopic() {\n        var _a;\n        this.assert(this.chat, 'deleteForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'deleteForumTopic');\n        return this.telegram.deleteForumTopic(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat\n     * for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n    unpinAllForumTopicMessages() {\n        var _a;\n        this.assert(this.chat, 'unpinAllForumTopicMessages');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'unpinAllForumTopicMessages');\n        return this.telegram.unpinAllForumTopicMessages(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator\n     * in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n     */\n    editGeneralForumTopic(name) {\n        this.assert(this.chat, 'editGeneralForumTopic');\n        return this.telegram.editGeneralForumTopic(this.chat.id, name);\n    }\n    /**\n     * Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n     */\n    closeGeneralForumTopic() {\n        this.assert(this.chat, 'closeGeneralForumTopic');\n        return this.telegram.closeGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically\n     * unhidden if it was hidden. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n     */\n    reopenGeneralForumTopic() {\n        this.assert(this.chat, 'reopenGeneralForumTopic');\n        return this.telegram.reopenGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed\n     * if it was open. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n     */\n    hideGeneralForumTopic() {\n        this.assert(this.chat, 'hideGeneralForumTopic');\n        return this.telegram.hideGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n    unhideGeneralForumTopic() {\n        this.assert(this.chat, 'unhideGeneralForumTopic');\n        return this.telegram.unhideGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator\n     * right in the supergroup.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n     */\n    unpinAllGeneralForumTopicMessages() {\n        this.assert(this.chat, 'unpinAllGeneralForumTopicMessages');\n        return this.telegram.unpinAllGeneralForumTopicMessages(this.chat.id);\n    }\n    /**\n     * @deprecated use {@link Telegram.setStickerPositionInSet}\n     * @see https://core.telegram.org/bots/api#setstickerpositioninset\n     */\n    setStickerPositionInSet(sticker, position) {\n        return this.telegram.setStickerPositionInSet(sticker, position);\n    }\n    /**\n     * @deprecated use {@link Telegram.setStickerSetThumbnail}\n     * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n     */\n    setStickerSetThumb(...args) {\n        return this.telegram.setStickerSetThumbnail(...args);\n    }\n    setStickerSetThumbnail(...args) {\n        return this.telegram.setStickerSetThumbnail(...args);\n    }\n    setStickerMaskPosition(...args) {\n        return this.telegram.setStickerMaskPosition(...args);\n    }\n    setStickerKeywords(...args) {\n        return this.telegram.setStickerKeywords(...args);\n    }\n    setStickerEmojiList(...args) {\n        return this.telegram.setStickerEmojiList(...args);\n    }\n    deleteStickerSet(...args) {\n        return this.telegram.deleteStickerSet(...args);\n    }\n    setStickerSetTitle(...args) {\n        return this.telegram.setStickerSetTitle(...args);\n    }\n    setCustomEmojiStickerSetThumbnail(...args) {\n        return this.telegram.setCustomEmojiStickerSetThumbnail(...args);\n    }\n    /**\n     * @deprecated use {@link Telegram.deleteStickerFromSet}\n     * @see https://core.telegram.org/bots/api#deletestickerfromset\n     */\n    deleteStickerFromSet(sticker) {\n        return this.telegram.deleteStickerFromSet(sticker);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#uploadstickerfile\n     */\n    uploadStickerFile(...args) {\n        this.assert(this.from, 'uploadStickerFile');\n        return this.telegram.uploadStickerFile(this.from.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#createnewstickerset\n     */\n    createNewStickerSet(...args) {\n        this.assert(this.from, 'createNewStickerSet');\n        return this.telegram.createNewStickerSet(this.from.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#addstickertoset\n     */\n    addStickerToSet(...args) {\n        this.assert(this.from, 'addStickerToSet');\n        return this.telegram.addStickerToSet(this.from.id, ...args);\n    }\n    /**\n     * @deprecated use {@link Telegram.getMyCommands}\n     * @see https://core.telegram.org/bots/api#getmycommands\n     */\n    getMyCommands() {\n        return this.telegram.getMyCommands();\n    }\n    /**\n     * @deprecated use {@link Telegram.setMyCommands}\n     * @see https://core.telegram.org/bots/api#setmycommands\n     */\n    setMyCommands(commands) {\n        return this.telegram.setMyCommands(commands);\n    }\n    /**\n     * @deprecated use {@link Context.replyWithMarkdownV2}\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    replyWithMarkdown(markdown, extra) {\n        return this.reply(markdown, { parse_mode: 'Markdown', ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    replyWithMarkdownV2(markdown, extra) {\n        return this.reply(markdown, { parse_mode: 'MarkdownV2', ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    replyWithHTML(html, extra) {\n        return this.reply(html, { parse_mode: 'HTML', ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#deletemessage\n     */\n    deleteMessage(messageId) {\n        this.assert(this.chat, 'deleteMessage');\n        if (typeof messageId !== 'undefined')\n            return this.telegram.deleteMessage(this.chat.id, messageId);\n        this.assert(this.msgId, 'deleteMessage');\n        return this.telegram.deleteMessage(this.chat.id, this.msgId);\n    }\n    /**\n     * Context-aware shorthand for {@link Telegram.deleteMessages}\n     * @param messageIds Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n     */\n    deleteMessages(messageIds) {\n        this.assert(this.chat, 'deleteMessages');\n        return this.telegram.deleteMessages(this.chat.id, messageIds);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#forwardmessage\n     */\n    forwardMessage(chatId, extra) {\n        this.assert(this.chat, 'forwardMessage');\n        this.assert(this.msgId, 'forwardMessage');\n        return this.telegram.forwardMessage(chatId, this.chat.id, this.msgId, extra);\n    }\n    /**\n     * Shorthand for {@link Telegram.forwardMessages}\n     * @see https://core.telegram.org/bots/api#forwardmessages\n     */\n    forwardMessages(chatId, messageIds, extra) {\n        this.assert(this.chat, 'forwardMessages');\n        return this.telegram.forwardMessages(chatId, this.chat.id, messageIds, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#copymessage\n     */\n    copyMessage(chatId, extra) {\n        this.assert(this.chat, 'copyMessage');\n        this.assert(this.msgId, 'copyMessage');\n        return this.telegram.copyMessage(chatId, this.chat.id, this.msgId, extra);\n    }\n    /**\n     * Context-aware shorthand for {@link Telegram.copyMessages}\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageIds Identifiers of 1-100 messages in the chat from_chat_id to copy. The identifiers must be specified in a strictly increasing order.\n     */\n    copyMessages(chatId, messageIds, extra) {\n        var _a;\n        this.assert(this.chat, 'copyMessages');\n        return this.telegram.copyMessages(chatId, (_a = this.chat) === null || _a === void 0 ? void 0 : _a.id, messageIds, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n     */\n    approveChatJoinRequest(userId) {\n        this.assert(this.chat, 'approveChatJoinRequest');\n        return this.telegram.approveChatJoinRequest(this.chat.id, userId);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n     */\n    declineChatJoinRequest(userId) {\n        this.assert(this.chat, 'declineChatJoinRequest');\n        return this.telegram.declineChatJoinRequest(this.chat.id, userId);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#banchatsenderchat\n     */\n    banChatSenderChat(senderChatId) {\n        this.assert(this.chat, 'banChatSenderChat');\n        return this.telegram.banChatSenderChat(this.chat.id, senderChatId);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n     */\n    unbanChatSenderChat(senderChatId) {\n        this.assert(this.chat, 'unbanChatSenderChat');\n        return this.telegram.unbanChatSenderChat(this.chat.id, senderChatId);\n    }\n    /**\n     * Use this method to change the bot's menu button in the current private chat. Returns true on success.\n     * @see https://core.telegram.org/bots/api#setchatmenubutton\n     */\n    setChatMenuButton(menuButton) {\n        this.assert(this.chat, 'setChatMenuButton');\n        return this.telegram.setChatMenuButton({ chatId: this.chat.id, menuButton });\n    }\n    /**\n     * Use this method to get the current value of the bot's menu button in the current private chat. Returns MenuButton on success.\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n    getChatMenuButton() {\n        this.assert(this.chat, 'getChatMenuButton');\n        return this.telegram.getChatMenuButton({ chatId: this.chat.id });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setmydefaultadministratorrights\n     */\n    setMyDefaultAdministratorRights(extra) {\n        return this.telegram.setMyDefaultAdministratorRights(extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n     */\n    getMyDefaultAdministratorRights(extra) {\n        return this.telegram.getMyDefaultAdministratorRights(extra);\n    }\n}\nexports.Context = Context;\nexports[\"default\"] = Context;\nconst Msg = {\n    isAccessible() {\n        return 'date' in this && this.date !== 0;\n    },\n    has(...keys) {\n        return keys.some((key) => \n        // @ts-expect-error TS doesn't understand key\n        this[key] != undefined);\n    },\n};\nfunction getMessageFromAnySource(ctx) {\n    var _a, _b, _c, _d, _e;\n    const msg = (_e = (_d = (_b = (_a = ctx.message) !== null && _a !== void 0 ? _a : ctx.editedMessage) !== null && _b !== void 0 ? _b : (_c = ctx.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) !== null && _d !== void 0 ? _d : ctx.channelPost) !== null && _e !== void 0 ? _e : ctx.editedChannelPost;\n    if (msg)\n        return Object.assign(Object.create(Msg), msg);\n}\nfunction getUserFromAnySource(ctx) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    if (ctx.callbackQuery)\n        return ctx.callbackQuery.from;\n    const msg = ctx.msg;\n    if (msg === null || msg === void 0 ? void 0 : msg.has('from'))\n        return msg.from;\n    return ((_h = (_g = ((_f = (_e = (_d = (_c = (_b = (_a = ctx.inlineQuery) !== null && _a !== void 0 ? _a : ctx.shippingQuery) !== null && _b !== void 0 ? _b : ctx.preCheckoutQuery) !== null && _c !== void 0 ? _c : ctx.chosenInlineResult) !== null && _d !== void 0 ? _d : ctx.chatMember) !== null && _e !== void 0 ? _e : ctx.myChatMember) !== null && _f !== void 0 ? _f : ctx.chatJoinRequest)) === null || _g === void 0 ? void 0 : _g.from) !== null && _h !== void 0 ? _h : (_m = ((_k = (_j = ctx.messageReaction) !== null && _j !== void 0 ? _j : ctx.pollAnswer) !== null && _k !== void 0 ? _k : (_l = ctx.chatBoost) === null || _l === void 0 ? void 0 : _l.boost.source)) === null || _m === void 0 ? void 0 : _m.user);\n}\nfunction getMsgIdFromAnySource(ctx) {\n    var _a, _b;\n    const msg = getMessageFromAnySource(ctx);\n    return (_b = ((_a = msg !== null && msg !== void 0 ? msg : ctx.messageReaction) !== null && _a !== void 0 ? _a : ctx.messageReactionCount)) === null || _b === void 0 ? void 0 : _b.message_id;\n}\nfunction getTextAndEntitiesFromAnySource(ctx) {\n    const msg = ctx.msg;\n    let text, entities;\n    if (msg) {\n        if ('text' in msg)\n            (text = msg.text), (entities = msg.entities);\n        else if ('caption' in msg)\n            (text = msg.caption), (entities = msg.caption_entities);\n        else if ('game' in msg)\n            (text = msg.game.text), (entities = msg.game.text_entities);\n    }\n    else if (ctx.poll)\n        (text = ctx.poll.explanation), (entities = ctx.poll.explanation_entities);\n    return [text, entities];\n}\nconst getThreadId = (ctx) => {\n    const msg = ctx.msg;\n    return (msg === null || msg === void 0 ? void 0 : msg.isAccessible())\n        ? msg.is_topic_message\n            ? msg.message_thread_id\n            : undefined\n        : undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/helpers/args.js":
/*!********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/args.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.argsParser = void 0;\nconst SINGLE_QUOTE = \"'\";\nconst DOUBLE_QUOTE = '\"';\nfunction argsParser(str, entities = [], entityOffset = 0) {\n    const mentions = {};\n    for (const entity of entities) // extract all text_mentions into an { offset: length } map\n        if (entity.type === 'text_mention' || entity.type === 'text_link')\n            mentions[entity.offset - entityOffset] = entity.length;\n    const args = [];\n    let done = 0;\n    let inside = undefined;\n    let buf = '';\n    function flush(to) {\n        if (done !== to)\n            args.push(buf + str.slice(done, to)), (inside = undefined);\n        buf = '';\n        done = to + 1;\n    }\n    for (let i = 0; i < str.length; i++) {\n        const char = str[i];\n        // quick lookup length of mention starting at i\n        const mention = mentions[i];\n        if (mention) {\n            // if we're inside a quote, eagerly flush existing state\n            flush(i);\n            // this also consumes current index, so decrement\n            done--;\n            // fast forward to end of mention\n            i += mention;\n            flush(i);\n        }\n        else if (char === SINGLE_QUOTE || char === DOUBLE_QUOTE)\n            if (inside)\n                if (inside === char)\n                    flush(i);\n                else\n                    continue;\n            else\n                flush(i), (inside = char);\n        else if (char === ' ')\n            if (inside)\n                continue;\n            else\n                flush(i);\n        else if (char === '\\n')\n            flush(i);\n        else if (char === '\\\\')\n            (buf += str.slice(done, i)), (done = ++i); // skip parsing the next char\n        else\n            continue;\n    }\n    if (done < str.length)\n        flush(str.length);\n    return args;\n}\nexports.argsParser = argsParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy9hcmdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxpQkFBaUI7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9jb3JlL2hlbHBlcnMvYXJncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXJnc1BhcnNlciA9IHZvaWQgMDtcbmNvbnN0IFNJTkdMRV9RVU9URSA9IFwiJ1wiO1xuY29uc3QgRE9VQkxFX1FVT1RFID0gJ1wiJztcbmZ1bmN0aW9uIGFyZ3NQYXJzZXIoc3RyLCBlbnRpdGllcyA9IFtdLCBlbnRpdHlPZmZzZXQgPSAwKSB7XG4gICAgY29uc3QgbWVudGlvbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdGllcykgLy8gZXh0cmFjdCBhbGwgdGV4dF9tZW50aW9ucyBpbnRvIGFuIHsgb2Zmc2V0OiBsZW5ndGggfSBtYXBcbiAgICAgICAgaWYgKGVudGl0eS50eXBlID09PSAndGV4dF9tZW50aW9uJyB8fCBlbnRpdHkudHlwZSA9PT0gJ3RleHRfbGluaycpXG4gICAgICAgICAgICBtZW50aW9uc1tlbnRpdHkub2Zmc2V0IC0gZW50aXR5T2Zmc2V0XSA9IGVudGl0eS5sZW5ndGg7XG4gICAgY29uc3QgYXJncyA9IFtdO1xuICAgIGxldCBkb25lID0gMDtcbiAgICBsZXQgaW5zaWRlID0gdW5kZWZpbmVkO1xuICAgIGxldCBidWYgPSAnJztcbiAgICBmdW5jdGlvbiBmbHVzaCh0bykge1xuICAgICAgICBpZiAoZG9uZSAhPT0gdG8pXG4gICAgICAgICAgICBhcmdzLnB1c2goYnVmICsgc3RyLnNsaWNlKGRvbmUsIHRvKSksIChpbnNpZGUgPSB1bmRlZmluZWQpO1xuICAgICAgICBidWYgPSAnJztcbiAgICAgICAgZG9uZSA9IHRvICsgMTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hhciA9IHN0cltpXTtcbiAgICAgICAgLy8gcXVpY2sgbG9va3VwIGxlbmd0aCBvZiBtZW50aW9uIHN0YXJ0aW5nIGF0IGlcbiAgICAgICAgY29uc3QgbWVudGlvbiA9IG1lbnRpb25zW2ldO1xuICAgICAgICBpZiAobWVudGlvbikge1xuICAgICAgICAgICAgLy8gaWYgd2UncmUgaW5zaWRlIGEgcXVvdGUsIGVhZ2VybHkgZmx1c2ggZXhpc3Rpbmcgc3RhdGVcbiAgICAgICAgICAgIGZsdXNoKGkpO1xuICAgICAgICAgICAgLy8gdGhpcyBhbHNvIGNvbnN1bWVzIGN1cnJlbnQgaW5kZXgsIHNvIGRlY3JlbWVudFxuICAgICAgICAgICAgZG9uZS0tO1xuICAgICAgICAgICAgLy8gZmFzdCBmb3J3YXJkIHRvIGVuZCBvZiBtZW50aW9uXG4gICAgICAgICAgICBpICs9IG1lbnRpb247XG4gICAgICAgICAgICBmbHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFyID09PSBTSU5HTEVfUVVPVEUgfHwgY2hhciA9PT0gRE9VQkxFX1FVT1RFKVxuICAgICAgICAgICAgaWYgKGluc2lkZSlcbiAgICAgICAgICAgICAgICBpZiAoaW5zaWRlID09PSBjaGFyKVxuICAgICAgICAgICAgICAgICAgICBmbHVzaChpKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGZsdXNoKGkpLCAoaW5zaWRlID0gY2hhcik7XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICcgJylcbiAgICAgICAgICAgIGlmIChpbnNpZGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZmx1c2goaSk7XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICdcXG4nKVxuICAgICAgICAgICAgZmx1c2goaSk7XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICdcXFxcJylcbiAgICAgICAgICAgIChidWYgKz0gc3RyLnNsaWNlKGRvbmUsIGkpKSwgKGRvbmUgPSArK2kpOyAvLyBza2lwIHBhcnNpbmcgdGhlIG5leHQgY2hhclxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGRvbmUgPCBzdHIubGVuZ3RoKVxuICAgICAgICBmbHVzaChzdHIubGVuZ3RoKTtcbiAgICByZXR1cm4gYXJncztcbn1cbmV4cG9ydHMuYXJnc1BhcnNlciA9IGFyZ3NQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/helpers/args.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/helpers/check.js":
/*!*********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/check.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.is2D = exports.hasPropType = exports.hasProp = void 0;\n/**\n * Checks if a given object has a property with a given name.\n *\n * Example invocation:\n * ```js\n * let obj = { 'foo': 'bar', 'baz': () => {} }\n * hasProp(obj, 'foo') // true\n * hasProp(obj, 'baz') // true\n * hasProp(obj, 'abc') // false\n * ```\n *\n * @param obj An object to test\n * @param prop The name of the property\n */\nfunction hasProp(obj, prop) {\n    return obj !== undefined && prop in obj;\n}\nexports.hasProp = hasProp;\n/**\n * Checks if a given object has a property with a given name.\n * Furthermore performs a `typeof` check on the property if it exists.\n *\n * Example invocation:\n * ```js\n * let obj = { 'foo': 'bar', 'baz': () => {} }\n * hasPropType(obj, 'foo', 'string') // true\n * hasPropType(obj, 'baz', 'function') // true\n * hasPropType(obj, 'abc', 'number') // false\n * ```\n *\n * @param obj An object to test\n * @param prop The name of the property\n * @param type The type the property is expected to have\n */\nfunction hasPropType(obj, prop, type) {\n    return hasProp(obj, prop) && type === typeof obj[prop];\n}\nexports.hasPropType = hasPropType;\n/**\n * Checks if the supplied array has two dimensions or not.\n *\n * Example invocations:\n * is2D([]) // false\n * is2D([[]]) // true\n * is2D([[], []]) // true\n * is2D([42]) // false\n *\n * @param arr an array with one or two dimensions\n */\nfunction is2D(arr) {\n    return Array.isArray(arr[0]);\n}\nexports.is2D = is2D;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy9jaGVjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLEdBQUcsbUJBQW1CLEdBQUcsZUFBZTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9jb3JlL2hlbHBlcnMvY2hlY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzMkQgPSBleHBvcnRzLmhhc1Byb3BUeXBlID0gZXhwb3J0cy5oYXNQcm9wID0gdm9pZCAwO1xuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBvYmplY3QgaGFzIGEgcHJvcGVydHkgd2l0aCBhIGdpdmVuIG5hbWUuXG4gKlxuICogRXhhbXBsZSBpbnZvY2F0aW9uOlxuICogYGBganNcbiAqIGxldCBvYmogPSB7ICdmb28nOiAnYmFyJywgJ2Jheic6ICgpID0+IHt9IH1cbiAqIGhhc1Byb3Aob2JqLCAnZm9vJykgLy8gdHJ1ZVxuICogaGFzUHJvcChvYmosICdiYXonKSAvLyB0cnVlXG4gKiBoYXNQcm9wKG9iaiwgJ2FiYycpIC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb2JqIEFuIG9iamVjdCB0byB0ZXN0XG4gKiBAcGFyYW0gcHJvcCBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gaGFzUHJvcChvYmosIHByb3ApIHtcbiAgICByZXR1cm4gb2JqICE9PSB1bmRlZmluZWQgJiYgcHJvcCBpbiBvYmo7XG59XG5leHBvcnRzLmhhc1Byb3AgPSBoYXNQcm9wO1xuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBvYmplY3QgaGFzIGEgcHJvcGVydHkgd2l0aCBhIGdpdmVuIG5hbWUuXG4gKiBGdXJ0aGVybW9yZSBwZXJmb3JtcyBhIGB0eXBlb2ZgIGNoZWNrIG9uIHRoZSBwcm9wZXJ0eSBpZiBpdCBleGlzdHMuXG4gKlxuICogRXhhbXBsZSBpbnZvY2F0aW9uOlxuICogYGBganNcbiAqIGxldCBvYmogPSB7ICdmb28nOiAnYmFyJywgJ2Jheic6ICgpID0+IHt9IH1cbiAqIGhhc1Byb3BUeXBlKG9iaiwgJ2ZvbycsICdzdHJpbmcnKSAvLyB0cnVlXG4gKiBoYXNQcm9wVHlwZShvYmosICdiYXonLCAnZnVuY3Rpb24nKSAvLyB0cnVlXG4gKiBoYXNQcm9wVHlwZShvYmosICdhYmMnLCAnbnVtYmVyJykgLy8gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvYmogQW4gb2JqZWN0IHRvIHRlc3RcbiAqIEBwYXJhbSBwcm9wIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgdGhlIHByb3BlcnR5IGlzIGV4cGVjdGVkIHRvIGhhdmVcbiAqL1xuZnVuY3Rpb24gaGFzUHJvcFR5cGUob2JqLCBwcm9wLCB0eXBlKSB7XG4gICAgcmV0dXJuIGhhc1Byb3Aob2JqLCBwcm9wKSAmJiB0eXBlID09PSB0eXBlb2Ygb2JqW3Byb3BdO1xufVxuZXhwb3J0cy5oYXNQcm9wVHlwZSA9IGhhc1Byb3BUeXBlO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHN1cHBsaWVkIGFycmF5IGhhcyB0d28gZGltZW5zaW9ucyBvciBub3QuXG4gKlxuICogRXhhbXBsZSBpbnZvY2F0aW9uczpcbiAqIGlzMkQoW10pIC8vIGZhbHNlXG4gKiBpczJEKFtbXV0pIC8vIHRydWVcbiAqIGlzMkQoW1tdLCBbXV0pIC8vIHRydWVcbiAqIGlzMkQoWzQyXSkgLy8gZmFsc2VcbiAqXG4gKiBAcGFyYW0gYXJyIGFuIGFycmF5IHdpdGggb25lIG9yIHR3byBkaW1lbnNpb25zXG4gKi9cbmZ1bmN0aW9uIGlzMkQoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyWzBdKTtcbn1cbmV4cG9ydHMuaXMyRCA9IGlzMkQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/helpers/check.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/helpers/compact.js":
/*!***********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/compact.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compactOptions = void 0;\nfunction compactOptions(options) {\n    if (!options) {\n        return options;\n    }\n    const compacted = {};\n    for (const key in options)\n        if (\n        // todo(mkr): replace with Object.hasOwn in v5 (Node 16+)\n        Object.prototype.hasOwnProperty.call(options, key) &&\n            options[key] !== undefined)\n            compacted[key] = options[key];\n    return compacted;\n}\nexports.compactOptions = compactOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9jb3JlL2hlbHBlcnMvY29tcGFjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcGFjdE9wdGlvbnMgPSB2b2lkIDA7XG5mdW5jdGlvbiBjb21wYWN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgICBjb25zdCBjb21wYWN0ZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKVxuICAgICAgICBpZiAoXG4gICAgICAgIC8vIHRvZG8obWtyKTogcmVwbGFjZSB3aXRoIE9iamVjdC5oYXNPd24gaW4gdjUgKE5vZGUgMTYrKVxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywga2V5KSAmJlxuICAgICAgICAgICAgb3B0aW9uc1trZXldICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb21wYWN0ZWRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICByZXR1cm4gY29tcGFjdGVkO1xufVxuZXhwb3J0cy5jb21wYWN0T3B0aW9ucyA9IGNvbXBhY3RPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/helpers/compact.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/helpers/deunionize.js":
/*!**************************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/deunionize.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deunionize = void 0;\n/**\n * Expose properties from all union variants.\n * @deprectated\n * @see https://github.com/telegraf/telegraf/issues/1388#issuecomment-791573609\n * @see https://millsp.github.io/ts-toolbelt/modules/union_strict.html\n */\nfunction deunionize(t) {\n    return t;\n}\nexports.deunionize = deunionize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy9kZXVuaW9uaXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtraXJhZS9EZXNrdG9wL0F1cnVtQm90L2Zyb250ZW5kL25vZGVfbW9kdWxlcy90ZWxlZ3JhZi9saWIvY29yZS9oZWxwZXJzL2RldW5pb25pemUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRldW5pb25pemUgPSB2b2lkIDA7XG4vKipcbiAqIEV4cG9zZSBwcm9wZXJ0aWVzIGZyb20gYWxsIHVuaW9uIHZhcmlhbnRzLlxuICogQGRlcHJlY3RhdGVkXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlZ3JhZi90ZWxlZ3JhZi9pc3N1ZXMvMTM4OCNpc3N1ZWNvbW1lbnQtNzkxNTczNjA5XG4gKiBAc2VlIGh0dHBzOi8vbWlsbHNwLmdpdGh1Yi5pby90cy10b29sYmVsdC9tb2R1bGVzL3VuaW9uX3N0cmljdC5odG1sXG4gKi9cbmZ1bmN0aW9uIGRldW5pb25pemUodCkge1xuICAgIHJldHVybiB0O1xufVxuZXhwb3J0cy5kZXVuaW9uaXplID0gZGV1bmlvbml6ZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/helpers/deunionize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/helpers/formatting.js":
/*!**************************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/formatting.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.linkOrMention = exports.createFmt = exports.join = exports.FmtString = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/util.js\");\nclass FmtString {\n    constructor(text, entities) {\n        this.text = text;\n        if (entities) {\n            this.entities = entities;\n            // force parse_mode to undefined if entities are present\n            this.parse_mode = undefined;\n        }\n    }\n    static normalise(content) {\n        if (content instanceof FmtString)\n            return content;\n        return new FmtString(String(content));\n    }\n}\nexports.FmtString = FmtString;\nconst isArray = Array.isArray;\n/** Given a base FmtString and something to append to it, mutates the base */\nconst _add = (base, next) => {\n    var _a;\n    const len = base.text.length;\n    if (next instanceof FmtString) {\n        base.text = `${base.text}${next.text}`;\n        // next.entities could be undefined and condition will fail\n        for (let i = 0; i < (((_a = next.entities) === null || _a === void 0 ? void 0 : _a.length) || 0); i++) {\n            // because of the above condition, next.entities[i] cannot be undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const entity = next.entities[i];\n            // base.entities is ensured by caller\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            base.entities.push({ ...entity, offset: entity.offset + len });\n        }\n    }\n    else\n        base.text = `${base.text}${next}`;\n};\n/**\n * Given an `Iterable<FmtString | string | Any>` and a separator, flattens the list into a single FmtString.\n * Analogous to Array#join -> string, but for FmtString\n */\nconst join = (fragments, separator) => {\n    const result = new FmtString('');\n    // ensure entities array so loop doesn't need to check\n    result.entities = [];\n    const iter = fragments[Symbol.iterator]();\n    let curr = iter.next();\n    while (!curr.done) {\n        _add(result, curr.value);\n        curr = iter.next();\n        if (separator && !curr.done)\n            _add(result, separator);\n    }\n    // set parse_mode: undefined if entities are present\n    if (result.entities.length)\n        result.parse_mode = undefined;\n    // remove entities array if not relevant\n    else\n        delete result.entities;\n    return result;\n};\nexports.join = join;\n/** Internal constructor for all fmt helpers */\nfunction createFmt(kind, opts) {\n    return function fmt(parts, ...items) {\n        var _a;\n        parts = isArray(parts) ? parts : [parts];\n        const result = (0, exports.join)((0, util_1.zip)(parts, items));\n        if (kind) {\n            (_a = result.entities) !== null && _a !== void 0 ? _a : (result.entities = []);\n            result.entities.unshift({\n                type: kind,\n                offset: 0,\n                length: result.text.length,\n                ...opts,\n            });\n            result.parse_mode = undefined;\n        }\n        return result;\n    };\n}\nexports.createFmt = createFmt;\nconst linkOrMention = (content, data) => {\n    const { text, entities = [] } = FmtString.normalise(content);\n    entities.unshift(Object.assign(data, { offset: 0, length: text.length }));\n    return new FmtString(text, entities);\n};\nexports.linkOrMention = linkOrMention;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy9mb3JtYXR0aW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLGlCQUFpQixHQUFHLFlBQVksR0FBRyxpQkFBaUI7QUFDNUUsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsVUFBVSxFQUFFLFVBQVU7QUFDN0M7QUFDQSx3QkFBd0Isa0ZBQWtGO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsd0NBQXdDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixVQUFVLEVBQUUsS0FBSztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEMsMkNBQTJDLGdDQUFnQztBQUMzRTtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy9mb3JtYXR0aW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5saW5rT3JNZW50aW9uID0gZXhwb3J0cy5jcmVhdGVGbXQgPSBleHBvcnRzLmpvaW4gPSBleHBvcnRzLkZtdFN0cmluZyA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jbGFzcyBGbXRTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHRleHQsIGVudGl0aWVzKSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIGlmIChlbnRpdGllcykge1xuICAgICAgICAgICAgdGhpcy5lbnRpdGllcyA9IGVudGl0aWVzO1xuICAgICAgICAgICAgLy8gZm9yY2UgcGFyc2VfbW9kZSB0byB1bmRlZmluZWQgaWYgZW50aXRpZXMgYXJlIHByZXNlbnRcbiAgICAgICAgICAgIHRoaXMucGFyc2VfbW9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgbm9ybWFsaXNlKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBGbXRTdHJpbmcpXG4gICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgcmV0dXJuIG5ldyBGbXRTdHJpbmcoU3RyaW5nKGNvbnRlbnQpKTtcbiAgICB9XG59XG5leHBvcnRzLkZtdFN0cmluZyA9IEZtdFN0cmluZztcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuLyoqIEdpdmVuIGEgYmFzZSBGbXRTdHJpbmcgYW5kIHNvbWV0aGluZyB0byBhcHBlbmQgdG8gaXQsIG11dGF0ZXMgdGhlIGJhc2UgKi9cbmNvbnN0IF9hZGQgPSAoYmFzZSwgbmV4dCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBsZW4gPSBiYXNlLnRleHQubGVuZ3RoO1xuICAgIGlmIChuZXh0IGluc3RhbmNlb2YgRm10U3RyaW5nKSB7XG4gICAgICAgIGJhc2UudGV4dCA9IGAke2Jhc2UudGV4dH0ke25leHQudGV4dH1gO1xuICAgICAgICAvLyBuZXh0LmVudGl0aWVzIGNvdWxkIGJlIHVuZGVmaW5lZCBhbmQgY29uZGl0aW9uIHdpbGwgZmFpbFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICgoKF9hID0gbmV4dC5lbnRpdGllcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgfHwgMCk7IGkrKykge1xuICAgICAgICAgICAgLy8gYmVjYXVzZSBvZiB0aGUgYWJvdmUgY29uZGl0aW9uLCBuZXh0LmVudGl0aWVzW2ldIGNhbm5vdCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXh0LmVudGl0aWVzW2ldO1xuICAgICAgICAgICAgLy8gYmFzZS5lbnRpdGllcyBpcyBlbnN1cmVkIGJ5IGNhbGxlclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGJhc2UuZW50aXRpZXMucHVzaCh7IC4uLmVudGl0eSwgb2Zmc2V0OiBlbnRpdHkub2Zmc2V0ICsgbGVuIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgYmFzZS50ZXh0ID0gYCR7YmFzZS50ZXh0fSR7bmV4dH1gO1xufTtcbi8qKlxuICogR2l2ZW4gYW4gYEl0ZXJhYmxlPEZtdFN0cmluZyB8IHN0cmluZyB8IEFueT5gIGFuZCBhIHNlcGFyYXRvciwgZmxhdHRlbnMgdGhlIGxpc3QgaW50byBhIHNpbmdsZSBGbXRTdHJpbmcuXG4gKiBBbmFsb2dvdXMgdG8gQXJyYXkjam9pbiAtPiBzdHJpbmcsIGJ1dCBmb3IgRm10U3RyaW5nXG4gKi9cbmNvbnN0IGpvaW4gPSAoZnJhZ21lbnRzLCBzZXBhcmF0b3IpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgRm10U3RyaW5nKCcnKTtcbiAgICAvLyBlbnN1cmUgZW50aXRpZXMgYXJyYXkgc28gbG9vcCBkb2Vzbid0IG5lZWQgdG8gY2hlY2tcbiAgICByZXN1bHQuZW50aXRpZXMgPSBbXTtcbiAgICBjb25zdCBpdGVyID0gZnJhZ21lbnRzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBsZXQgY3VyciA9IGl0ZXIubmV4dCgpO1xuICAgIHdoaWxlICghY3Vyci5kb25lKSB7XG4gICAgICAgIF9hZGQocmVzdWx0LCBjdXJyLnZhbHVlKTtcbiAgICAgICAgY3VyciA9IGl0ZXIubmV4dCgpO1xuICAgICAgICBpZiAoc2VwYXJhdG9yICYmICFjdXJyLmRvbmUpXG4gICAgICAgICAgICBfYWRkKHJlc3VsdCwgc2VwYXJhdG9yKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcnNlX21vZGU6IHVuZGVmaW5lZCBpZiBlbnRpdGllcyBhcmUgcHJlc2VudFxuICAgIGlmIChyZXN1bHQuZW50aXRpZXMubGVuZ3RoKVxuICAgICAgICByZXN1bHQucGFyc2VfbW9kZSA9IHVuZGVmaW5lZDtcbiAgICAvLyByZW1vdmUgZW50aXRpZXMgYXJyYXkgaWYgbm90IHJlbGV2YW50XG4gICAgZWxzZVxuICAgICAgICBkZWxldGUgcmVzdWx0LmVudGl0aWVzO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0cy5qb2luID0gam9pbjtcbi8qKiBJbnRlcm5hbCBjb25zdHJ1Y3RvciBmb3IgYWxsIGZtdCBoZWxwZXJzICovXG5mdW5jdGlvbiBjcmVhdGVGbXQoa2luZCwgb3B0cykge1xuICAgIHJldHVybiBmdW5jdGlvbiBmbXQocGFydHMsIC4uLml0ZW1zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcGFydHMgPSBpc0FycmF5KHBhcnRzKSA/IHBhcnRzIDogW3BhcnRzXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKDAsIGV4cG9ydHMuam9pbikoKDAsIHV0aWxfMS56aXApKHBhcnRzLCBpdGVtcykpO1xuICAgICAgICBpZiAoa2luZCkge1xuICAgICAgICAgICAgKF9hID0gcmVzdWx0LmVudGl0aWVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAocmVzdWx0LmVudGl0aWVzID0gW10pO1xuICAgICAgICAgICAgcmVzdWx0LmVudGl0aWVzLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IGtpbmQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogcmVzdWx0LnRleHQubGVuZ3RoLFxuICAgICAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc3VsdC5wYXJzZV9tb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlRm10ID0gY3JlYXRlRm10O1xuY29uc3QgbGlua09yTWVudGlvbiA9IChjb250ZW50LCBkYXRhKSA9PiB7XG4gICAgY29uc3QgeyB0ZXh0LCBlbnRpdGllcyA9IFtdIH0gPSBGbXRTdHJpbmcubm9ybWFsaXNlKGNvbnRlbnQpO1xuICAgIGVudGl0aWVzLnVuc2hpZnQoT2JqZWN0LmFzc2lnbihkYXRhLCB7IG9mZnNldDogMCwgbGVuZ3RoOiB0ZXh0Lmxlbmd0aCB9KSk7XG4gICAgcmV0dXJuIG5ldyBGbXRTdHJpbmcodGV4dCwgZW50aXRpZXMpO1xufTtcbmV4cG9ydHMubGlua09yTWVudGlvbiA9IGxpbmtPck1lbnRpb247XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/helpers/formatting.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/helpers/util.js":
/*!********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/util.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.indexed = exports.zip = exports.fmtCaption = exports.env = void 0;\nexports.env = process.env;\nfunction fmtCaption(extra) {\n    if (!extra)\n        return;\n    const caption = extra.caption;\n    if (!caption || typeof caption === 'string')\n        return extra;\n    const { text, entities } = caption;\n    return {\n        ...extra,\n        caption: text,\n        ...(entities && {\n            caption_entities: entities,\n            parse_mode: undefined,\n        }),\n    };\n}\nexports.fmtCaption = fmtCaption;\nfunction* zip(xs, ys) {\n    const x = xs[Symbol.iterator]();\n    const y = ys[Symbol.iterator]();\n    let x1 = x.next();\n    let y1 = y.next();\n    while (!x1.done) {\n        yield x1.value;\n        if (!y1.done)\n            yield y1.value;\n        x1 = x.next();\n        y1 = y.next();\n    }\n    while (!y1.done) {\n        yield y1.value;\n        y1 = y.next();\n    }\n}\nexports.zip = zip;\nfunction indexed(target, indexer) {\n    return new Proxy(target, {\n        get: function (target, prop, receiver) {\n            if ((typeof prop === 'string' || typeof prop === 'number') &&\n                !isNaN(+prop))\n                return indexer.call(target, +prop);\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nexports.indexed = indexed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsR0FBRyxXQUFXLEdBQUcsa0JBQWtCLEdBQUcsV0FBVztBQUNoRSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxlQUFlIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvaGVscGVycy91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbmRleGVkID0gZXhwb3J0cy56aXAgPSBleHBvcnRzLmZtdENhcHRpb24gPSBleHBvcnRzLmVudiA9IHZvaWQgMDtcbmV4cG9ydHMuZW52ID0gcHJvY2Vzcy5lbnY7XG5mdW5jdGlvbiBmbXRDYXB0aW9uKGV4dHJhKSB7XG4gICAgaWYgKCFleHRyYSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGNhcHRpb24gPSBleHRyYS5jYXB0aW9uO1xuICAgIGlmICghY2FwdGlvbiB8fCB0eXBlb2YgY2FwdGlvbiA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBleHRyYTtcbiAgICBjb25zdCB7IHRleHQsIGVudGl0aWVzIH0gPSBjYXB0aW9uO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV4dHJhLFxuICAgICAgICBjYXB0aW9uOiB0ZXh0LFxuICAgICAgICAuLi4oZW50aXRpZXMgJiYge1xuICAgICAgICAgICAgY2FwdGlvbl9lbnRpdGllczogZW50aXRpZXMsXG4gICAgICAgICAgICBwYXJzZV9tb2RlOiB1bmRlZmluZWQsXG4gICAgICAgIH0pLFxuICAgIH07XG59XG5leHBvcnRzLmZtdENhcHRpb24gPSBmbXRDYXB0aW9uO1xuZnVuY3Rpb24qIHppcCh4cywgeXMpIHtcbiAgICBjb25zdCB4ID0geHNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGNvbnN0IHkgPSB5c1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgbGV0IHgxID0geC5uZXh0KCk7XG4gICAgbGV0IHkxID0geS5uZXh0KCk7XG4gICAgd2hpbGUgKCF4MS5kb25lKSB7XG4gICAgICAgIHlpZWxkIHgxLnZhbHVlO1xuICAgICAgICBpZiAoIXkxLmRvbmUpXG4gICAgICAgICAgICB5aWVsZCB5MS52YWx1ZTtcbiAgICAgICAgeDEgPSB4Lm5leHQoKTtcbiAgICAgICAgeTEgPSB5Lm5leHQoKTtcbiAgICB9XG4gICAgd2hpbGUgKCF5MS5kb25lKSB7XG4gICAgICAgIHlpZWxkIHkxLnZhbHVlO1xuICAgICAgICB5MSA9IHkubmV4dCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuemlwID0gemlwO1xuZnVuY3Rpb24gaW5kZXhlZCh0YXJnZXQsIGluZGV4ZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcCA9PT0gJ251bWJlcicpICYmXG4gICAgICAgICAgICAgICAgIWlzTmFOKCtwcm9wKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhlci5jYWxsKHRhcmdldCwgK3Byb3ApO1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5pbmRleGVkID0gaW5kZXhlZDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/helpers/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/network/client.js":
/*!**********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/client.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint @typescript-eslint/restrict-template-expressions: [ \"error\", { \"allowNumber\": true, \"allowBoolean\": true } ] */\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst promises_1 = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst https = __importStar(__webpack_require__(/*! https */ \"https\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"));\nconst check_1 = __webpack_require__(/*! ../helpers/check */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/check.js\");\nconst compact_1 = __webpack_require__(/*! ../helpers/compact */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/compact.js\");\nconst multipart_stream_1 = __importDefault(__webpack_require__(/*! ./multipart-stream */ \"(rsc)/./node_modules/telegraf/lib/core/network/multipart-stream.js\"));\nconst error_1 = __importDefault(__webpack_require__(/*! ./error */ \"(rsc)/./node_modules/telegraf/lib/core/network/error.js\"));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('telegraf:client');\nconst { isStream } = multipart_stream_1.default;\nconst WEBHOOK_REPLY_METHOD_ALLOWLIST = new Set([\n    'answerCallbackQuery',\n    'answerInlineQuery',\n    'deleteMessage',\n    'leaveChat',\n    'sendChatAction',\n]);\nconst DEFAULT_EXTENSIONS = {\n    audio: 'mp3',\n    photo: 'jpg',\n    sticker: 'webp',\n    video: 'mp4',\n    animation: 'mp4',\n    video_note: 'mp4',\n    voice: 'ogg',\n};\nconst DEFAULT_OPTIONS = {\n    apiRoot: 'https://api.telegram.org',\n    apiMode: 'bot',\n    webhookReply: true,\n    agent: new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 10000,\n    }),\n    attachmentAgent: undefined,\n    testEnv: false,\n};\nfunction includesMedia(payload) {\n    return Object.entries(payload).some(([key, value]) => {\n        if (key === 'link_preview_options')\n            return false;\n        if (Array.isArray(value)) {\n            return value.some(({ media }) => media && typeof media === 'object' && (media.source || media.url));\n        }\n        return (value &&\n            typeof value === 'object' &&\n            (((0, check_1.hasProp)(value, 'source') && value.source) ||\n                ((0, check_1.hasProp)(value, 'url') && value.url) ||\n                ((0, check_1.hasPropType)(value, 'media', 'object') &&\n                    (((0, check_1.hasProp)(value.media, 'source') && value.media.source) ||\n                        ((0, check_1.hasProp)(value.media, 'url') && value.media.url)))));\n    });\n}\nfunction replacer(_, value) {\n    if (value == null)\n        return undefined;\n    return value;\n}\nfunction buildJSONConfig(payload) {\n    return Promise.resolve({\n        method: 'POST',\n        compress: true,\n        headers: { 'content-type': 'application/json', connection: 'keep-alive' },\n        body: JSON.stringify(payload, replacer),\n    });\n}\nconst FORM_DATA_JSON_FIELDS = [\n    'results',\n    'reply_markup',\n    'mask_position',\n    'shipping_options',\n    'errors',\n];\nasync function buildFormDataConfig(payload, agent) {\n    for (const field of FORM_DATA_JSON_FIELDS) {\n        if ((0, check_1.hasProp)(payload, field) && typeof payload[field] !== 'string') {\n            payload[field] = JSON.stringify(payload[field]);\n        }\n    }\n    const boundary = crypto.randomBytes(32).toString('hex');\n    const formData = new multipart_stream_1.default(boundary);\n    await Promise.all(Object.keys(payload).map((key) => \n    // @ts-expect-error payload[key] can obviously index payload, but TS doesn't trust us\n    attachFormValue(formData, key, payload[key], agent)));\n    return {\n        method: 'POST',\n        compress: true,\n        headers: {\n            'content-type': `multipart/form-data; boundary=${boundary}`,\n            connection: 'keep-alive',\n        },\n        body: formData,\n    };\n}\nasync function attachFormValue(form, id, value, agent) {\n    if (value == null) {\n        return;\n    }\n    if (typeof value === 'string' ||\n        typeof value === 'boolean' ||\n        typeof value === 'number') {\n        form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: `${value}`,\n        });\n        return;\n    }\n    if (id === 'thumb' || id === 'thumbnail') {\n        const attachmentId = crypto.randomBytes(16).toString('hex');\n        await attachFormMedia(form, value, attachmentId, agent);\n        return form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: `attach://${attachmentId}`,\n        });\n    }\n    if (Array.isArray(value)) {\n        const items = await Promise.all(value.map(async (item) => {\n            var _a;\n            if (typeof item.media !== 'object') {\n                return await Promise.resolve(item);\n            }\n            const attachmentId = crypto.randomBytes(16).toString('hex');\n            await attachFormMedia(form, item.media, attachmentId, agent);\n            const thumb = (_a = item.thumb) !== null && _a !== void 0 ? _a : item.thumbnail;\n            if (typeof thumb === 'object') {\n                const thumbAttachmentId = crypto.randomBytes(16).toString('hex');\n                await attachFormMedia(form, thumb, thumbAttachmentId, agent);\n                return {\n                    ...item,\n                    media: `attach://${attachmentId}`,\n                    thumbnail: `attach://${thumbAttachmentId}`,\n                };\n            }\n            return { ...item, media: `attach://${attachmentId}` };\n        }));\n        return form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: JSON.stringify(items),\n        });\n    }\n    if (value &&\n        typeof value === 'object' &&\n        (0, check_1.hasProp)(value, 'media') &&\n        (0, check_1.hasProp)(value, 'type') &&\n        typeof value.media !== 'undefined' &&\n        typeof value.type !== 'undefined') {\n        const attachmentId = crypto.randomBytes(16).toString('hex');\n        await attachFormMedia(form, value.media, attachmentId, agent);\n        return form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: JSON.stringify({\n                ...value,\n                media: `attach://${attachmentId}`,\n            }),\n        });\n    }\n    return await attachFormMedia(form, value, id, agent);\n}\nasync function attachFormMedia(form, media, id, agent) {\n    var _a, _b, _c;\n    let fileName = (_a = media.filename) !== null && _a !== void 0 ? _a : `${id}.${(_b = DEFAULT_EXTENSIONS[id]) !== null && _b !== void 0 ? _b : 'dat'}`;\n    if ('url' in media && media.url !== undefined) {\n        const timeout = 500000; // ms\n        const res = await (0, node_fetch_1.default)(media.url, { agent, timeout });\n        return form.addPart({\n            headers: {\n                'content-disposition': `form-data; name=\"${id}\"; filename=\"${fileName}\"`,\n            },\n            body: res.body,\n        });\n    }\n    if ('source' in media && media.source) {\n        let mediaSource = media.source;\n        if (typeof media.source === 'string') {\n            const source = await (0, promises_1.realpath)(media.source);\n            if ((await (0, promises_1.stat)(source)).isFile()) {\n                fileName = (_c = media.filename) !== null && _c !== void 0 ? _c : path.basename(media.source);\n                mediaSource = await fs.createReadStream(media.source);\n            }\n            else {\n                throw new TypeError(`Unable to upload '${media.source}', not a file`);\n            }\n        }\n        if (isStream(mediaSource) || Buffer.isBuffer(mediaSource)) {\n            form.addPart({\n                headers: {\n                    'content-disposition': `form-data; name=\"${id}\"; filename=\"${fileName}\"`,\n                },\n                body: mediaSource,\n            });\n        }\n    }\n}\nasync function answerToWebhook(response, payload, options) {\n    if (!includesMedia(payload)) {\n        if (!response.headersSent) {\n            response.setHeader('content-type', 'application/json');\n        }\n        response.end(JSON.stringify(payload), 'utf-8');\n        return true;\n    }\n    const { headers, body } = await buildFormDataConfig(payload, options.attachmentAgent);\n    if (!response.headersSent) {\n        for (const [key, value] of Object.entries(headers)) {\n            response.setHeader(key, value);\n        }\n    }\n    await new Promise((resolve) => {\n        response.on('finish', resolve);\n        body.pipe(response);\n    });\n    return true;\n}\nfunction redactToken(error) {\n    error.message = error.message.replace(/\\/(bot|user)(\\d+):[^/]+\\//, '/$1$2:[REDACTED]/');\n    throw error;\n}\nclass ApiClient {\n    constructor(token, options, response) {\n        this.token = token;\n        this.response = response;\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...(0, compact_1.compactOptions)(options),\n        };\n        if (this.options.apiRoot.startsWith('http://')) {\n            this.options.agent = undefined;\n        }\n    }\n    /**\n     * If set to `true`, first _eligible_ call will avoid performing a POST request.\n     * Note that such a call:\n     * 1. cannot report errors or return meaningful values,\n     * 2. resolves before bot API has a chance to process it,\n     * 3. prematurely confirms the update as processed.\n     *\n     * https://core.telegram.org/bots/faq#how-can-i-make-requests-in-response-to-updates\n     * https://github.com/telegraf/telegraf/pull/1250\n     */\n    set webhookReply(enable) {\n        this.options.webhookReply = enable;\n    }\n    get webhookReply() {\n        return this.options.webhookReply;\n    }\n    async callApi(method, payload, { signal } = {}) {\n        const { token, options, response } = this;\n        if (options.webhookReply &&\n            (response === null || response === void 0 ? void 0 : response.writableEnded) === false &&\n            WEBHOOK_REPLY_METHOD_ALLOWLIST.has(method)) {\n            debug('Call via webhook', method, payload);\n            // @ts-expect-error using webhookReply is an optimisation that doesn't respond with normal result\n            // up to the user to deal with this\n            return await answerToWebhook(response, { method, ...payload }, options);\n        }\n        if (!token) {\n            throw new error_1.default({\n                error_code: 401,\n                description: 'Bot Token is required',\n            });\n        }\n        debug('HTTP call', method, payload);\n        const config = includesMedia(payload)\n            ? await buildFormDataConfig({ method, ...payload }, options.attachmentAgent)\n            : await buildJSONConfig(payload);\n        const apiUrl = new url_1.URL(`./${options.apiMode}${token}${options.testEnv ? '/test' : ''}/${method}`, options.apiRoot);\n        config.agent = options.agent;\n        // @ts-expect-error AbortSignal shim is missing some props from Request.AbortSignal\n        config.signal = signal;\n        config.timeout = 500000; // ms\n        const res = await (0, node_fetch_1.default)(apiUrl, config).catch(redactToken);\n        if (res.status >= 500) {\n            const errorPayload = {\n                error_code: res.status,\n                description: res.statusText,\n            };\n            throw new error_1.default(errorPayload, { method, payload });\n        }\n        const data = await res.json();\n        if (!data.ok) {\n            debug('API call failed', data);\n            throw new error_1.default(data, { method, payload });\n        }\n        return data.result;\n    }\n}\nexports[\"default\"] = ApiClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/network/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/network/error.js":
/*!*********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/error.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TelegramError = void 0;\nclass TelegramError extends Error {\n    constructor(response, on = {}) {\n        super(`${response.error_code}: ${response.description}`);\n        this.response = response;\n        this.on = on;\n    }\n    get code() {\n        return this.response.error_code;\n    }\n    get description() {\n        return this.response.description;\n    }\n    get parameters() {\n        return this.response.parameters;\n    }\n}\nexports.TelegramError = TelegramError;\nexports[\"default\"] = TelegramError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvbmV0d29yay9lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQSxpQ0FBaUM7QUFDakMsaUJBQWlCLG9CQUFvQixJQUFJLHFCQUFxQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixrQkFBZSIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9jb3JlL25ldHdvcmsvZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRlbGVncmFtRXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBUZWxlZ3JhbUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlLCBvbiA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGAke3Jlc3BvbnNlLmVycm9yX2NvZGV9OiAke3Jlc3BvbnNlLmRlc2NyaXB0aW9ufWApO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMub24gPSBvbjtcbiAgICB9XG4gICAgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlLmVycm9yX2NvZGU7XG4gICAgfVxuICAgIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2UuZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGdldCBwYXJhbWV0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZS5wYXJhbWV0ZXJzO1xuICAgIH1cbn1cbmV4cG9ydHMuVGVsZWdyYW1FcnJvciA9IFRlbGVncmFtRXJyb3I7XG5leHBvcnRzLmRlZmF1bHQgPSBUZWxlZ3JhbUVycm9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/network/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/network/multipart-stream.js":
/*!********************************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/multipart-stream.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst stream = __importStar(__webpack_require__(/*! stream */ \"stream\"));\nconst check_1 = __webpack_require__(/*! ../helpers/check */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/check.js\");\nconst sandwich_stream_1 = __importDefault(__webpack_require__(/*! sandwich-stream */ \"(rsc)/./node_modules/sandwich-stream/dist/sandwich-stream.mjs\"));\nconst CRNL = '\\r\\n';\nclass MultipartStream extends sandwich_stream_1.default {\n    constructor(boundary) {\n        super({\n            head: `--${boundary}${CRNL}`,\n            tail: `${CRNL}--${boundary}--`,\n            separator: `${CRNL}--${boundary}${CRNL}`,\n        });\n    }\n    addPart(part) {\n        const partStream = new stream.PassThrough();\n        for (const [key, header] of Object.entries(part.headers)) {\n            partStream.write(`${key}:${header}${CRNL}`);\n        }\n        partStream.write(CRNL);\n        if (MultipartStream.isStream(part.body)) {\n            part.body.pipe(partStream);\n        }\n        else {\n            partStream.end(part.body);\n        }\n        this.add(partStream);\n    }\n    static isStream(stream) {\n        return (typeof stream === 'object' &&\n            stream !== null &&\n            (0, check_1.hasPropType)(stream, 'pipe', 'function'));\n    }\n}\nexports[\"default\"] = MultipartStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvbmV0d29yay9tdWx0aXBhcnQtc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixtQkFBTyxDQUFDLHNCQUFRO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLGlGQUFrQjtBQUMxQywwQ0FBMEMsbUJBQU8sQ0FBQyxzRkFBaUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUyxFQUFFLEtBQUs7QUFDdkMscUJBQXFCLEtBQUssSUFBSSxTQUFTO0FBQ3ZDLDBCQUEwQixLQUFLLElBQUksU0FBUyxFQUFFLEtBQUs7QUFDbkQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUksR0FBRyxPQUFPLEVBQUUsS0FBSztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvbmV0d29yay9tdWx0aXBhcnQtc3RyZWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzdHJlYW0gPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInN0cmVhbVwiKSk7XG5jb25zdCBjaGVja18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvY2hlY2tcIik7XG5jb25zdCBzYW5kd2ljaF9zdHJlYW1fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic2FuZHdpY2gtc3RyZWFtXCIpKTtcbmNvbnN0IENSTkwgPSAnXFxyXFxuJztcbmNsYXNzIE11bHRpcGFydFN0cmVhbSBleHRlbmRzIHNhbmR3aWNoX3N0cmVhbV8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGJvdW5kYXJ5KSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGhlYWQ6IGAtLSR7Ym91bmRhcnl9JHtDUk5MfWAsXG4gICAgICAgICAgICB0YWlsOiBgJHtDUk5MfS0tJHtib3VuZGFyeX0tLWAsXG4gICAgICAgICAgICBzZXBhcmF0b3I6IGAke0NSTkx9LS0ke2JvdW5kYXJ5fSR7Q1JOTH1gLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkUGFydChwYXJ0KSB7XG4gICAgICAgIGNvbnN0IHBhcnRTdHJlYW0gPSBuZXcgc3RyZWFtLlBhc3NUaHJvdWdoKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgaGVhZGVyXSBvZiBPYmplY3QuZW50cmllcyhwYXJ0LmhlYWRlcnMpKSB7XG4gICAgICAgICAgICBwYXJ0U3RyZWFtLndyaXRlKGAke2tleX06JHtoZWFkZXJ9JHtDUk5MfWApO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRTdHJlYW0ud3JpdGUoQ1JOTCk7XG4gICAgICAgIGlmIChNdWx0aXBhcnRTdHJlYW0uaXNTdHJlYW0ocGFydC5ib2R5KSkge1xuICAgICAgICAgICAgcGFydC5ib2R5LnBpcGUocGFydFN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJ0U3RyZWFtLmVuZChwYXJ0LmJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkKHBhcnRTdHJlYW0pO1xuICAgIH1cbiAgICBzdGF0aWMgaXNTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIHN0cmVhbSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHN0cmVhbSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgKDAsIGNoZWNrXzEuaGFzUHJvcFR5cGUpKHN0cmVhbSwgJ3BpcGUnLCAnZnVuY3Rpb24nKSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTXVsdGlwYXJ0U3RyZWFtO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/network/multipart-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/network/polling.js":
/*!***********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/polling.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Polling = void 0;\nconst abort_controller_1 = __importDefault(__webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/telegraf/lib/core/network/error.js\");\nconst debug = (0, debug_1.default)('telegraf:polling');\nconst wait = (0, util_1.promisify)(setTimeout);\nfunction always(x) {\n    return () => x;\n}\nconst noop = always(Promise.resolve());\nclass Polling {\n    constructor(telegram, allowedUpdates) {\n        this.telegram = telegram;\n        this.allowedUpdates = allowedUpdates;\n        this.abortController = new abort_controller_1.default();\n        this.skipOffsetSync = false;\n        this.offset = 0;\n    }\n    async *[Symbol.asyncIterator]() {\n        var _a, _b;\n        debug('Starting long polling');\n        do {\n            try {\n                const updates = await this.telegram.callApi('getUpdates', {\n                    timeout: 50,\n                    offset: this.offset,\n                    allowed_updates: this.allowedUpdates,\n                }, this.abortController);\n                const last = updates[updates.length - 1];\n                if (last !== undefined) {\n                    this.offset = last.update_id + 1;\n                }\n                yield updates;\n            }\n            catch (error) {\n                const err = error;\n                if (err.name === 'AbortError')\n                    return;\n                if (err.name === 'FetchError' ||\n                    (err instanceof error_1.TelegramError && err.code === 429) ||\n                    (err instanceof error_1.TelegramError && err.code >= 500)) {\n                    const retryAfter = (_b = (_a = err.parameters) === null || _a === void 0 ? void 0 : _a.retry_after) !== null && _b !== void 0 ? _b : 5;\n                    debug('Failed to fetch updates, retrying after %ds.', retryAfter, err);\n                    await wait(retryAfter * 1000);\n                    continue;\n                }\n                if (err instanceof error_1.TelegramError &&\n                    // Unauthorized      Conflict\n                    (err.code === 401 || err.code === 409)) {\n                    this.skipOffsetSync = true;\n                    throw err;\n                }\n                throw err;\n            }\n        } while (!this.abortController.signal.aborted);\n    }\n    async syncUpdateOffset() {\n        if (this.skipOffsetSync)\n            return;\n        debug('Syncing update offset...');\n        await this.telegram.callApi('getUpdates', { offset: this.offset, limit: 1 });\n    }\n    async loop(handleUpdate) {\n        if (this.abortController.signal.aborted)\n            throw new Error('Polling instances must not be reused!');\n        try {\n            for await (const updates of this)\n                await Promise.all(updates.map(handleUpdate));\n        }\n        finally {\n            debug('Long polling stopped');\n            // prevent instance reuse\n            this.stop();\n            await this.syncUpdateOffset().catch(noop);\n        }\n    }\n    stop() {\n        this.abortController.abort();\n    }\n}\nexports.Polling = Polling;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvbmV0d29yay9wb2xsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLDJDQUEyQyxtQkFBTyxDQUFDLHdGQUFrQjtBQUNyRSxnQ0FBZ0MsbUJBQU8sQ0FBQyxzREFBTztBQUMvQyxlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsK0JBQStCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9jb3JlL25ldHdvcmsvcG9sbGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUG9sbGluZyA9IHZvaWQgMDtcbmNvbnN0IGFib3J0X2NvbnRyb2xsZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYWJvcnQtY29udHJvbGxlclwiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ3RlbGVncmFmOnBvbGxpbmcnKTtcbmNvbnN0IHdhaXQgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoc2V0VGltZW91dCk7XG5mdW5jdGlvbiBhbHdheXMoeCkge1xuICAgIHJldHVybiAoKSA9PiB4O1xufVxuY29uc3Qgbm9vcCA9IGFsd2F5cyhQcm9taXNlLnJlc29sdmUoKSk7XG5jbGFzcyBQb2xsaW5nIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWxlZ3JhbSwgYWxsb3dlZFVwZGF0ZXMpIHtcbiAgICAgICAgdGhpcy50ZWxlZ3JhbSA9IHRlbGVncmFtO1xuICAgICAgICB0aGlzLmFsbG93ZWRVcGRhdGVzID0gYWxsb3dlZFVwZGF0ZXM7XG4gICAgICAgIHRoaXMuYWJvcnRDb250cm9sbGVyID0gbmV3IGFib3J0X2NvbnRyb2xsZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuc2tpcE9mZnNldFN5bmMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgIH1cbiAgICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgZGVidWcoJ1N0YXJ0aW5nIGxvbmcgcG9sbGluZycpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXMgPSBhd2FpdCB0aGlzLnRlbGVncmFtLmNhbGxBcGkoJ2dldFVwZGF0ZXMnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDUwLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkX3VwZGF0ZXM6IHRoaXMuYWxsb3dlZFVwZGF0ZXMsXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5hYm9ydENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB1cGRhdGVzW3VwZGF0ZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IGxhc3QudXBkYXRlX2lkICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQgdXBkYXRlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIGlmIChlcnIubmFtZSA9PT0gJ0Fib3J0RXJyb3InKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKGVyci5uYW1lID09PSAnRmV0Y2hFcnJvcicgfHxcbiAgICAgICAgICAgICAgICAgICAgKGVyciBpbnN0YW5jZW9mIGVycm9yXzEuVGVsZWdyYW1FcnJvciAmJiBlcnIuY29kZSA9PT0gNDI5KSB8fFxuICAgICAgICAgICAgICAgICAgICAoZXJyIGluc3RhbmNlb2YgZXJyb3JfMS5UZWxlZ3JhbUVycm9yICYmIGVyci5jb2RlID49IDUwMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0cnlBZnRlciA9IChfYiA9IChfYSA9IGVyci5wYXJhbWV0ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmV0cnlfYWZ0ZXIpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDU7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKCdGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlcywgcmV0cnlpbmcgYWZ0ZXIgJWRzLicsIHJldHJ5QWZ0ZXIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdhaXQocmV0cnlBZnRlciAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIGVycm9yXzEuVGVsZWdyYW1FcnJvciAmJlxuICAgICAgICAgICAgICAgICAgICAvLyBVbmF1dGhvcml6ZWQgICAgICBDb25mbGljdFxuICAgICAgICAgICAgICAgICAgICAoZXJyLmNvZGUgPT09IDQwMSB8fCBlcnIuY29kZSA9PT0gNDA5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXBPZmZzZXRTeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCF0aGlzLmFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCk7XG4gICAgfVxuICAgIGFzeW5jIHN5bmNVcGRhdGVPZmZzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnNraXBPZmZzZXRTeW5jKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZWJ1ZygnU3luY2luZyB1cGRhdGUgb2Zmc2V0Li4uJyk7XG4gICAgICAgIGF3YWl0IHRoaXMudGVsZWdyYW0uY2FsbEFwaSgnZ2V0VXBkYXRlcycsIHsgb2Zmc2V0OiB0aGlzLm9mZnNldCwgbGltaXQ6IDEgfSk7XG4gICAgfVxuICAgIGFzeW5jIGxvb3AoaGFuZGxlVXBkYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9sbGluZyBpbnN0YW5jZXMgbXVzdCBub3QgYmUgcmV1c2VkIScpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCB1cGRhdGVzIG9mIHRoaXMpXG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodXBkYXRlcy5tYXAoaGFuZGxlVXBkYXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBkZWJ1ZygnTG9uZyBwb2xsaW5nIHN0b3BwZWQnKTtcbiAgICAgICAgICAgIC8vIHByZXZlbnQgaW5zdGFuY2UgcmV1c2VcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jVXBkYXRlT2Zmc2V0KCkuY2F0Y2gobm9vcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB9XG59XG5leHBvcnRzLlBvbGxpbmcgPSBQb2xsaW5nO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/network/polling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/core/network/webhook.js":
/*!***********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/webhook.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:webhook');\nfunction generateWebhook(filter, updateHandler) {\n    return async (req, res, next = () => {\n        res.statusCode = 403;\n        debug('Replying with status code', res.statusCode);\n        res.end();\n    }) => {\n        debug('Incoming request', req.method, req.url);\n        if (!filter(req)) {\n            debug('Webhook filter failed', req.method, req.url);\n            return next();\n        }\n        let update;\n        try {\n            if (req.body != null) {\n                /* If req.body is already set, we expect it to be the parsed\n                 request body (update object) received from Telegram\n                 However, some libraries such as `serverless-http` set req.body to the\n                 raw buffer, so we'll handle that additionally */\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let body = req.body;\n                // if body is Buffer, parse it into string\n                if (body instanceof Buffer)\n                    body = String(req.body);\n                // if body is string, parse it into object\n                if (typeof body === 'string')\n                    body = JSON.parse(body);\n                update = body;\n            }\n            else {\n                let body = '';\n                // parse each buffer to string and append to body\n                for await (const chunk of req)\n                    body += String(chunk);\n                // parse body to object\n                update = JSON.parse(body);\n            }\n        }\n        catch (error) {\n            // if any of the parsing steps fails, give up and respond with error\n            res.writeHead(415).end();\n            debug('Failed to parse request body:', error);\n            return;\n        }\n        return await updateHandler(update, res);\n    };\n}\nexports[\"default\"] = generateWebhook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2NvcmUvbmV0d29yay93ZWJob29rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLG1CQUFPLENBQUMsc0RBQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtraXJhZS9EZXNrdG9wL0F1cnVtQm90L2Zyb250ZW5kL25vZGVfbW9kdWxlcy90ZWxlZ3JhZi9saWIvY29yZS9uZXR3b3JrL3dlYmhvb2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCd0ZWxlZ3JhZjp3ZWJob29rJyk7XG5mdW5jdGlvbiBnZW5lcmF0ZVdlYmhvb2soZmlsdGVyLCB1cGRhdGVIYW5kbGVyKSB7XG4gICAgcmV0dXJuIGFzeW5jIChyZXEsIHJlcywgbmV4dCA9ICgpID0+IHtcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDM7XG4gICAgICAgIGRlYnVnKCdSZXBseWluZyB3aXRoIHN0YXR1cyBjb2RlJywgcmVzLnN0YXR1c0NvZGUpO1xuICAgICAgICByZXMuZW5kKCk7XG4gICAgfSkgPT4ge1xuICAgICAgICBkZWJ1ZygnSW5jb21pbmcgcmVxdWVzdCcsIHJlcS5tZXRob2QsIHJlcS51cmwpO1xuICAgICAgICBpZiAoIWZpbHRlcihyZXEpKSB7XG4gICAgICAgICAgICBkZWJ1ZygnV2ViaG9vayBmaWx0ZXIgZmFpbGVkJywgcmVxLm1ldGhvZCwgcmVxLnVybCk7XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB1cGRhdGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAocmVxLmJvZHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8qIElmIHJlcS5ib2R5IGlzIGFscmVhZHkgc2V0LCB3ZSBleHBlY3QgaXQgdG8gYmUgdGhlIHBhcnNlZFxuICAgICAgICAgICAgICAgICByZXF1ZXN0IGJvZHkgKHVwZGF0ZSBvYmplY3QpIHJlY2VpdmVkIGZyb20gVGVsZWdyYW1cbiAgICAgICAgICAgICAgICAgSG93ZXZlciwgc29tZSBsaWJyYXJpZXMgc3VjaCBhcyBgc2VydmVybGVzcy1odHRwYCBzZXQgcmVxLmJvZHkgdG8gdGhlXG4gICAgICAgICAgICAgICAgIHJhdyBidWZmZXIsIHNvIHdlJ2xsIGhhbmRsZSB0aGF0IGFkZGl0aW9uYWxseSAqL1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgbGV0IGJvZHkgPSByZXEuYm9keTtcbiAgICAgICAgICAgICAgICAvLyBpZiBib2R5IGlzIEJ1ZmZlciwgcGFyc2UgaXQgaW50byBzdHJpbmdcbiAgICAgICAgICAgICAgICBpZiAoYm9keSBpbnN0YW5jZW9mIEJ1ZmZlcilcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IFN0cmluZyhyZXEuYm9keSk7XG4gICAgICAgICAgICAgICAgLy8gaWYgYm9keSBpcyBzdHJpbmcsIHBhcnNlIGl0IGludG8gb2JqZWN0XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlID0gYm9keTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBib2R5ID0gJyc7XG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgZWFjaCBidWZmZXIgdG8gc3RyaW5nIGFuZCBhcHBlbmQgdG8gYm9keVxuICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgcmVxKVxuICAgICAgICAgICAgICAgICAgICBib2R5ICs9IFN0cmluZyhjaHVuayk7XG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgYm9keSB0byBvYmplY3RcbiAgICAgICAgICAgICAgICB1cGRhdGUgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gaWYgYW55IG9mIHRoZSBwYXJzaW5nIHN0ZXBzIGZhaWxzLCBnaXZlIHVwIGFuZCByZXNwb25kIHdpdGggZXJyb3JcbiAgICAgICAgICAgIHJlcy53cml0ZUhlYWQoNDE1KS5lbmQoKTtcbiAgICAgICAgICAgIGRlYnVnKCdGYWlsZWQgdG8gcGFyc2UgcmVxdWVzdCBib2R5OicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdXBkYXRlSGFuZGxlcih1cGRhdGUsIHJlcyk7XG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdlbmVyYXRlV2ViaG9vaztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/core/network/webhook.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/filters.js":
/*!**********************************************!*\
  !*** ./node_modules/telegraf/lib/filters.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.allOf = exports.anyOf = exports.callbackQuery = exports.editedChannelPost = exports.channelPost = exports.editedMessage = exports.message = void 0;\nconst message = (...keys) => (update) => {\n    if (!('message' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.message))\n            return false;\n    }\n    return true;\n};\nexports.message = message;\nconst editedMessage = (...keys) => (update) => {\n    if (!('edited_message' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.edited_message))\n            return false;\n    }\n    return true;\n};\nexports.editedMessage = editedMessage;\nconst channelPost = (...keys) => (update) => {\n    if (!('channel_post' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.channel_post))\n            return false;\n    }\n    return true;\n};\nexports.channelPost = channelPost;\nconst editedChannelPost = (...keys) => (update) => {\n    if (!('edited_channel_post' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.edited_channel_post))\n            return false;\n    }\n    return true;\n};\nexports.editedChannelPost = editedChannelPost;\nconst callbackQuery = (...keys) => (update) => {\n    if (!('callback_query' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.callback_query))\n            return false;\n    }\n    return true;\n};\nexports.callbackQuery = callbackQuery;\n/** Any of the provided filters must match */\nconst anyOf = (...filters) => (update) => {\n    for (const filter of filters)\n        if (filter(update))\n            return true;\n    return false;\n};\nexports.anyOf = anyOf;\n/** All of the provided filters must match */\nconst allOf = (...filters) => (update) => {\n    for (const filter of filters)\n        if (!filter(update))\n            return false;\n    return true;\n};\nexports.allOf = allOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2ZpbHRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLGFBQWEsR0FBRyxxQkFBcUIsR0FBRyx5QkFBeUIsR0FBRyxtQkFBbUIsR0FBRyxxQkFBcUIsR0FBRyxlQUFlO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2ZpbHRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFsbE9mID0gZXhwb3J0cy5hbnlPZiA9IGV4cG9ydHMuY2FsbGJhY2tRdWVyeSA9IGV4cG9ydHMuZWRpdGVkQ2hhbm5lbFBvc3QgPSBleHBvcnRzLmNoYW5uZWxQb3N0ID0gZXhwb3J0cy5lZGl0ZWRNZXNzYWdlID0gZXhwb3J0cy5tZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZSA9ICguLi5rZXlzKSA9PiAodXBkYXRlKSA9PiB7XG4gICAgaWYgKCEoJ21lc3NhZ2UnIGluIHVwZGF0ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUubWVzc2FnZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmV4cG9ydHMubWVzc2FnZSA9IG1lc3NhZ2U7XG5jb25zdCBlZGl0ZWRNZXNzYWdlID0gKC4uLmtleXMpID0+ICh1cGRhdGUpID0+IHtcbiAgICBpZiAoISgnZWRpdGVkX21lc3NhZ2UnIGluIHVwZGF0ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUuZWRpdGVkX21lc3NhZ2UpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5leHBvcnRzLmVkaXRlZE1lc3NhZ2UgPSBlZGl0ZWRNZXNzYWdlO1xuY29uc3QgY2hhbm5lbFBvc3QgPSAoLi4ua2V5cykgPT4gKHVwZGF0ZSkgPT4ge1xuICAgIGlmICghKCdjaGFubmVsX3Bvc3QnIGluIHVwZGF0ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUuY2hhbm5lbF9wb3N0KSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0cy5jaGFubmVsUG9zdCA9IGNoYW5uZWxQb3N0O1xuY29uc3QgZWRpdGVkQ2hhbm5lbFBvc3QgPSAoLi4ua2V5cykgPT4gKHVwZGF0ZSkgPT4ge1xuICAgIGlmICghKCdlZGl0ZWRfY2hhbm5lbF9wb3N0JyBpbiB1cGRhdGUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlLmVkaXRlZF9jaGFubmVsX3Bvc3QpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5leHBvcnRzLmVkaXRlZENoYW5uZWxQb3N0ID0gZWRpdGVkQ2hhbm5lbFBvc3Q7XG5jb25zdCBjYWxsYmFja1F1ZXJ5ID0gKC4uLmtleXMpID0+ICh1cGRhdGUpID0+IHtcbiAgICBpZiAoISgnY2FsbGJhY2tfcXVlcnknIGluIHVwZGF0ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUuY2FsbGJhY2tfcXVlcnkpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5leHBvcnRzLmNhbGxiYWNrUXVlcnkgPSBjYWxsYmFja1F1ZXJ5O1xuLyoqIEFueSBvZiB0aGUgcHJvdmlkZWQgZmlsdGVycyBtdXN0IG1hdGNoICovXG5jb25zdCBhbnlPZiA9ICguLi5maWx0ZXJzKSA9PiAodXBkYXRlKSA9PiB7XG4gICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgZmlsdGVycylcbiAgICAgICAgaWYgKGZpbHRlcih1cGRhdGUpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydHMuYW55T2YgPSBhbnlPZjtcbi8qKiBBbGwgb2YgdGhlIHByb3ZpZGVkIGZpbHRlcnMgbXVzdCBtYXRjaCAqL1xuY29uc3QgYWxsT2YgPSAoLi4uZmlsdGVycykgPT4gKHVwZGF0ZSkgPT4ge1xuICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIGZpbHRlcnMpXG4gICAgICAgIGlmICghZmlsdGVyKHVwZGF0ZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0cy5hbGxPZiA9IGFsbE9mO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/filters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/format.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/format.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mention = exports.link = exports.pre = exports.code = exports.quote = exports.underline = exports.strikethrough = exports.spoiler = exports.italic = exports.bold = exports.fmt = exports.join = exports.FmtString = void 0;\nconst formatting_1 = __webpack_require__(/*! ./core/helpers/formatting */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/formatting.js\");\nObject.defineProperty(exports, \"FmtString\", ({ enumerable: true, get: function () { return formatting_1.FmtString; } }));\n// Nests<A, B> means the function will return A, and it can nest B\n// Nests<'fmt', string> means it will nest anything\n// Nests<'code', never> means it will not nest anything\n// Allowing everything to nest 'fmt' is a necessary evil; it allows to indirectly nest illegal entities\n// Except for 'code' and 'pre', which don't nest anything anyway, so they only deal with strings\nexports.join = formatting_1.join;\nexports.fmt = (0, formatting_1.createFmt)();\nexports.bold = (0, formatting_1.createFmt)('bold');\nexports.italic = (0, formatting_1.createFmt)('italic');\nexports.spoiler = (0, formatting_1.createFmt)('spoiler');\nexports.strikethrough = \n//\n(0, formatting_1.createFmt)('strikethrough');\nexports.underline = \n//\n(0, formatting_1.createFmt)('underline');\nexports.quote = \n//\n(0, formatting_1.createFmt)('blockquote');\nexports.code = (0, formatting_1.createFmt)('code');\nconst pre = (language) => (0, formatting_1.createFmt)('pre', { language });\nexports.pre = pre;\nconst link = (content, url) => \n//\n(0, formatting_1.linkOrMention)(content, { type: 'text_link', url });\nexports.link = link;\nconst mention = (name, user) => typeof user === 'number'\n    ? (0, exports.link)(name, 'tg://user?id=' + user)\n    : (0, formatting_1.linkOrMention)(name, {\n        type: 'text_mention',\n        user,\n    });\nexports.mention = mention;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2Zvcm1hdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLEdBQUcsWUFBWSxHQUFHLFdBQVcsR0FBRyxZQUFZLEdBQUcsYUFBYSxHQUFHLGlCQUFpQixHQUFHLHFCQUFxQixHQUFHLGVBQWUsR0FBRyxjQUFjLEdBQUcsWUFBWSxHQUFHLFdBQVcsR0FBRyxZQUFZLEdBQUcsaUJBQWlCO0FBQzFOLHFCQUFxQixtQkFBTyxDQUFDLCtGQUEyQjtBQUN4RCw2Q0FBNEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDdEg7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0EsWUFBWTtBQUNaLFdBQVc7QUFDWCxZQUFZO0FBQ1osY0FBYztBQUNkLGVBQWU7QUFDZixxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxZQUFZO0FBQ1osK0RBQStELFVBQVU7QUFDekUsV0FBVztBQUNYO0FBQ0E7QUFDQSwyQ0FBMkMsd0JBQXdCO0FBQ25FLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGVBQWUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtraXJhZS9EZXNrdG9wL0F1cnVtQm90L2Zyb250ZW5kL25vZGVfbW9kdWxlcy90ZWxlZ3JhZi9saWIvZm9ybWF0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZW50aW9uID0gZXhwb3J0cy5saW5rID0gZXhwb3J0cy5wcmUgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLnF1b3RlID0gZXhwb3J0cy51bmRlcmxpbmUgPSBleHBvcnRzLnN0cmlrZXRocm91Z2ggPSBleHBvcnRzLnNwb2lsZXIgPSBleHBvcnRzLml0YWxpYyA9IGV4cG9ydHMuYm9sZCA9IGV4cG9ydHMuZm10ID0gZXhwb3J0cy5qb2luID0gZXhwb3J0cy5GbXRTdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBmb3JtYXR0aW5nXzEgPSByZXF1aXJlKFwiLi9jb3JlL2hlbHBlcnMvZm9ybWF0dGluZ1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZtdFN0cmluZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZm9ybWF0dGluZ18xLkZtdFN0cmluZzsgfSB9KTtcbi8vIE5lc3RzPEEsIEI+IG1lYW5zIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBBLCBhbmQgaXQgY2FuIG5lc3QgQlxuLy8gTmVzdHM8J2ZtdCcsIHN0cmluZz4gbWVhbnMgaXQgd2lsbCBuZXN0IGFueXRoaW5nXG4vLyBOZXN0czwnY29kZScsIG5ldmVyPiBtZWFucyBpdCB3aWxsIG5vdCBuZXN0IGFueXRoaW5nXG4vLyBBbGxvd2luZyBldmVyeXRoaW5nIHRvIG5lc3QgJ2ZtdCcgaXMgYSBuZWNlc3NhcnkgZXZpbDsgaXQgYWxsb3dzIHRvIGluZGlyZWN0bHkgbmVzdCBpbGxlZ2FsIGVudGl0aWVzXG4vLyBFeGNlcHQgZm9yICdjb2RlJyBhbmQgJ3ByZScsIHdoaWNoIGRvbid0IG5lc3QgYW55dGhpbmcgYW55d2F5LCBzbyB0aGV5IG9ubHkgZGVhbCB3aXRoIHN0cmluZ3NcbmV4cG9ydHMuam9pbiA9IGZvcm1hdHRpbmdfMS5qb2luO1xuZXhwb3J0cy5mbXQgPSAoMCwgZm9ybWF0dGluZ18xLmNyZWF0ZUZtdCkoKTtcbmV4cG9ydHMuYm9sZCA9ICgwLCBmb3JtYXR0aW5nXzEuY3JlYXRlRm10KSgnYm9sZCcpO1xuZXhwb3J0cy5pdGFsaWMgPSAoMCwgZm9ybWF0dGluZ18xLmNyZWF0ZUZtdCkoJ2l0YWxpYycpO1xuZXhwb3J0cy5zcG9pbGVyID0gKDAsIGZvcm1hdHRpbmdfMS5jcmVhdGVGbXQpKCdzcG9pbGVyJyk7XG5leHBvcnRzLnN0cmlrZXRocm91Z2ggPSBcbi8vXG4oMCwgZm9ybWF0dGluZ18xLmNyZWF0ZUZtdCkoJ3N0cmlrZXRocm91Z2gnKTtcbmV4cG9ydHMudW5kZXJsaW5lID0gXG4vL1xuKDAsIGZvcm1hdHRpbmdfMS5jcmVhdGVGbXQpKCd1bmRlcmxpbmUnKTtcbmV4cG9ydHMucXVvdGUgPSBcbi8vXG4oMCwgZm9ybWF0dGluZ18xLmNyZWF0ZUZtdCkoJ2Jsb2NrcXVvdGUnKTtcbmV4cG9ydHMuY29kZSA9ICgwLCBmb3JtYXR0aW5nXzEuY3JlYXRlRm10KSgnY29kZScpO1xuY29uc3QgcHJlID0gKGxhbmd1YWdlKSA9PiAoMCwgZm9ybWF0dGluZ18xLmNyZWF0ZUZtdCkoJ3ByZScsIHsgbGFuZ3VhZ2UgfSk7XG5leHBvcnRzLnByZSA9IHByZTtcbmNvbnN0IGxpbmsgPSAoY29udGVudCwgdXJsKSA9PiBcbi8vXG4oMCwgZm9ybWF0dGluZ18xLmxpbmtPck1lbnRpb24pKGNvbnRlbnQsIHsgdHlwZTogJ3RleHRfbGluaycsIHVybCB9KTtcbmV4cG9ydHMubGluayA9IGxpbms7XG5jb25zdCBtZW50aW9uID0gKG5hbWUsIHVzZXIpID0+IHR5cGVvZiB1c2VyID09PSAnbnVtYmVyJ1xuICAgID8gKDAsIGV4cG9ydHMubGluaykobmFtZSwgJ3RnOi8vdXNlcj9pZD0nICsgdXNlcilcbiAgICA6ICgwLCBmb3JtYXR0aW5nXzEubGlua09yTWVudGlvbikobmFtZSwge1xuICAgICAgICB0eXBlOiAndGV4dF9tZW50aW9uJyxcbiAgICAgICAgdXNlcixcbiAgICB9KTtcbmV4cG9ydHMubWVudGlvbiA9IG1lbnRpb247XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/telegraf/lib/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Scenes = exports.MemorySessionStore = exports.session = exports.deunionize = exports.Format = exports.Input = exports.Markup = exports.Types = exports.Telegram = exports.TelegramError = exports.Router = exports.Composer = exports.Context = exports.Telegraf = void 0;\nvar telegraf_1 = __webpack_require__(/*! ./telegraf */ \"(rsc)/./node_modules/telegraf/lib/telegraf.js\");\nObject.defineProperty(exports, \"Telegraf\", ({ enumerable: true, get: function () { return telegraf_1.Telegraf; } }));\nvar context_1 = __webpack_require__(/*! ./context */ \"(rsc)/./node_modules/telegraf/lib/context.js\");\nObject.defineProperty(exports, \"Context\", ({ enumerable: true, get: function () { return context_1.Context; } }));\nvar composer_1 = __webpack_require__(/*! ./composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\");\nObject.defineProperty(exports, \"Composer\", ({ enumerable: true, get: function () { return composer_1.Composer; } }));\nvar router_1 = __webpack_require__(/*! ./router */ \"(rsc)/./node_modules/telegraf/lib/router.js\");\nObject.defineProperty(exports, \"Router\", ({ enumerable: true, get: function () { return router_1.Router; } }));\nvar error_1 = __webpack_require__(/*! ./core/network/error */ \"(rsc)/./node_modules/telegraf/lib/core/network/error.js\");\nObject.defineProperty(exports, \"TelegramError\", ({ enumerable: true, get: function () { return error_1.TelegramError; } }));\nvar telegram_1 = __webpack_require__(/*! ./telegram */ \"(rsc)/./node_modules/telegraf/lib/telegram.js\");\nObject.defineProperty(exports, \"Telegram\", ({ enumerable: true, get: function () { return telegram_1.Telegram; } }));\nexports.Types = __importStar(__webpack_require__(/*! ./telegram-types */ \"(rsc)/./node_modules/telegraf/lib/telegram-types.js\"));\nexports.Markup = __importStar(__webpack_require__(/*! ./markup */ \"(rsc)/./node_modules/telegraf/lib/markup.js\"));\nexports.Input = __importStar(__webpack_require__(/*! ./input */ \"(rsc)/./node_modules/telegraf/lib/input.js\"));\nexports.Format = __importStar(__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/telegraf/lib/format.js\"));\nvar deunionize_1 = __webpack_require__(/*! ./core/helpers/deunionize */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/deunionize.js\");\nObject.defineProperty(exports, \"deunionize\", ({ enumerable: true, get: function () { return deunionize_1.deunionize; } }));\nvar session_1 = __webpack_require__(/*! ./session */ \"(rsc)/./node_modules/telegraf/lib/session.js\");\nObject.defineProperty(exports, \"session\", ({ enumerable: true, get: function () { return session_1.session; } }));\nObject.defineProperty(exports, \"MemorySessionStore\", ({ enumerable: true, get: function () { return session_1.MemorySessionStore; } }));\nexports.Scenes = __importStar(__webpack_require__(/*! ./scenes */ \"(rsc)/./node_modules/telegraf/lib/scenes.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsMEJBQTBCLEdBQUcsZUFBZSxHQUFHLGtCQUFrQixHQUFHLGNBQWMsR0FBRyxhQUFhLEdBQUcsY0FBYyxHQUFHLGFBQWEsR0FBRyxnQkFBZ0IsR0FBRyxxQkFBcUIsR0FBRyxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLGdCQUFnQjtBQUN4USxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBWTtBQUNyQyw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbEgsZ0JBQWdCLG1CQUFPLENBQUMsK0RBQVc7QUFDbkMsMkNBQTBDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQy9HLGlCQUFpQixtQkFBTyxDQUFDLGlFQUFZO0FBQ3JDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxlQUFlLG1CQUFPLENBQUMsNkRBQVU7QUFDakMsMENBQXlDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzVHLGNBQWMsbUJBQU8sQ0FBQyxxRkFBc0I7QUFDNUMsaURBQWdELEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3pILGlCQUFpQixtQkFBTyxDQUFDLGlFQUFZO0FBQ3JDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxhQUFhLGdCQUFnQixtQkFBTyxDQUFDLDZFQUFrQjtBQUN2RCxjQUFjLGdCQUFnQixtQkFBTyxDQUFDLDZEQUFVO0FBQ2hELGFBQWEsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVM7QUFDOUMsY0FBYyxnQkFBZ0IsbUJBQU8sQ0FBQyw2REFBVTtBQUNoRCxtQkFBbUIsbUJBQU8sQ0FBQywrRkFBMkI7QUFDdEQsOENBQTZDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3hILGdCQUFnQixtQkFBTyxDQUFDLCtEQUFXO0FBQ25DLDJDQUEwQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUMvRyxzREFBcUQsRUFBRSxxQ0FBcUMsd0NBQXdDLEVBQUM7QUFDckksY0FBYyxnQkFBZ0IsbUJBQU8sQ0FBQyw2REFBVSIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TY2VuZXMgPSBleHBvcnRzLk1lbW9yeVNlc3Npb25TdG9yZSA9IGV4cG9ydHMuc2Vzc2lvbiA9IGV4cG9ydHMuZGV1bmlvbml6ZSA9IGV4cG9ydHMuRm9ybWF0ID0gZXhwb3J0cy5JbnB1dCA9IGV4cG9ydHMuTWFya3VwID0gZXhwb3J0cy5UeXBlcyA9IGV4cG9ydHMuVGVsZWdyYW0gPSBleHBvcnRzLlRlbGVncmFtRXJyb3IgPSBleHBvcnRzLlJvdXRlciA9IGV4cG9ydHMuQ29tcG9zZXIgPSBleHBvcnRzLkNvbnRleHQgPSBleHBvcnRzLlRlbGVncmFmID0gdm9pZCAwO1xudmFyIHRlbGVncmFmXzEgPSByZXF1aXJlKFwiLi90ZWxlZ3JhZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRlbGVncmFmXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0ZWxlZ3JhZl8xLlRlbGVncmFmOyB9IH0pO1xudmFyIGNvbnRleHRfMSA9IHJlcXVpcmUoXCIuL2NvbnRleHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250ZXh0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250ZXh0XzEuQ29udGV4dDsgfSB9KTtcbnZhciBjb21wb3Nlcl8xID0gcmVxdWlyZShcIi4vY29tcG9zZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb21wb3NlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tcG9zZXJfMS5Db21wb3NlcjsgfSB9KTtcbnZhciByb3V0ZXJfMSA9IHJlcXVpcmUoXCIuL3JvdXRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcm91dGVyXzEuUm91dGVyOyB9IH0pO1xudmFyIGVycm9yXzEgPSByZXF1aXJlKFwiLi9jb3JlL25ldHdvcmsvZXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUZWxlZ3JhbUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcl8xLlRlbGVncmFtRXJyb3I7IH0gfSk7XG52YXIgdGVsZWdyYW1fMSA9IHJlcXVpcmUoXCIuL3RlbGVncmFtXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGVsZWdyYW1cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRlbGVncmFtXzEuVGVsZWdyYW07IH0gfSk7XG5leHBvcnRzLlR5cGVzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3RlbGVncmFtLXR5cGVzXCIpKTtcbmV4cG9ydHMuTWFya3VwID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21hcmt1cFwiKSk7XG5leHBvcnRzLklucHV0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2lucHV0XCIpKTtcbmV4cG9ydHMuRm9ybWF0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Zvcm1hdFwiKSk7XG52YXIgZGV1bmlvbml6ZV8xID0gcmVxdWlyZShcIi4vY29yZS9oZWxwZXJzL2RldW5pb25pemVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXVuaW9uaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZXVuaW9uaXplXzEuZGV1bmlvbml6ZTsgfSB9KTtcbnZhciBzZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9zZXNzaW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2Vzc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2Vzc2lvbl8xLnNlc3Npb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZW1vcnlTZXNzaW9uU3RvcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlc3Npb25fMS5NZW1vcnlTZXNzaW9uU3RvcmU7IH0gfSk7XG5leHBvcnRzLlNjZW5lcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9zY2VuZXNcIikpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/input.js":
/*!********************************************!*\
  !*** ./node_modules/telegraf/lib/input.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromFileId = exports.fromURL = exports.fromURLStream = exports.fromReadableStream = exports.fromBuffer = exports.fromLocalFile = void 0;\n/**\n * The local file specified by path will be uploaded to Telegram using multipart/form-data.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromLocalFile = (path, filename) => ({ source: path, filename });\nexports.fromLocalFile = fromLocalFile;\n/**\n * The buffer will be uploaded as file to Telegram using multipart/form-data.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromBuffer = (buffer, filename) => ({ source: buffer, filename });\nexports.fromBuffer = fromBuffer;\n/**\n * Contents of the stream will be uploaded as file to Telegram using multipart/form-data.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromReadableStream = (stream, filename) => ({ source: stream, filename });\nexports.fromReadableStream = fromReadableStream;\n/**\n * Contents of the URL will be streamed to Telegram.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromURLStream = (url, filename) => ({ url: url.toString(), filename });\nexports.fromURLStream = fromURLStream;\n/**\n * Provide Telegram with an HTTP URL for the file to be sent.\n * Telegram will download and send the file.\n *\n * * The target file must have the correct MIME type (e.g., audio/mpeg for `sendAudio`, etc.).\n * * `sendDocument` with URL will currently only work for GIF, PDF and ZIP files.\n * * To use `sendVoice`, the file must have the type audio/ogg and be no more than 1MB in size.\n * 1-20MB voice notes will be sent as files.\n *\n * 5 MB max size for photos and 20 MB max for other types of content.\n */\nconst fromURL = (url) => url.toString();\nexports.fromURL = fromURL;\n/**\n * If the file is already stored somewhere on the Telegram servers, you don't need to reupload it:\n * each file object has a file_id field, simply pass this file_id as a parameter instead of uploading.\n *\n * It is not possible to change the file type when resending by file_id.\n *\n * It is not possible to resend thumbnails using file_id.\n * They have to be uploaded using one of the other Input methods.\n *\n * There are no limits for files sent this way.\n */\nconst fromFileId = (fileId) => fileId;\nexports.fromFileId = fromFileId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL2lucHV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLGVBQWUsR0FBRyxxQkFBcUIsR0FBRywwQkFBMEIsR0FBRyxrQkFBa0IsR0FBRyxxQkFBcUI7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHdCQUF3QjtBQUNyRSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDBCQUEwQjtBQUN0RSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDBCQUEwQjtBQUM5RSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLCtCQUErQjtBQUMzRSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9pbnB1dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUZpbGVJZCA9IGV4cG9ydHMuZnJvbVVSTCA9IGV4cG9ydHMuZnJvbVVSTFN0cmVhbSA9IGV4cG9ydHMuZnJvbVJlYWRhYmxlU3RyZWFtID0gZXhwb3J0cy5mcm9tQnVmZmVyID0gZXhwb3J0cy5mcm9tTG9jYWxGaWxlID0gdm9pZCAwO1xuLyoqXG4gKiBUaGUgbG9jYWwgZmlsZSBzcGVjaWZpZWQgYnkgcGF0aCB3aWxsIGJlIHVwbG9hZGVkIHRvIFRlbGVncmFtIHVzaW5nIG11bHRpcGFydC9mb3JtLWRhdGEuXG4gKlxuICogMTAgTUIgbWF4IHNpemUgZm9yIHBob3RvcywgNTAgTUIgZm9yIG90aGVyIGZpbGVzLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IGZyb21Mb2NhbEZpbGUgPSAocGF0aCwgZmlsZW5hbWUpID0+ICh7IHNvdXJjZTogcGF0aCwgZmlsZW5hbWUgfSk7XG5leHBvcnRzLmZyb21Mb2NhbEZpbGUgPSBmcm9tTG9jYWxGaWxlO1xuLyoqXG4gKiBUaGUgYnVmZmVyIHdpbGwgYmUgdXBsb2FkZWQgYXMgZmlsZSB0byBUZWxlZ3JhbSB1c2luZyBtdWx0aXBhcnQvZm9ybS1kYXRhLlxuICpcbiAqIDEwIE1CIG1heCBzaXplIGZvciBwaG90b3MsIDUwIE1CIGZvciBvdGhlciBmaWxlcy5cbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBmcm9tQnVmZmVyID0gKGJ1ZmZlciwgZmlsZW5hbWUpID0+ICh7IHNvdXJjZTogYnVmZmVyLCBmaWxlbmFtZSB9KTtcbmV4cG9ydHMuZnJvbUJ1ZmZlciA9IGZyb21CdWZmZXI7XG4vKipcbiAqIENvbnRlbnRzIG9mIHRoZSBzdHJlYW0gd2lsbCBiZSB1cGxvYWRlZCBhcyBmaWxlIHRvIFRlbGVncmFtIHVzaW5nIG11bHRpcGFydC9mb3JtLWRhdGEuXG4gKlxuICogMTAgTUIgbWF4IHNpemUgZm9yIHBob3RvcywgNTAgTUIgZm9yIG90aGVyIGZpbGVzLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IGZyb21SZWFkYWJsZVN0cmVhbSA9IChzdHJlYW0sIGZpbGVuYW1lKSA9PiAoeyBzb3VyY2U6IHN0cmVhbSwgZmlsZW5hbWUgfSk7XG5leHBvcnRzLmZyb21SZWFkYWJsZVN0cmVhbSA9IGZyb21SZWFkYWJsZVN0cmVhbTtcbi8qKlxuICogQ29udGVudHMgb2YgdGhlIFVSTCB3aWxsIGJlIHN0cmVhbWVkIHRvIFRlbGVncmFtLlxuICpcbiAqIDEwIE1CIG1heCBzaXplIGZvciBwaG90b3MsIDUwIE1CIGZvciBvdGhlciBmaWxlcy5cbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBmcm9tVVJMU3RyZWFtID0gKHVybCwgZmlsZW5hbWUpID0+ICh7IHVybDogdXJsLnRvU3RyaW5nKCksIGZpbGVuYW1lIH0pO1xuZXhwb3J0cy5mcm9tVVJMU3RyZWFtID0gZnJvbVVSTFN0cmVhbTtcbi8qKlxuICogUHJvdmlkZSBUZWxlZ3JhbSB3aXRoIGFuIEhUVFAgVVJMIGZvciB0aGUgZmlsZSB0byBiZSBzZW50LlxuICogVGVsZWdyYW0gd2lsbCBkb3dubG9hZCBhbmQgc2VuZCB0aGUgZmlsZS5cbiAqXG4gKiAqIFRoZSB0YXJnZXQgZmlsZSBtdXN0IGhhdmUgdGhlIGNvcnJlY3QgTUlNRSB0eXBlIChlLmcuLCBhdWRpby9tcGVnIGZvciBgc2VuZEF1ZGlvYCwgZXRjLikuXG4gKiAqIGBzZW5kRG9jdW1lbnRgIHdpdGggVVJMIHdpbGwgY3VycmVudGx5IG9ubHkgd29yayBmb3IgR0lGLCBQREYgYW5kIFpJUCBmaWxlcy5cbiAqICogVG8gdXNlIGBzZW5kVm9pY2VgLCB0aGUgZmlsZSBtdXN0IGhhdmUgdGhlIHR5cGUgYXVkaW8vb2dnIGFuZCBiZSBubyBtb3JlIHRoYW4gMU1CIGluIHNpemUuXG4gKiAxLTIwTUIgdm9pY2Ugbm90ZXMgd2lsbCBiZSBzZW50IGFzIGZpbGVzLlxuICpcbiAqIDUgTUIgbWF4IHNpemUgZm9yIHBob3RvcyBhbmQgMjAgTUIgbWF4IGZvciBvdGhlciB0eXBlcyBvZiBjb250ZW50LlxuICovXG5jb25zdCBmcm9tVVJMID0gKHVybCkgPT4gdXJsLnRvU3RyaW5nKCk7XG5leHBvcnRzLmZyb21VUkwgPSBmcm9tVVJMO1xuLyoqXG4gKiBJZiB0aGUgZmlsZSBpcyBhbHJlYWR5IHN0b3JlZCBzb21ld2hlcmUgb24gdGhlIFRlbGVncmFtIHNlcnZlcnMsIHlvdSBkb24ndCBuZWVkIHRvIHJldXBsb2FkIGl0OlxuICogZWFjaCBmaWxlIG9iamVjdCBoYXMgYSBmaWxlX2lkIGZpZWxkLCBzaW1wbHkgcGFzcyB0aGlzIGZpbGVfaWQgYXMgYSBwYXJhbWV0ZXIgaW5zdGVhZCBvZiB1cGxvYWRpbmcuXG4gKlxuICogSXQgaXMgbm90IHBvc3NpYmxlIHRvIGNoYW5nZSB0aGUgZmlsZSB0eXBlIHdoZW4gcmVzZW5kaW5nIGJ5IGZpbGVfaWQuXG4gKlxuICogSXQgaXMgbm90IHBvc3NpYmxlIHRvIHJlc2VuZCB0aHVtYm5haWxzIHVzaW5nIGZpbGVfaWQuXG4gKiBUaGV5IGhhdmUgdG8gYmUgdXBsb2FkZWQgdXNpbmcgb25lIG9mIHRoZSBvdGhlciBJbnB1dCBtZXRob2RzLlxuICpcbiAqIFRoZXJlIGFyZSBubyBsaW1pdHMgZm9yIGZpbGVzIHNlbnQgdGhpcyB3YXkuXG4gKi9cbmNvbnN0IGZyb21GaWxlSWQgPSAoZmlsZUlkKSA9PiBmaWxlSWQ7XG5leHBvcnRzLmZyb21GaWxlSWQgPSBmcm9tRmlsZUlkO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/input.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/markup.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/markup.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.inlineKeyboard = exports.keyboard = exports.forceReply = exports.removeKeyboard = exports.button = exports.Markup = void 0;\nconst check_1 = __webpack_require__(/*! ./core/helpers/check */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/check.js\");\nclass Markup {\n    constructor(reply_markup) {\n        this.reply_markup = reply_markup;\n    }\n    selective(value = true) {\n        return new Markup({ ...this.reply_markup, selective: value });\n    }\n    placeholder(placeholder) {\n        return new Markup({\n            ...this.reply_markup,\n            input_field_placeholder: placeholder,\n        });\n    }\n    resize(value = true) {\n        return new Markup({\n            ...this.reply_markup,\n            resize_keyboard: value,\n        });\n    }\n    oneTime(value = true) {\n        return new Markup({\n            ...this.reply_markup,\n            one_time_keyboard: value,\n        });\n    }\n    persistent(value = true) {\n        return new Markup({\n            ...this.reply_markup,\n            is_persistent: value,\n        });\n    }\n}\nexports.Markup = Markup;\nexports.button = __importStar(__webpack_require__(/*! ./button */ \"(rsc)/./node_modules/telegraf/lib/button.js\"));\nfunction removeKeyboard() {\n    return new Markup({ remove_keyboard: true });\n}\nexports.removeKeyboard = removeKeyboard;\nfunction forceReply() {\n    return new Markup({ force_reply: true });\n}\nexports.forceReply = forceReply;\nfunction keyboard(buttons, options) {\n    const keyboard = buildKeyboard(buttons, {\n        columns: 1,\n        ...options,\n    });\n    return new Markup({ keyboard });\n}\nexports.keyboard = keyboard;\nfunction inlineKeyboard(buttons, options) {\n    const inlineKeyboard = buildKeyboard(buttons, {\n        columns: buttons.length,\n        ...options,\n    });\n    return new Markup({ inline_keyboard: inlineKeyboard });\n}\nexports.inlineKeyboard = inlineKeyboard;\nfunction buildKeyboard(buttons, options) {\n    const result = [];\n    if (!Array.isArray(buttons)) {\n        return result;\n    }\n    if ((0, check_1.is2D)(buttons)) {\n        return buttons.map((row) => row.filter((button) => !button.hide));\n    }\n    const wrapFn = options.wrap !== undefined\n        ? options.wrap\n        : (_btn, _index, currentRow) => currentRow.length >= options.columns;\n    let currentRow = [];\n    let index = 0;\n    for (const btn of buttons.filter((button) => !button.hide)) {\n        if (wrapFn(btn, index, currentRow) && currentRow.length > 0) {\n            result.push(currentRow);\n            currentRow = [];\n        }\n        currentRow.push(btn);\n        index++;\n    }\n    if (currentRow.length > 0) {\n        result.push(currentRow);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL21hcmt1cC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsc0JBQXNCLEdBQUcsY0FBYyxHQUFHLGNBQWM7QUFDekgsZ0JBQWdCLG1CQUFPLENBQUMscUZBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0NBQXdDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGNBQWM7QUFDZCxjQUFjLGdCQUFnQixtQkFBTyxDQUFDLDZEQUFVO0FBQ2hEO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0JBQXdCLFVBQVU7QUFDbEM7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0JBQXdCLGlDQUFpQztBQUN6RDtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL21hcmt1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbmxpbmVLZXlib2FyZCA9IGV4cG9ydHMua2V5Ym9hcmQgPSBleHBvcnRzLmZvcmNlUmVwbHkgPSBleHBvcnRzLnJlbW92ZUtleWJvYXJkID0gZXhwb3J0cy5idXR0b24gPSBleHBvcnRzLk1hcmt1cCA9IHZvaWQgMDtcbmNvbnN0IGNoZWNrXzEgPSByZXF1aXJlKFwiLi9jb3JlL2hlbHBlcnMvY2hlY2tcIik7XG5jbGFzcyBNYXJrdXAge1xuICAgIGNvbnN0cnVjdG9yKHJlcGx5X21hcmt1cCkge1xuICAgICAgICB0aGlzLnJlcGx5X21hcmt1cCA9IHJlcGx5X21hcmt1cDtcbiAgICB9XG4gICAgc2VsZWN0aXZlKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcmt1cCh7IC4uLnRoaXMucmVwbHlfbWFya3VwLCBzZWxlY3RpdmU6IHZhbHVlIH0pO1xuICAgIH1cbiAgICBwbGFjZWhvbGRlcihwbGFjZWhvbGRlcikge1xuICAgICAgICByZXR1cm4gbmV3IE1hcmt1cCh7XG4gICAgICAgICAgICAuLi50aGlzLnJlcGx5X21hcmt1cCxcbiAgICAgICAgICAgIGlucHV0X2ZpZWxkX3BsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlc2l6ZSh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXJrdXAoe1xuICAgICAgICAgICAgLi4udGhpcy5yZXBseV9tYXJrdXAsXG4gICAgICAgICAgICByZXNpemVfa2V5Ym9hcmQ6IHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25lVGltZSh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXJrdXAoe1xuICAgICAgICAgICAgLi4udGhpcy5yZXBseV9tYXJrdXAsXG4gICAgICAgICAgICBvbmVfdGltZV9rZXlib2FyZDogdmFsdWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwZXJzaXN0ZW50KHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcmt1cCh7XG4gICAgICAgICAgICAuLi50aGlzLnJlcGx5X21hcmt1cCxcbiAgICAgICAgICAgIGlzX3BlcnNpc3RlbnQ6IHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk1hcmt1cCA9IE1hcmt1cDtcbmV4cG9ydHMuYnV0dG9uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2J1dHRvblwiKSk7XG5mdW5jdGlvbiByZW1vdmVLZXlib2FyZCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcmt1cCh7IHJlbW92ZV9rZXlib2FyZDogdHJ1ZSB9KTtcbn1cbmV4cG9ydHMucmVtb3ZlS2V5Ym9hcmQgPSByZW1vdmVLZXlib2FyZDtcbmZ1bmN0aW9uIGZvcmNlUmVwbHkoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXJrdXAoeyBmb3JjZV9yZXBseTogdHJ1ZSB9KTtcbn1cbmV4cG9ydHMuZm9yY2VSZXBseSA9IGZvcmNlUmVwbHk7XG5mdW5jdGlvbiBrZXlib2FyZChidXR0b25zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qga2V5Ym9hcmQgPSBidWlsZEtleWJvYXJkKGJ1dHRvbnMsIHtcbiAgICAgICAgY29sdW1uczogMSxcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IE1hcmt1cCh7IGtleWJvYXJkIH0pO1xufVxuZXhwb3J0cy5rZXlib2FyZCA9IGtleWJvYXJkO1xuZnVuY3Rpb24gaW5saW5lS2V5Ym9hcmQoYnV0dG9ucywgb3B0aW9ucykge1xuICAgIGNvbnN0IGlubGluZUtleWJvYXJkID0gYnVpbGRLZXlib2FyZChidXR0b25zLCB7XG4gICAgICAgIGNvbHVtbnM6IGJ1dHRvbnMubGVuZ3RoLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgTWFya3VwKHsgaW5saW5lX2tleWJvYXJkOiBpbmxpbmVLZXlib2FyZCB9KTtcbn1cbmV4cG9ydHMuaW5saW5lS2V5Ym9hcmQgPSBpbmxpbmVLZXlib2FyZDtcbmZ1bmN0aW9uIGJ1aWxkS2V5Ym9hcmQoYnV0dG9ucywgb3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShidXR0b25zKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAoKDAsIGNoZWNrXzEuaXMyRCkoYnV0dG9ucykpIHtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbnMubWFwKChyb3cpID0+IHJvdy5maWx0ZXIoKGJ1dHRvbikgPT4gIWJ1dHRvbi5oaWRlKSk7XG4gICAgfVxuICAgIGNvbnN0IHdyYXBGbiA9IG9wdGlvbnMud3JhcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gb3B0aW9ucy53cmFwXG4gICAgICAgIDogKF9idG4sIF9pbmRleCwgY3VycmVudFJvdykgPT4gY3VycmVudFJvdy5sZW5ndGggPj0gb3B0aW9ucy5jb2x1bW5zO1xuICAgIGxldCBjdXJyZW50Um93ID0gW107XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IGJ0biBvZiBidXR0b25zLmZpbHRlcigoYnV0dG9uKSA9PiAhYnV0dG9uLmhpZGUpKSB7XG4gICAgICAgIGlmICh3cmFwRm4oYnRuLCBpbmRleCwgY3VycmVudFJvdykgJiYgY3VycmVudFJvdy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50Um93KTtcbiAgICAgICAgICAgIGN1cnJlbnRSb3cgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Um93LnB1c2goYnRuKTtcbiAgICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRSb3cubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHQucHVzaChjdXJyZW50Um93KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/markup.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/reactions.js":
/*!************************************************!*\
  !*** ./node_modules/telegraf/lib/reactions.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MessageReactions = exports.ReactionList = exports.Digit = void 0;\nconst util_1 = __webpack_require__(/*! ./core/helpers/util */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/util.js\");\nexports.Digit = new Set(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']);\nconst inspectReaction = (reaction) => {\n    if (reaction.type === 'custom_emoji')\n        return `Custom(${reaction.custom_emoji_id})`;\n    else\n        return reaction.emoji;\n};\nclass ReactionList {\n    constructor(list) {\n        this.list = list;\n    }\n    static fromArray(list = []) {\n        return (0, util_1.indexed)(new ReactionList(list), function (index) {\n            return this.list[index];\n        });\n    }\n    static has(reactions, reaction) {\n        if (typeof reaction === 'string')\n            if (exports.Digit.has(reaction[0]))\n                return reactions.some((r) => r.custom_emoji_id === reaction);\n            else\n                return reactions.some((r) => r.emoji === reaction);\n        return reactions.some((r) => {\n            if (r.type === 'custom_emoji')\n                return r.custom_emoji_id === reaction.custom_emoji_id;\n            else if (r.type === 'emoji')\n                return r.emoji === reaction.emoji;\n        });\n    }\n    toArray() {\n        return [...this.list];\n    }\n    filter(filterFn) {\n        return ReactionList.fromArray(this.list.filter(filterFn));\n    }\n    has(reaction) {\n        return ReactionList.has(this.list, reaction);\n    }\n    get count() {\n        return this.list.length;\n    }\n    [Symbol.iterator]() {\n        return this.list[Symbol.iterator]();\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const flattened = this.list.map(inspectReaction).join(', ');\n        return ['ReactionList {', flattened, '}'].join(' ');\n    }\n}\nexports.ReactionList = ReactionList;\nclass MessageReactions extends ReactionList {\n    constructor(ctx) {\n        var _a, _b;\n        super((_b = (_a = ctx.update.message_reaction) === null || _a === void 0 ? void 0 : _a.new_reaction) !== null && _b !== void 0 ? _b : []);\n        this.ctx = ctx;\n    }\n    static from(ctx) {\n        return (0, util_1.indexed)(new MessageReactions(ctx), function (index) {\n            return this.list[index];\n        });\n    }\n    get old() {\n        var _a;\n        return ReactionList.fromArray((_a = this.ctx.update.message_reaction) === null || _a === void 0 ? void 0 : _a.old_reaction);\n    }\n    get new() {\n        var _a;\n        return ReactionList.fromArray((_a = this.ctx.update.message_reaction) === null || _a === void 0 ? void 0 : _a.new_reaction);\n    }\n    get added() {\n        return this.new.filter((reaction) => !this.old.has(reaction));\n    }\n    get removed() {\n        return this.old.filter((reaction) => !this.new.has(reaction));\n    }\n    get kept() {\n        return this.new.filter((reaction) => this.old.has(reaction));\n    }\n}\nexports.MessageReactions = MessageReactions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3JlYWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxhQUFhO0FBQy9ELGVBQWUsbUJBQU8sQ0FBQyxtRkFBcUI7QUFDNUMsYUFBYTtBQUNiO0FBQ0E7QUFDQSx5QkFBeUIseUJBQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZ0JBQWdCO0FBQy9DO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3JlYWN0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWVzc2FnZVJlYWN0aW9ucyA9IGV4cG9ydHMuUmVhY3Rpb25MaXN0ID0gZXhwb3J0cy5EaWdpdCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL2NvcmUvaGVscGVycy91dGlsXCIpO1xuZXhwb3J0cy5EaWdpdCA9IG5ldyBTZXQoWycwJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5J10pO1xuY29uc3QgaW5zcGVjdFJlYWN0aW9uID0gKHJlYWN0aW9uKSA9PiB7XG4gICAgaWYgKHJlYWN0aW9uLnR5cGUgPT09ICdjdXN0b21fZW1vamknKVxuICAgICAgICByZXR1cm4gYEN1c3RvbSgke3JlYWN0aW9uLmN1c3RvbV9lbW9qaV9pZH0pYDtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiByZWFjdGlvbi5lbW9qaTtcbn07XG5jbGFzcyBSZWFjdGlvbkxpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGxpc3QpIHtcbiAgICAgICAgdGhpcy5saXN0ID0gbGlzdDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21BcnJheShsaXN0ID0gW10pIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsXzEuaW5kZXhlZCkobmV3IFJlYWN0aW9uTGlzdChsaXN0KSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0W2luZGV4XTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBoYXMocmVhY3Rpb25zLCByZWFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIHJlYWN0aW9uID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIGlmIChleHBvcnRzLkRpZ2l0LmhhcyhyZWFjdGlvblswXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWN0aW9ucy5zb21lKChyKSA9PiByLmN1c3RvbV9lbW9qaV9pZCA9PT0gcmVhY3Rpb24pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiByZWFjdGlvbnMuc29tZSgocikgPT4gci5lbW9qaSA9PT0gcmVhY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVhY3Rpb25zLnNvbWUoKHIpID0+IHtcbiAgICAgICAgICAgIGlmIChyLnR5cGUgPT09ICdjdXN0b21fZW1vamknKVxuICAgICAgICAgICAgICAgIHJldHVybiByLmN1c3RvbV9lbW9qaV9pZCA9PT0gcmVhY3Rpb24uY3VzdG9tX2Vtb2ppX2lkO1xuICAgICAgICAgICAgZWxzZSBpZiAoci50eXBlID09PSAnZW1vamknKVxuICAgICAgICAgICAgICAgIHJldHVybiByLmVtb2ppID09PSByZWFjdGlvbi5lbW9qaTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5saXN0XTtcbiAgICB9XG4gICAgZmlsdGVyKGZpbHRlckZuKSB7XG4gICAgICAgIHJldHVybiBSZWFjdGlvbkxpc3QuZnJvbUFycmF5KHRoaXMubGlzdC5maWx0ZXIoZmlsdGVyRm4pKTtcbiAgICB9XG4gICAgaGFzKHJlYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBSZWFjdGlvbkxpc3QuaGFzKHRoaXMubGlzdCwgcmVhY3Rpb24pO1xuICAgIH1cbiAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3QubGVuZ3RoO1xuICAgIH1cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgfVxuICAgIFtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSgpIHtcbiAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gdGhpcy5saXN0Lm1hcChpbnNwZWN0UmVhY3Rpb24pLmpvaW4oJywgJyk7XG4gICAgICAgIHJldHVybiBbJ1JlYWN0aW9uTGlzdCB7JywgZmxhdHRlbmVkLCAnfSddLmpvaW4oJyAnKTtcbiAgICB9XG59XG5leHBvcnRzLlJlYWN0aW9uTGlzdCA9IFJlYWN0aW9uTGlzdDtcbmNsYXNzIE1lc3NhZ2VSZWFjdGlvbnMgZXh0ZW5kcyBSZWFjdGlvbkxpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGN0eCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlcigoX2IgPSAoX2EgPSBjdHgudXBkYXRlLm1lc3NhZ2VfcmVhY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXdfcmVhY3Rpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdKTtcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKGN0eCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5pbmRleGVkKShuZXcgTWVzc2FnZVJlYWN0aW9ucyhjdHgpLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RbaW5kZXhdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG9sZCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gUmVhY3Rpb25MaXN0LmZyb21BcnJheSgoX2EgPSB0aGlzLmN0eC51cGRhdGUubWVzc2FnZV9yZWFjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9sZF9yZWFjdGlvbik7XG4gICAgfVxuICAgIGdldCBuZXcoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIFJlYWN0aW9uTGlzdC5mcm9tQXJyYXkoKF9hID0gdGhpcy5jdHgudXBkYXRlLm1lc3NhZ2VfcmVhY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXdfcmVhY3Rpb24pO1xuICAgIH1cbiAgICBnZXQgYWRkZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ldy5maWx0ZXIoKHJlYWN0aW9uKSA9PiAhdGhpcy5vbGQuaGFzKHJlYWN0aW9uKSk7XG4gICAgfVxuICAgIGdldCByZW1vdmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbGQuZmlsdGVyKChyZWFjdGlvbikgPT4gIXRoaXMubmV3LmhhcyhyZWFjdGlvbikpO1xuICAgIH1cbiAgICBnZXQga2VwdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3LmZpbHRlcigocmVhY3Rpb24pID0+IHRoaXMub2xkLmhhcyhyZWFjdGlvbikpO1xuICAgIH1cbn1cbmV4cG9ydHMuTWVzc2FnZVJlYWN0aW9ucyA9IE1lc3NhZ2VSZWFjdGlvbnM7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/reactions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/router.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/router.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/** @format */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Router = void 0;\nconst composer_1 = __importDefault(__webpack_require__(/*! ./composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\"));\n/** @deprecated in favor of {@link Composer.dispatch} */\nclass Router {\n    constructor(routeFn, handlers = new Map()) {\n        this.routeFn = routeFn;\n        this.handlers = handlers;\n        this.otherwiseHandler = composer_1.default.passThru();\n        if (typeof routeFn !== 'function') {\n            throw new Error('Missing routing function');\n        }\n    }\n    on(route, ...fns) {\n        if (fns.length === 0) {\n            throw new TypeError('At least one handler must be provided');\n        }\n        this.handlers.set(route, composer_1.default.compose(fns));\n        return this;\n    }\n    otherwise(...fns) {\n        if (fns.length === 0) {\n            throw new TypeError('At least one otherwise handler must be provided');\n        }\n        this.otherwiseHandler = composer_1.default.compose(fns);\n        return this;\n    }\n    middleware() {\n        return composer_1.default.lazy((ctx) => {\n            var _a;\n            const result = this.routeFn(ctx);\n            if (result == null) {\n                return this.otherwiseHandler;\n            }\n            Object.assign(ctx, result.context);\n            Object.assign(ctx.state, result.state);\n            return (_a = this.handlers.get(result.route)) !== null && _a !== void 0 ? _a : this.otherwiseHandler;\n        });\n    }\n}\nexports.Router = Router;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3JvdXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLG1DQUFtQyxtQkFBTyxDQUFDLGlFQUFZO0FBQ3ZELDZCQUE2Qix5QkFBeUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3JvdXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKiBAZm9ybWF0ICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJvdXRlciA9IHZvaWQgMDtcbmNvbnN0IGNvbXBvc2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9zZXJcIikpO1xuLyoqIEBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHtAbGluayBDb21wb3Nlci5kaXNwYXRjaH0gKi9cbmNsYXNzIFJvdXRlciB7XG4gICAgY29uc3RydWN0b3Iocm91dGVGbiwgaGFuZGxlcnMgPSBuZXcgTWFwKCkpIHtcbiAgICAgICAgdGhpcy5yb3V0ZUZuID0gcm91dGVGbjtcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IGhhbmRsZXJzO1xuICAgICAgICB0aGlzLm90aGVyd2lzZUhhbmRsZXIgPSBjb21wb3Nlcl8xLmRlZmF1bHQucGFzc1RocnUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiByb3V0ZUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcgcm91dGluZyBmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uKHJvdXRlLCAuLi5mbnMpIHtcbiAgICAgICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0F0IGxlYXN0IG9uZSBoYW5kbGVyIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZXJzLnNldChyb3V0ZSwgY29tcG9zZXJfMS5kZWZhdWx0LmNvbXBvc2UoZm5zKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvdGhlcndpc2UoLi4uZm5zKSB7XG4gICAgICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBdCBsZWFzdCBvbmUgb3RoZXJ3aXNlIGhhbmRsZXIgbXVzdCBiZSBwcm92aWRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3RoZXJ3aXNlSGFuZGxlciA9IGNvbXBvc2VyXzEuZGVmYXVsdC5jb21wb3NlKGZucyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBtaWRkbGV3YXJlKCkge1xuICAgICAgICByZXR1cm4gY29tcG9zZXJfMS5kZWZhdWx0LmxhenkoKGN0eCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yb3V0ZUZuKGN0eCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vdGhlcndpc2VIYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjdHgsIHJlc3VsdC5jb250ZXh0KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY3R4LnN0YXRlLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuaGFuZGxlcnMuZ2V0KHJlc3VsdC5yb3V0ZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMub3RoZXJ3aXNlSGFuZGxlcjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Sb3V0ZXIgPSBSb3V0ZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/scenes.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./scenes/index.js */ \"(rsc)/./node_modules/telegraf/lib/scenes/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsNEVBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjZW5lcy9pbmRleC5qc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes/base.js":
/*!**************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/base.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseScene = void 0;\nconst composer_1 = __importDefault(__webpack_require__(/*! ../composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\"));\nconst { compose } = composer_1.default;\nclass BaseScene extends composer_1.default {\n    constructor(id, options) {\n        const opts = {\n            handlers: [],\n            enterHandlers: [],\n            leaveHandlers: [],\n            ...options,\n        };\n        super(...opts.handlers);\n        this.id = id;\n        this.ttl = opts.ttl;\n        this.enterHandler = compose(opts.enterHandlers);\n        this.leaveHandler = compose(opts.leaveHandlers);\n    }\n    enter(...fns) {\n        this.enterHandler = compose([this.enterHandler, ...fns]);\n        return this;\n    }\n    leave(...fns) {\n        this.leaveHandler = compose([this.leaveHandler, ...fns]);\n        return this;\n    }\n    enterMiddleware() {\n        return this.enterHandler;\n    }\n    leaveMiddleware() {\n        return this.leaveHandler;\n    }\n}\nexports.BaseScene = BaseScene;\nexports[\"default\"] = BaseScene;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLG1DQUFtQyxtQkFBTyxDQUFDLGtFQUFhO0FBQ3hELFFBQVEsVUFBVTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGtCQUFlIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy9iYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYXNlU2NlbmUgPSB2b2lkIDA7XG5jb25zdCBjb21wb3Nlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9jb21wb3NlclwiKSk7XG5jb25zdCB7IGNvbXBvc2UgfSA9IGNvbXBvc2VyXzEuZGVmYXVsdDtcbmNsYXNzIEJhc2VTY2VuZSBleHRlbmRzIGNvbXBvc2VyXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJzOiBbXSxcbiAgICAgICAgICAgIGVudGVySGFuZGxlcnM6IFtdLFxuICAgICAgICAgICAgbGVhdmVIYW5kbGVyczogW10sXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9O1xuICAgICAgICBzdXBlciguLi5vcHRzLmhhbmRsZXJzKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnR0bCA9IG9wdHMudHRsO1xuICAgICAgICB0aGlzLmVudGVySGFuZGxlciA9IGNvbXBvc2Uob3B0cy5lbnRlckhhbmRsZXJzKTtcbiAgICAgICAgdGhpcy5sZWF2ZUhhbmRsZXIgPSBjb21wb3NlKG9wdHMubGVhdmVIYW5kbGVycyk7XG4gICAgfVxuICAgIGVudGVyKC4uLmZucykge1xuICAgICAgICB0aGlzLmVudGVySGFuZGxlciA9IGNvbXBvc2UoW3RoaXMuZW50ZXJIYW5kbGVyLCAuLi5mbnNdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGxlYXZlKC4uLmZucykge1xuICAgICAgICB0aGlzLmxlYXZlSGFuZGxlciA9IGNvbXBvc2UoW3RoaXMubGVhdmVIYW5kbGVyLCAuLi5mbnNdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGVudGVyTWlkZGxld2FyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50ZXJIYW5kbGVyO1xuICAgIH1cbiAgICBsZWF2ZU1pZGRsZXdhcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlYXZlSGFuZGxlcjtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VTY2VuZSA9IEJhc2VTY2VuZTtcbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VTY2VuZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes/context.js":
/*!*****************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/context.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst composer_1 = __importDefault(__webpack_require__(/*! ../composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:scenes:context');\nconst noop = () => Promise.resolve();\nconst now = () => Math.floor(Date.now() / 1000);\nclass SceneContextScene {\n    constructor(ctx, scenes, options) {\n        this.ctx = ctx;\n        this.scenes = scenes;\n        this.leaving = false;\n        // @ts-expect-error {} might not be assignable to D\n        const fallbackSessionDefault = {};\n        this.options = { defaultSession: fallbackSessionDefault, ...options };\n    }\n    get session() {\n        var _a, _b;\n        const defaultSession = Object.assign({}, this.options.defaultSession);\n        let session = (_b = (_a = this.ctx.session) === null || _a === void 0 ? void 0 : _a.__scenes) !== null && _b !== void 0 ? _b : defaultSession;\n        if (session.expires !== undefined && session.expires < now()) {\n            session = defaultSession;\n        }\n        if (this.ctx.session === undefined) {\n            this.ctx.session = { __scenes: session };\n        }\n        else {\n            this.ctx.session.__scenes = session;\n        }\n        return session;\n    }\n    get state() {\n        var _a;\n        var _b;\n        return ((_a = (_b = this.session).state) !== null && _a !== void 0 ? _a : (_b.state = {}));\n    }\n    set state(value) {\n        this.session.state = { ...value };\n    }\n    get current() {\n        var _a;\n        const sceneId = (_a = this.session.current) !== null && _a !== void 0 ? _a : this.options.default;\n        return sceneId === undefined || !this.scenes.has(sceneId)\n            ? undefined\n            : this.scenes.get(sceneId);\n    }\n    reset() {\n        if (this.ctx.session !== undefined)\n            this.ctx.session.__scenes = Object.assign({}, this.options.defaultSession);\n    }\n    async enter(sceneId, initialState = {}, silent = false) {\n        var _a, _b;\n        if (!this.scenes.has(sceneId)) {\n            throw new Error(`Can't find scene: ${sceneId}`);\n        }\n        if (!silent) {\n            await this.leave();\n        }\n        debug('Entering scene', sceneId, initialState, silent);\n        this.session.current = sceneId;\n        this.state = initialState;\n        const ttl = (_b = (_a = this.current) === null || _a === void 0 ? void 0 : _a.ttl) !== null && _b !== void 0 ? _b : this.options.ttl;\n        if (ttl !== undefined) {\n            this.session.expires = now() + ttl;\n        }\n        if (this.current === undefined || silent) {\n            return;\n        }\n        const handler = 'enterMiddleware' in this.current &&\n            typeof this.current.enterMiddleware === 'function'\n            ? this.current.enterMiddleware()\n            : this.current.middleware();\n        return await handler(this.ctx, noop);\n    }\n    reenter() {\n        return this.session.current === undefined\n            ? undefined\n            : this.enter(this.session.current, this.state);\n    }\n    async leave() {\n        if (this.leaving)\n            return;\n        debug('Leaving scene');\n        try {\n            this.leaving = true;\n            if (this.current === undefined) {\n                return;\n            }\n            const handler = 'leaveMiddleware' in this.current &&\n                typeof this.current.leaveMiddleware === 'function'\n                ? this.current.leaveMiddleware()\n                : composer_1.default.passThru();\n            await handler(this.ctx, noop);\n            return this.reset();\n        }\n        finally {\n            this.leaving = false;\n        }\n    }\n}\nexports[\"default\"] = SceneContextScene;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLG1CQUFPLENBQUMsa0VBQWE7QUFDeEQsZ0NBQWdDLG1CQUFPLENBQUMsc0RBQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0EsaURBQWlELFFBQVE7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsiL1VzZXJzL25pa2tpcmFlL0Rlc2t0b3AvQXVydW1Cb3QvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3RlbGVncmFmL2xpYi9zY2VuZXMvY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbXBvc2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2NvbXBvc2VyXCIpKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ3RlbGVncmFmOnNjZW5lczpjb250ZXh0Jyk7XG5jb25zdCBub29wID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG5jb25zdCBub3cgPSAoKSA9PiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbmNsYXNzIFNjZW5lQ29udGV4dFNjZW5lIHtcbiAgICBjb25zdHJ1Y3RvcihjdHgsIHNjZW5lcywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5zY2VuZXMgPSBzY2VuZXM7XG4gICAgICAgIHRoaXMubGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHt9IG1pZ2h0IG5vdCBiZSBhc3NpZ25hYmxlIHRvIERcbiAgICAgICAgY29uc3QgZmFsbGJhY2tTZXNzaW9uRGVmYXVsdCA9IHt9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IGRlZmF1bHRTZXNzaW9uOiBmYWxsYmFja1Nlc3Npb25EZWZhdWx0LCAuLi5vcHRpb25zIH07XG4gICAgfVxuICAgIGdldCBzZXNzaW9uKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBkZWZhdWx0U2Vzc2lvbiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucy5kZWZhdWx0U2Vzc2lvbik7XG4gICAgICAgIGxldCBzZXNzaW9uID0gKF9iID0gKF9hID0gdGhpcy5jdHguc2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLl9fc2NlbmVzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkZWZhdWx0U2Vzc2lvbjtcbiAgICAgICAgaWYgKHNlc3Npb24uZXhwaXJlcyAhPT0gdW5kZWZpbmVkICYmIHNlc3Npb24uZXhwaXJlcyA8IG5vdygpKSB7XG4gICAgICAgICAgICBzZXNzaW9uID0gZGVmYXVsdFNlc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY3R4LnNlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jdHguc2Vzc2lvbiA9IHsgX19zY2VuZXM6IHNlc3Npb24gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LnNlc3Npb24uX19zY2VuZXMgPSBzZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIF9iO1xuICAgICAgICByZXR1cm4gKChfYSA9IChfYiA9IHRoaXMuc2Vzc2lvbikuc3RhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYi5zdGF0ZSA9IHt9KSk7XG4gICAgfVxuICAgIHNldCBzdGF0ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNlc3Npb24uc3RhdGUgPSB7IC4uLnZhbHVlIH07XG4gICAgfVxuICAgIGdldCBjdXJyZW50KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHNjZW5lSWQgPSAoX2EgPSB0aGlzLnNlc3Npb24uY3VycmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5vcHRpb25zLmRlZmF1bHQ7XG4gICAgICAgIHJldHVybiBzY2VuZUlkID09PSB1bmRlZmluZWQgfHwgIXRoaXMuc2NlbmVzLmhhcyhzY2VuZUlkKVxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogdGhpcy5zY2VuZXMuZ2V0KHNjZW5lSWQpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3R4LnNlc3Npb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMuY3R4LnNlc3Npb24uX19zY2VuZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMuZGVmYXVsdFNlc3Npb24pO1xuICAgIH1cbiAgICBhc3luYyBlbnRlcihzY2VuZUlkLCBpbml0aWFsU3RhdGUgPSB7fSwgc2lsZW50ID0gZmFsc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLnNjZW5lcy5oYXMoc2NlbmVJZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBzY2VuZTogJHtzY2VuZUlkfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxlYXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoJ0VudGVyaW5nIHNjZW5lJywgc2NlbmVJZCwgaW5pdGlhbFN0YXRlLCBzaWxlbnQpO1xuICAgICAgICB0aGlzLnNlc3Npb24uY3VycmVudCA9IHNjZW5lSWQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICAgIGNvbnN0IHR0bCA9IChfYiA9IChfYSA9IHRoaXMuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR0bCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5vcHRpb25zLnR0bDtcbiAgICAgICAgaWYgKHR0bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlc3Npb24uZXhwaXJlcyA9IG5vdygpICsgdHRsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQgPT09IHVuZGVmaW5lZCB8fCBzaWxlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGVyID0gJ2VudGVyTWlkZGxld2FyZScgaW4gdGhpcy5jdXJyZW50ICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5jdXJyZW50LmVudGVyTWlkZGxld2FyZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyB0aGlzLmN1cnJlbnQuZW50ZXJNaWRkbGV3YXJlKClcbiAgICAgICAgICAgIDogdGhpcy5jdXJyZW50Lm1pZGRsZXdhcmUoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZXIodGhpcy5jdHgsIG5vb3ApO1xuICAgIH1cbiAgICByZWVudGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uLmN1cnJlbnQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogdGhpcy5lbnRlcih0aGlzLnNlc3Npb24uY3VycmVudCwgdGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIGFzeW5jIGxlYXZlKCkge1xuICAgICAgICBpZiAodGhpcy5sZWF2aW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZWJ1ZygnTGVhdmluZyBzY2VuZScpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSAnbGVhdmVNaWRkbGV3YXJlJyBpbiB0aGlzLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5jdXJyZW50LmxlYXZlTWlkZGxld2FyZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5jdXJyZW50LmxlYXZlTWlkZGxld2FyZSgpXG4gICAgICAgICAgICAgICAgOiBjb21wb3Nlcl8xLmRlZmF1bHQucGFzc1RocnUoKTtcbiAgICAgICAgICAgIGF3YWl0IGhhbmRsZXIodGhpcy5jdHgsIG5vb3ApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMubGVhdmluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2NlbmVDb250ZXh0U2NlbmU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes/index.js":
/*!***************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * @see https://github.com/telegraf/telegraf/issues/705#issuecomment-549056045\n * @see https://www.npmjs.com/package/telegraf-stateless-question\n * @packageDocumentation\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WizardContextWizard = exports.WizardScene = exports.BaseScene = exports.SceneContextScene = exports.Stage = void 0;\nvar stage_1 = __webpack_require__(/*! ./stage */ \"(rsc)/./node_modules/telegraf/lib/scenes/stage.js\");\nObject.defineProperty(exports, \"Stage\", ({ enumerable: true, get: function () { return stage_1.Stage; } }));\nvar context_1 = __webpack_require__(/*! ./context */ \"(rsc)/./node_modules/telegraf/lib/scenes/context.js\");\nObject.defineProperty(exports, \"SceneContextScene\", ({ enumerable: true, get: function () { return __importDefault(context_1).default; } }));\nvar base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/telegraf/lib/scenes/base.js\");\nObject.defineProperty(exports, \"BaseScene\", ({ enumerable: true, get: function () { return base_1.BaseScene; } }));\nvar wizard_1 = __webpack_require__(/*! ./wizard */ \"(rsc)/./node_modules/telegraf/lib/scenes/wizard/index.js\");\nObject.defineProperty(exports, \"WizardScene\", ({ enumerable: true, get: function () { return wizard_1.WizardScene; } }));\nvar context_2 = __webpack_require__(/*! ./wizard/context */ \"(rsc)/./node_modules/telegraf/lib/scenes/wizard/context.js\");\nObject.defineProperty(exports, \"WizardContextWizard\", ({ enumerable: true, get: function () { return __importDefault(context_2).default; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyxtQkFBbUIsR0FBRyxpQkFBaUIsR0FBRyx5QkFBeUIsR0FBRyxhQUFhO0FBQ2pILGNBQWMsbUJBQU8sQ0FBQyxrRUFBUztBQUMvQix5Q0FBd0MsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDekcsZ0JBQWdCLG1CQUFPLENBQUMsc0VBQVc7QUFDbkMscURBQW9ELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDO0FBQzFJLGFBQWEsbUJBQU8sQ0FBQyxnRUFBUTtBQUM3Qiw2Q0FBNEMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDaEgsZUFBZSxtQkFBTyxDQUFDLDBFQUFVO0FBQ2pDLCtDQUE4QyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN0SCxnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBa0I7QUFDMUMsdURBQXNELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vdGVsZWdyYWYvdGVsZWdyYWYvaXNzdWVzLzcwNSNpc3N1ZWNvbW1lbnQtNTQ5MDU2MDQ1XG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RlbGVncmFmLXN0YXRlbGVzcy1xdWVzdGlvblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2l6YXJkQ29udGV4dFdpemFyZCA9IGV4cG9ydHMuV2l6YXJkU2NlbmUgPSBleHBvcnRzLkJhc2VTY2VuZSA9IGV4cG9ydHMuU2NlbmVDb250ZXh0U2NlbmUgPSBleHBvcnRzLlN0YWdlID0gdm9pZCAwO1xudmFyIHN0YWdlXzEgPSByZXF1aXJlKFwiLi9zdGFnZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0YWdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdGFnZV8xLlN0YWdlOyB9IH0pO1xudmFyIGNvbnRleHRfMSA9IHJlcXVpcmUoXCIuL2NvbnRleHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTY2VuZUNvbnRleHRTY2VuZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX19pbXBvcnREZWZhdWx0KGNvbnRleHRfMSkuZGVmYXVsdDsgfSB9KTtcbnZhciBiYXNlXzEgPSByZXF1aXJlKFwiLi9iYXNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmFzZVNjZW5lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiYXNlXzEuQmFzZVNjZW5lOyB9IH0pO1xudmFyIHdpemFyZF8xID0gcmVxdWlyZShcIi4vd2l6YXJkXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2l6YXJkU2NlbmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpemFyZF8xLldpemFyZFNjZW5lOyB9IH0pO1xudmFyIGNvbnRleHRfMiA9IHJlcXVpcmUoXCIuL3dpemFyZC9jb250ZXh0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2l6YXJkQ29udGV4dFdpemFyZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX19pbXBvcnREZWZhdWx0KGNvbnRleHRfMikuZGVmYXVsdDsgfSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes/stage.js":
/*!***************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/stage.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stage = void 0;\nconst session_1 = __webpack_require__(/*! ../session */ \"(rsc)/./node_modules/telegraf/lib/session.js\");\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"(rsc)/./node_modules/telegraf/lib/scenes/context.js\"));\nconst composer_1 = __webpack_require__(/*! ../composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\");\nclass Stage extends composer_1.Composer {\n    constructor(scenes = [], options) {\n        super();\n        this.options = { ...options };\n        this.scenes = new Map();\n        scenes.forEach((scene) => this.register(scene));\n    }\n    register(...scenes) {\n        scenes.forEach((scene) => {\n            if ((scene === null || scene === void 0 ? void 0 : scene.id) == null || typeof scene.middleware !== 'function') {\n                throw new Error('telegraf: Unsupported scene');\n            }\n            this.scenes.set(scene.id, scene);\n        });\n        return this;\n    }\n    middleware() {\n        const handler = composer_1.Composer.compose([\n            (ctx, next) => {\n                const scenes = this.scenes;\n                const scene = new context_1.default(ctx, scenes, this.options);\n                ctx.scene = scene;\n                return next();\n            },\n            super.middleware(),\n            composer_1.Composer.lazy((ctx) => { var _a; return (_a = ctx.scene.current) !== null && _a !== void 0 ? _a : composer_1.Composer.passThru(); }),\n        ]);\n        return composer_1.Composer.optional(session_1.isSessionContext, handler);\n    }\n    static enter(...args) {\n        return (ctx) => ctx.scene.enter(...args);\n    }\n    static reenter(...args) {\n        return (ctx) => ctx.scene.reenter(...args);\n    }\n    static leave(...args) {\n        return (ctx) => ctx.scene.leave(...args);\n    }\n}\nexports.Stage = Stage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy9zdGFnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixrQkFBa0IsbUJBQU8sQ0FBQyxnRUFBWTtBQUN0QyxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBVztBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyxrRUFBYTtBQUN4QztBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdEQUFnRCxRQUFRLGtHQUFrRztBQUMxSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtraXJhZS9EZXNrdG9wL0F1cnVtQm90L2Zyb250ZW5kL25vZGVfbW9kdWxlcy90ZWxlZ3JhZi9saWIvc2NlbmVzL3N0YWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdGFnZSA9IHZvaWQgMDtcbmNvbnN0IHNlc3Npb25fMSA9IHJlcXVpcmUoXCIuLi9zZXNzaW9uXCIpO1xuY29uc3QgY29udGV4dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnRleHRcIikpO1xuY29uc3QgY29tcG9zZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21wb3NlclwiKTtcbmNsYXNzIFN0YWdlIGV4dGVuZHMgY29tcG9zZXJfMS5Db21wb3NlciB7XG4gICAgY29uc3RydWN0b3Ioc2NlbmVzID0gW10sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuc2NlbmVzID0gbmV3IE1hcCgpO1xuICAgICAgICBzY2VuZXMuZm9yRWFjaCgoc2NlbmUpID0+IHRoaXMucmVnaXN0ZXIoc2NlbmUpKTtcbiAgICB9XG4gICAgcmVnaXN0ZXIoLi4uc2NlbmVzKSB7XG4gICAgICAgIHNjZW5lcy5mb3JFYWNoKChzY2VuZSkgPT4ge1xuICAgICAgICAgICAgaWYgKChzY2VuZSA9PT0gbnVsbCB8fCBzY2VuZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NlbmUuaWQpID09IG51bGwgfHwgdHlwZW9mIHNjZW5lLm1pZGRsZXdhcmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RlbGVncmFmOiBVbnN1cHBvcnRlZCBzY2VuZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zY2VuZXMuc2V0KHNjZW5lLmlkLCBzY2VuZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbWlkZGxld2FyZSgpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGNvbXBvc2VyXzEuQ29tcG9zZXIuY29tcG9zZShbXG4gICAgICAgICAgICAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NlbmVzID0gdGhpcy5zY2VuZXM7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NlbmUgPSBuZXcgY29udGV4dF8xLmRlZmF1bHQoY3R4LCBzY2VuZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY3R4LnNjZW5lID0gc2NlbmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdXBlci5taWRkbGV3YXJlKCksXG4gICAgICAgICAgICBjb21wb3Nlcl8xLkNvbXBvc2VyLmxhenkoKGN0eCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBjdHguc2NlbmUuY3VycmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29tcG9zZXJfMS5Db21wb3Nlci5wYXNzVGhydSgpOyB9KSxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBjb21wb3Nlcl8xLkNvbXBvc2VyLm9wdGlvbmFsKHNlc3Npb25fMS5pc1Nlc3Npb25Db250ZXh0LCBoYW5kbGVyKTtcbiAgICB9XG4gICAgc3RhdGljIGVudGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIChjdHgpID0+IGN0eC5zY2VuZS5lbnRlciguLi5hcmdzKTtcbiAgICB9XG4gICAgc3RhdGljIHJlZW50ZXIoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gKGN0eCkgPT4gY3R4LnNjZW5lLnJlZW50ZXIoLi4uYXJncyk7XG4gICAgfVxuICAgIHN0YXRpYyBsZWF2ZSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiAoY3R4KSA9PiBjdHguc2NlbmUubGVhdmUoLi4uYXJncyk7XG4gICAgfVxufVxuZXhwb3J0cy5TdGFnZSA9IFN0YWdlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes/stage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes/wizard/context.js":
/*!************************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/wizard/context.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass WizardContextWizard {\n    constructor(ctx, steps) {\n        var _a;\n        this.ctx = ctx;\n        this.steps = steps;\n        this.state = ctx.scene.state;\n        this.cursor = (_a = ctx.scene.session.cursor) !== null && _a !== void 0 ? _a : 0;\n    }\n    get step() {\n        return this.steps[this.cursor];\n    }\n    get cursor() {\n        return this.ctx.scene.session.cursor;\n    }\n    set cursor(cursor) {\n        this.ctx.scene.session.cursor = cursor;\n    }\n    selectStep(index) {\n        this.cursor = index;\n        return this;\n    }\n    next() {\n        return this.selectStep(this.cursor + 1);\n    }\n    back() {\n        return this.selectStep(this.cursor - 1);\n    }\n}\nexports[\"default\"] = WizardContextWizard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy93aXphcmQvY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy93aXphcmQvY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFdpemFyZENvbnRleHRXaXphcmQge1xuICAgIGNvbnN0cnVjdG9yKGN0eCwgc3RlcHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5zdGVwcyA9IHN0ZXBzO1xuICAgICAgICB0aGlzLnN0YXRlID0gY3R4LnNjZW5lLnN0YXRlO1xuICAgICAgICB0aGlzLmN1cnNvciA9IChfYSA9IGN0eC5zY2VuZS5zZXNzaW9uLmN1cnNvcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICB9XG4gICAgZ2V0IHN0ZXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzW3RoaXMuY3Vyc29yXTtcbiAgICB9XG4gICAgZ2V0IGN1cnNvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3R4LnNjZW5lLnNlc3Npb24uY3Vyc29yO1xuICAgIH1cbiAgICBzZXQgY3Vyc29yKGN1cnNvcikge1xuICAgICAgICB0aGlzLmN0eC5zY2VuZS5zZXNzaW9uLmN1cnNvciA9IGN1cnNvcjtcbiAgICB9XG4gICAgc2VsZWN0U3RlcChpbmRleCkge1xuICAgICAgICB0aGlzLmN1cnNvciA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0U3RlcCh0aGlzLmN1cnNvciArIDEpO1xuICAgIH1cbiAgICBiYWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RTdGVwKHRoaXMuY3Vyc29yIC0gMSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gV2l6YXJkQ29udGV4dFdpemFyZDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes/wizard/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/scenes/wizard/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/wizard/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WizardScene = void 0;\nconst base_1 = __importDefault(__webpack_require__(/*! ../base */ \"(rsc)/./node_modules/telegraf/lib/scenes/base.js\"));\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"(rsc)/./node_modules/telegraf/lib/scenes/wizard/context.js\"));\nconst composer_1 = __importDefault(__webpack_require__(/*! ../../composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\"));\nclass WizardScene extends base_1.default {\n    constructor(id, options, ...steps) {\n        let opts;\n        let s;\n        if (typeof options === 'function' || 'middleware' in options) {\n            opts = undefined;\n            s = [options, ...steps];\n        }\n        else {\n            opts = options;\n            s = steps;\n        }\n        super(id, opts);\n        this.steps = s;\n    }\n    middleware() {\n        return composer_1.default.compose([\n            (ctx, next) => {\n                ctx.wizard = new context_1.default(ctx, this.steps);\n                return next();\n            },\n            super.middleware(),\n            (ctx, next) => {\n                if (ctx.wizard.step === undefined) {\n                    ctx.wizard.selectStep(0);\n                    return ctx.scene.leave();\n                }\n                return composer_1.default.unwrap(ctx.wizard.step)(ctx, next);\n            },\n        ]);\n    }\n    enterMiddleware() {\n        return composer_1.default.compose([this.enterHandler, this.middleware()]);\n    }\n}\nexports.WizardScene = WizardScene;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy93aXphcmQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsK0JBQStCLG1CQUFPLENBQUMsaUVBQVM7QUFDaEQsa0NBQWtDLG1CQUFPLENBQUMsNkVBQVc7QUFDckQsbUNBQW1DLG1CQUFPLENBQUMscUVBQWdCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3NjZW5lcy93aXphcmQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldpemFyZFNjZW5lID0gdm9pZCAwO1xuY29uc3QgYmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9iYXNlXCIpKTtcbmNvbnN0IGNvbnRleHRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb250ZXh0XCIpKTtcbmNvbnN0IGNvbXBvc2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2NvbXBvc2VyXCIpKTtcbmNsYXNzIFdpemFyZFNjZW5lIGV4dGVuZHMgYmFzZV8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGlkLCBvcHRpb25zLCAuLi5zdGVwcykge1xuICAgICAgICBsZXQgb3B0cztcbiAgICAgICAgbGV0IHM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fCAnbWlkZGxld2FyZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHMgPSBbb3B0aW9ucywgLi4uc3RlcHNdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnM7XG4gICAgICAgICAgICBzID0gc3RlcHM7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoaWQsIG9wdHMpO1xuICAgICAgICB0aGlzLnN0ZXBzID0gcztcbiAgICB9XG4gICAgbWlkZGxld2FyZSgpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VyXzEuZGVmYXVsdC5jb21wb3NlKFtcbiAgICAgICAgICAgIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICAgICAgICBjdHgud2l6YXJkID0gbmV3IGNvbnRleHRfMS5kZWZhdWx0KGN0eCwgdGhpcy5zdGVwcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdXBlci5taWRkbGV3YXJlKCksXG4gICAgICAgICAgICAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC53aXphcmQuc3RlcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC53aXphcmQuc2VsZWN0U3RlcCgwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5zY2VuZS5sZWF2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9zZXJfMS5kZWZhdWx0LnVud3JhcChjdHgud2l6YXJkLnN0ZXApKGN0eCwgbmV4dCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZW50ZXJNaWRkbGV3YXJlKCkge1xuICAgICAgICByZXR1cm4gY29tcG9zZXJfMS5kZWZhdWx0LmNvbXBvc2UoW3RoaXMuZW50ZXJIYW5kbGVyLCB0aGlzLm1pZGRsZXdhcmUoKV0pO1xuICAgIH1cbn1cbmV4cG9ydHMuV2l6YXJkU2NlbmUgPSBXaXphcmRTY2VuZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/scenes/wizard/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/session.js":
/*!**********************************************!*\
  !*** ./node_modules/telegraf/lib/session.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSessionContext = exports.MemorySessionStore = exports.session = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:session');\n/**\n * Returns middleware that adds `ctx.session` for storing arbitrary state per session key.\n *\n * The default `getSessionKey` is `${ctx.from.id}:${ctx.chat.id}`.\n * If either `ctx.from` or `ctx.chat` is `undefined`, default session key and thus `ctx.session` are also `undefined`.\n *\n * > ⚠️ Session data is kept only in memory by default,  which means that all data will be lost when the process is terminated.\n * >\n * > If you want to persist data across process restarts, or share it among multiple instances, you should use\n * [@telegraf/session](https://www.npmjs.com/package/@telegraf/session), or pass custom `storage`.\n *\n * @see {@link https://github.com/feathers-studio/telegraf-docs/blob/b694bcc36b4f71fb1cd650a345c2009ab4d2a2a5/guide/session.md Telegraf Docs | Session}\n * @see {@link https://github.com/feathers-studio/telegraf-docs/blob/master/examples/session-bot.ts Example}\n */\nfunction session(options) {\n    var _a, _b, _c;\n    const prop = (_a = options === null || options === void 0 ? void 0 : options.property) !== null && _a !== void 0 ? _a : 'session';\n    const getSessionKey = (_b = options === null || options === void 0 ? void 0 : options.getSessionKey) !== null && _b !== void 0 ? _b : defaultGetSessionKey;\n    const store = (_c = options === null || options === void 0 ? void 0 : options.store) !== null && _c !== void 0 ? _c : new MemorySessionStore();\n    // caches value from store in-memory while simultaneous updates share it\n    // when counter reaches 0, the cached ref will be freed from memory\n    const cache = new Map();\n    // temporarily stores concurrent requests\n    const concurrents = new Map();\n    // this function must be handled with care\n    // read full description on the original PR: https://github.com/telegraf/telegraf/pull/1713\n    // make sure to update the tests in test/session.js if you make any changes or fix bugs here\n    return async (ctx, next) => {\n        var _a;\n        const updId = ctx.update.update_id;\n        let released = false;\n        function releaseChecks() {\n            if (released && process.env.EXPERIMENTAL_SESSION_CHECKS)\n                throw new Error(\"Session was accessed or assigned to after the middleware chain exhausted. This is a bug in your code. You're probably accessing session asynchronously and missing awaits.\");\n        }\n        // because this is async, requests may still race here, but it will get autocorrected at (1)\n        // v5 getSessionKey should probably be synchronous to avoid that\n        const key = await getSessionKey(ctx);\n        if (!key) {\n            // Leaving this here could be useful to check for `prop in ctx` in future middleware\n            ctx[prop] = undefined;\n            return await next();\n        }\n        let cached = cache.get(key);\n        if (cached) {\n            debug(`(${updId}) found cached session, reusing from cache`);\n            ++cached.counter;\n        }\n        else {\n            debug(`(${updId}) did not find cached session`);\n            // if another concurrent request has already sent a store request, fetch that instead\n            let promise = concurrents.get(key);\n            if (promise)\n                debug(`(${updId}) found a concurrent request, reusing promise`);\n            else {\n                debug(`(${updId}) fetching from upstream store`);\n                promise = store.get(key);\n            }\n            // synchronously store promise so concurrent requests can share response\n            concurrents.set(key, promise);\n            const upstream = await promise;\n            // all concurrent awaits will have promise in their closure, safe to remove now\n            concurrents.delete(key);\n            debug(`(${updId}) updating cache`);\n            // another request may have beaten us to the punch\n            const c = cache.get(key);\n            if (c) {\n                // another request did beat us to the punch\n                c.counter++;\n                // (1) preserve cached reference; in-memory reference is always newer than from store\n                cached = c;\n            }\n            else {\n                // we're the first, so we must cache the reference\n                cached = { ref: upstream !== null && upstream !== void 0 ? upstream : (_a = options === null || options === void 0 ? void 0 : options.defaultSession) === null || _a === void 0 ? void 0 : _a.call(options, ctx), counter: 1 };\n                cache.set(key, cached);\n            }\n        }\n        // TS already knows cached is always defined by this point, but does not guard cached.\n        // It will, however, guard `c` here.\n        const c = cached;\n        let touched = false;\n        Object.defineProperty(ctx, prop, {\n            get() {\n                releaseChecks();\n                touched = true;\n                return c.ref;\n            },\n            set(value) {\n                releaseChecks();\n                touched = true;\n                c.ref = value;\n            },\n        });\n        try {\n            await next();\n            released = true;\n        }\n        finally {\n            if (--c.counter === 0) {\n                // decrement to avoid memory leak\n                debug(`(${updId}) refcounter reached 0, removing cached`);\n                cache.delete(key);\n            }\n            debug(`(${updId}) middlewares completed, checking session`);\n            // only update store if ctx.session was touched\n            if (touched)\n                if (c.ref == null) {\n                    debug(`(${updId}) ctx.${prop} missing, removing from store`);\n                    await store.delete(key);\n                }\n                else {\n                    debug(`(${updId}) ctx.${prop} found, updating store`);\n                    await store.set(key, c.ref);\n                }\n        }\n    };\n}\nexports.session = session;\nfunction defaultGetSessionKey(ctx) {\n    var _a, _b;\n    const fromId = (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id;\n    const chatId = (_b = ctx.chat) === null || _b === void 0 ? void 0 : _b.id;\n    if (fromId == null || chatId == null)\n        return undefined;\n    return `${fromId}:${chatId}`;\n}\n/** @deprecated Use `Map` */\nclass MemorySessionStore {\n    constructor(ttl = Infinity) {\n        this.ttl = ttl;\n        this.store = new Map();\n    }\n    get(name) {\n        const entry = this.store.get(name);\n        if (entry == null) {\n            return undefined;\n        }\n        else if (entry.expires < Date.now()) {\n            this.delete(name);\n            return undefined;\n        }\n        return entry.session;\n    }\n    set(name, value) {\n        const now = Date.now();\n        this.store.set(name, { session: value, expires: now + this.ttl });\n    }\n    delete(name) {\n        this.store.delete(name);\n    }\n}\nexports.MemorySessionStore = MemorySessionStore;\n/** @deprecated session can use custom properties now. Directly use `'session' in ctx` instead */\nfunction isSessionContext(ctx) {\n    return 'session' in ctx;\n}\nexports.isSessionContext = isSessionContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/telegraf.js":
/*!***********************************************!*\
  !*** ./node_modules/telegraf/lib/telegraf.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Telegraf = void 0;\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst http = __importStar(__webpack_require__(/*! http */ \"http\"));\nconst https = __importStar(__webpack_require__(/*! https */ \"https\"));\nconst composer_1 = __webpack_require__(/*! ./composer */ \"(rsc)/./node_modules/telegraf/lib/composer.js\");\nconst compact_1 = __webpack_require__(/*! ./core/helpers/compact */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/compact.js\");\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"(rsc)/./node_modules/telegraf/lib/context.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst webhook_1 = __importDefault(__webpack_require__(/*! ./core/network/webhook */ \"(rsc)/./node_modules/telegraf/lib/core/network/webhook.js\"));\nconst polling_1 = __webpack_require__(/*! ./core/network/polling */ \"(rsc)/./node_modules/telegraf/lib/core/network/polling.js\");\nconst p_timeout_1 = __importDefault(__webpack_require__(/*! p-timeout */ \"(rsc)/./node_modules/p-timeout/index.js\"));\nconst telegram_1 = __importDefault(__webpack_require__(/*! ./telegram */ \"(rsc)/./node_modules/telegraf/lib/telegram.js\"));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst safeCompare = __webpack_require__(/*! safe-compare */ \"(rsc)/./node_modules/safe-compare/index.js\");\nconst debug = (0, debug_1.default)('telegraf:main');\nconst DEFAULT_OPTIONS = {\n    telegram: {},\n    handlerTimeout: 90000,\n    contextType: context_1.default,\n};\nfunction always(x) {\n    return () => x;\n}\nconst anoop = always(Promise.resolve());\nconst TOKEN_HEADER = 'x-telegram-bot-api-secret-token';\nclass Telegraf extends composer_1.Composer {\n    constructor(token, options) {\n        super();\n        this.context = {};\n        /** Assign to this to customise the webhook filter middleware.\n         * `{ path, secretToken }` will be bound to this rather than the Telegraf instance.\n         * Remember to assign a regular function and not an arrow function so it's bindable.\n         */\n        this.webhookFilter = function (req) {\n            const debug = (0, debug_1.default)('telegraf:webhook');\n            if (req.method === 'POST') {\n                if (safeCompare(this.path, req.url)) {\n                    // no need to check if secret_token was not set\n                    if (!this.secretToken)\n                        return true;\n                    else {\n                        const token = req.headers[TOKEN_HEADER];\n                        if (safeCompare(this.secretToken, token))\n                            return true;\n                        else\n                            debug('Secret token does not match:', token, this.secretToken);\n                    }\n                }\n                else\n                    debug('Path does not match:', req.url, this.path);\n            }\n            else\n                debug('Unexpected request method, not POST. Received:', req.method);\n            return false;\n        };\n        this.handleError = (err, ctx) => {\n            // set exit code to emulate `warn-with-error-code` behavior of\n            // https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode\n            // to prevent a clean exit despite an error being thrown\n            process.exitCode = 1;\n            console.error('Unhandled error while processing', ctx.update);\n            throw err;\n        };\n        // @ts-expect-error Trust me, TS\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...(0, compact_1.compactOptions)(options),\n        };\n        this.telegram = new telegram_1.default(token, this.options.telegram);\n        debug('Created a `Telegraf` instance');\n    }\n    get token() {\n        return this.telegram.token;\n    }\n    /** @deprecated use `ctx.telegram.webhookReply` */\n    set webhookReply(webhookReply) {\n        this.telegram.webhookReply = webhookReply;\n    }\n    /** @deprecated use `ctx.telegram.webhookReply` */\n    get webhookReply() {\n        return this.telegram.webhookReply;\n    }\n    /**\n     * _Override_ error handling\n     */\n    catch(handler) {\n        this.handleError = handler;\n        return this;\n    }\n    /**\n     * You must call `bot.telegram.setWebhook` for this to work.\n     * You should probably use {@link Telegraf.createWebhook} instead.\n     */\n    webhookCallback(path = '/', opts = {}) {\n        const { secretToken } = opts;\n        return (0, webhook_1.default)(this.webhookFilter.bind({ hookPath: path, path, secretToken }), (update, res) => this.handleUpdate(update, res));\n    }\n    getDomainOpts(opts) {\n        var _a;\n        const protocol = opts.domain.startsWith('https://') || opts.domain.startsWith('http://');\n        if (protocol)\n            debug('Unexpected protocol in domain, telegraf will use https:', opts.domain);\n        const domain = protocol ? new url_1.URL(opts.domain).host : opts.domain;\n        const path = (_a = opts.path) !== null && _a !== void 0 ? _a : `/telegraf/${this.secretPathComponent()}`;\n        const url = `https://${domain}${path}`;\n        return { domain, path, url };\n    }\n    /**\n     * Specify a url to receive incoming updates via webhook.\n     * Returns an Express-style middleware you can pass to app.use()\n     */\n    async createWebhook(opts) {\n        const { domain, path, ...extra } = opts;\n        const domainOpts = this.getDomainOpts({ domain, path });\n        await this.telegram.setWebhook(domainOpts.url, extra);\n        debug(`Webhook set to ${domainOpts.url}`);\n        return this.webhookCallback(domainOpts.path, {\n            secretToken: extra.secret_token,\n        });\n    }\n    startPolling(allowedUpdates = []) {\n        this.polling = new polling_1.Polling(this.telegram, allowedUpdates);\n        return this.polling.loop(async (update) => {\n            await this.handleUpdate(update);\n        });\n    }\n    startWebhook(path, tlsOptions, port, host, cb, secretToken) {\n        const webhookCb = this.webhookCallback(path, { secretToken });\n        const callback = typeof cb === 'function'\n            ? (req, res) => webhookCb(req, res, () => cb(req, res))\n            : webhookCb;\n        this.webhookServer =\n            tlsOptions != null\n                ? https.createServer(tlsOptions, callback)\n                : http.createServer(callback);\n        this.webhookServer.listen(port, host, () => {\n            debug('Webhook listening on port: %s', port);\n        });\n        return this;\n    }\n    secretPathComponent() {\n        return crypto\n            .createHash('sha3-256')\n            .update(this.token)\n            .update(process.version) // salt\n            .digest('hex');\n    }\n    /**\n     * @see https://github.com/telegraf/telegraf/discussions/1344#discussioncomment-335700\n     */\n    async launch(config = {}, \n    /** @experimental */\n    onLaunch) {\n        var _a, _b;\n        const [cfg, onMe] = typeof config === 'function' ? [{}, config] : [config, onLaunch];\n        const drop_pending_updates = cfg.dropPendingUpdates;\n        const allowed_updates = cfg.allowedUpdates;\n        const webhook = cfg.webhook;\n        debug('Connecting to Telegram');\n        (_a = this.botInfo) !== null && _a !== void 0 ? _a : (this.botInfo = await this.telegram.getMe());\n        onMe === null || onMe === void 0 ? void 0 : onMe();\n        debug(`Launching @${this.botInfo.username}`);\n        if (webhook === undefined) {\n            await this.telegram.deleteWebhook({ drop_pending_updates });\n            debug('Bot started with long polling');\n            await this.startPolling(allowed_updates);\n            return;\n        }\n        const domainOpts = this.getDomainOpts({\n            domain: webhook.domain,\n            path: (_b = webhook.path) !== null && _b !== void 0 ? _b : webhook.hookPath,\n        });\n        const { tlsOptions, port, host, cb, secretToken } = webhook;\n        this.startWebhook(domainOpts.path, tlsOptions, port, host, cb, secretToken);\n        await this.telegram.setWebhook(domainOpts.url, {\n            drop_pending_updates: drop_pending_updates,\n            allowed_updates: allowed_updates,\n            ip_address: webhook.ipAddress,\n            max_connections: webhook.maxConnections,\n            secret_token: webhook.secretToken,\n            certificate: webhook.certificate,\n        });\n        debug(`Bot started with webhook @ ${domainOpts.url}`);\n    }\n    stop(reason = 'unspecified') {\n        var _a, _b;\n        debug('Stopping bot... Reason:', reason);\n        // https://github.com/telegraf/telegraf/pull/1224#issuecomment-742693770\n        if (this.polling === undefined && this.webhookServer === undefined) {\n            throw new Error('Bot is not running!');\n        }\n        (_a = this.webhookServer) === null || _a === void 0 ? void 0 : _a.close();\n        (_b = this.polling) === null || _b === void 0 ? void 0 : _b.stop();\n    }\n    async handleUpdate(update, webhookResponse) {\n        var _a, _b;\n        (_a = this.botInfo) !== null && _a !== void 0 ? _a : (this.botInfo = (debug('Update %d is waiting for `botInfo` to be initialized', update.update_id),\n            await ((_b = this.botInfoCall) !== null && _b !== void 0 ? _b : (this.botInfoCall = this.telegram.getMe()))));\n        debug('Processing update', update.update_id);\n        const tg = new telegram_1.default(this.token, this.telegram.options, webhookResponse);\n        const TelegrafContext = this.options.contextType;\n        const ctx = new TelegrafContext(update, tg, this.botInfo);\n        Object.assign(ctx, this.context);\n        try {\n            await (0, p_timeout_1.default)(Promise.resolve(this.middleware()(ctx, anoop)), this.options.handlerTimeout);\n        }\n        catch (err) {\n            return await this.handleError(err, ctx);\n        }\n        finally {\n            if ((webhookResponse === null || webhookResponse === void 0 ? void 0 : webhookResponse.writableEnded) === false) {\n                webhookResponse.end();\n            }\n            debug('Finished processing update', update.update_id);\n        }\n    }\n}\nexports.Telegraf = Telegraf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/telegraf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/telegram-types.js":
/*!*****************************************************!*\
  !*** ./node_modules/telegraf/lib/telegram-types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/** @format */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Markup = void 0;\nvar markup_1 = __webpack_require__(/*! ./markup */ \"(rsc)/./node_modules/telegraf/lib/markup.js\");\nObject.defineProperty(exports, \"Markup\", ({ enumerable: true, get: function () { return markup_1.Markup; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGVsZWdyYWYvbGliL3RlbGVncmFtLXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGVBQWUsbUJBQU8sQ0FBQyw2REFBVTtBQUNqQywwQ0FBeUMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtraXJhZS9EZXNrdG9wL0F1cnVtQm90L2Zyb250ZW5kL25vZGVfbW9kdWxlcy90ZWxlZ3JhZi9saWIvdGVsZWdyYW0tdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQGZvcm1hdCAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXJrdXAgPSB2b2lkIDA7XG52YXIgbWFya3VwXzEgPSByZXF1aXJlKFwiLi9tYXJrdXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYXJrdXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hcmt1cF8xLk1hcmt1cDsgfSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/telegram-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/telegraf/lib/telegram.js":
/*!***********************************************!*\
  !*** ./node_modules/telegraf/lib/telegram.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Telegram = void 0;\nconst client_1 = __importDefault(__webpack_require__(/*! ./core/network/client */ \"(rsc)/./node_modules/telegraf/lib/core/network/client.js\"));\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst format_1 = __webpack_require__(/*! ./format */ \"(rsc)/./node_modules/telegraf/lib/format.js\");\nconst util_1 = __webpack_require__(/*! ./core/helpers/util */ \"(rsc)/./node_modules/telegraf/lib/core/helpers/util.js\");\nclass Telegram extends client_1.default {\n    /**\n     * Get basic information about the bot\n     */\n    getMe() {\n        return this.callApi('getMe', {});\n    }\n    /**\n     * Get basic info about a file and prepare it for downloading.\n     * @param fileId Id of file to get link to\n     */\n    getFile(fileId) {\n        return this.callApi('getFile', { file_id: fileId });\n    }\n    /**\n     * Get download link to a file.\n     */\n    async getFileLink(fileId) {\n        if (typeof fileId === 'string') {\n            fileId = await this.getFile(fileId);\n        }\n        else if (fileId.file_path === undefined) {\n            fileId = await this.getFile(fileId.file_id);\n        }\n        // Local bot API instances return the absolute path to the file\n        if (fileId.file_path !== undefined && (0, path_1.isAbsolute)(fileId.file_path)) {\n            const url = new url_1.URL(this.options.apiRoot);\n            url.port = '';\n            url.pathname = fileId.file_path;\n            url.protocol = 'file:';\n            return url;\n        }\n        return new url_1.URL(`./file/${this.options.apiMode}${this.token}${this.options.testEnv ? '/test' : ''\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        }/${fileId.file_path}`, this.options.apiRoot);\n    }\n    /**\n     * Directly request incoming updates.\n     * You should probably use `Telegraf::launch` instead.\n     */\n    getUpdates(timeout, limit, offset, allowedUpdates) {\n        return this.callApi('getUpdates', {\n            allowed_updates: allowedUpdates,\n            limit,\n            offset,\n            timeout,\n        });\n    }\n    getWebhookInfo() {\n        return this.callApi('getWebhookInfo', {});\n    }\n    getGameHighScores(userId, inlineMessageId, chatId, messageId) {\n        return this.callApi('getGameHighScores', {\n            user_id: userId,\n            inline_message_id: inlineMessageId,\n            chat_id: chatId,\n            message_id: messageId,\n        });\n    }\n    setGameScore(userId, score, inlineMessageId, chatId, messageId, editMessage = true, force = false) {\n        return this.callApi('setGameScore', {\n            force,\n            score,\n            user_id: userId,\n            inline_message_id: inlineMessageId,\n            chat_id: chatId,\n            message_id: messageId,\n            disable_edit_message: !editMessage,\n        });\n    }\n    /**\n     * Specify a url to receive incoming updates via an outgoing webhook.\n     * @param url HTTPS url to send updates to. Use an empty string to remove webhook integration\n     */\n    setWebhook(url, extra) {\n        return this.callApi('setWebhook', {\n            url,\n            ...extra,\n        });\n    }\n    /**\n     * Remove webhook integration.\n     */\n    deleteWebhook(extra) {\n        return this.callApi('deleteWebhook', {\n            ...extra,\n        });\n    }\n    /**\n     * Send a text message.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param text Text of the message to be sent\n     */\n    sendMessage(chatId, text, extra) {\n        const t = format_1.FmtString.normalise(text);\n        return this.callApi('sendMessage', { chat_id: chatId, ...extra, ...t });\n    }\n    /**\n     * Forward existing message.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param fromChatId Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\n     * @param messageId Message identifier in the chat specified in from_chat_id\n     */\n    forwardMessage(chatId, fromChatId, messageId, extra) {\n        return this.callApi('forwardMessage', {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_id: messageId,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param fromChatId Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername)\n     * @param messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward. The identifiers must be specified in a strictly increasing order.\n     */\n    forwardMessages(chatId, fromChatId, messageIds, extra) {\n        return this.callApi('forwardMessages', {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_ids: messageIds,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method when you need to tell the user that something is happening on the bot's side.\n     * The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendChatAction(chat_id, action, extra) {\n        return this.callApi('sendChatAction', { chat_id, action, ...extra });\n    }\n    /**\n     * Use this method to change the chosen reactions on a message. Service messages can't be reacted to.\n     * Automatically forwarded messages from a channel to its discussion group have the same available\n     * reactions as messages in the channel. In albums, bots must react to the first message.\n     * @param chat_id Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param message_id Identifier of the target message\n     * @param reaction New list of reaction types to set on the message. Currently, as non-premium users, bots can set up\n     * to one reaction per message. A custom emoji reaction can be used if it is either already present on the message\n     * or explicitly allowed by chat administrators.\n     * @param is_big Pass True to set the reaction with a big animation\n     * @returns\n     */\n    setMessageReaction(chat_id, message_id, reaction, is_big) {\n        return this.callApi('setMessageReaction', {\n            chat_id,\n            message_id,\n            reaction,\n            is_big,\n        });\n    }\n    getUserProfilePhotos(userId, offset, limit) {\n        return this.callApi('getUserProfilePhotos', {\n            user_id: userId,\n            offset,\n            limit,\n        });\n    }\n    /**\n     * Send point on the map.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendLocation(chatId, latitude, longitude, extra) {\n        return this.callApi('sendLocation', {\n            chat_id: chatId,\n            latitude,\n            longitude,\n            ...extra,\n        });\n    }\n    sendVenue(chatId, latitude, longitude, title, address, extra) {\n        return this.callApi('sendVenue', {\n            latitude,\n            longitude,\n            title,\n            address,\n            chat_id: chatId,\n            ...extra,\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target private chat\n     */\n    sendInvoice(chatId, invoice, extra) {\n        return this.callApi('sendInvoice', {\n            chat_id: chatId,\n            ...invoice,\n            ...extra,\n        });\n    }\n    sendContact(chatId, phoneNumber, firstName, extra) {\n        return this.callApi('sendContact', {\n            chat_id: chatId,\n            phone_number: phoneNumber,\n            first_name: firstName,\n            ...extra,\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendPhoto(chatId, photo, extra) {\n        return this.callApi('sendPhoto', {\n            chat_id: chatId,\n            photo,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send a dice, which will have a random value from 1 to 6.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendDice(chatId, extra) {\n        return this.callApi('sendDice', { chat_id: chatId, ...extra });\n    }\n    /**\n     * Send general files. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendDocument(chatId, document, extra) {\n        return this.callApi('sendDocument', {\n            chat_id: chatId,\n            document,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send audio files, if you want Telegram clients to display them in the music player.\n     * Your audio must be in the .mp3 format.\n     * Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendAudio(chatId, audio, extra) {\n        return this.callApi('sendAudio', {\n            chat_id: chatId,\n            audio,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send .webp, animated .tgs, or video .webm stickers\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendSticker(chatId, sticker, extra) {\n        return this.callApi('sendSticker', { chat_id: chatId, sticker, ...extra });\n    }\n    /**\n     * Send video files, Telegram clients support mp4 videos (other formats may be sent as Document).\n     * Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendVideo(chatId, video, extra) {\n        return this.callApi('sendVideo', {\n            chat_id: chatId,\n            video,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send .gif animations.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendAnimation(chatId, animation, extra) {\n        return this.callApi('sendAnimation', {\n            chat_id: chatId,\n            animation,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send video messages.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendVideoNote(chatId, videoNote, extra) {\n        return this.callApi('sendVideoNote', {\n            chat_id: chatId,\n            video_note: videoNote,\n            ...extra,\n        });\n    }\n    /**\n     * Send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendVoice(chatId, voice, extra) {\n        return this.callApi('sendVoice', {\n            chat_id: chatId,\n            voice,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat\n     * @param gameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather.\n     */\n    sendGame(chatId, gameName, extra) {\n        return this.callApi('sendGame', {\n            chat_id: chatId,\n            game_short_name: gameName,\n            ...extra,\n        });\n    }\n    /**\n     * Send a group of photos or videos as an album.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n     */\n    sendMediaGroup(chatId, media, extra) {\n        return this.callApi('sendMediaGroup', { chat_id: chatId, media, ...extra });\n    }\n    /**\n     * Send a native poll.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param question Poll question, 1-255 characters\n     * @param options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n     */\n    sendPoll(chatId, question, options, extra) {\n        return this.callApi('sendPoll', {\n            chat_id: chatId,\n            type: 'regular',\n            question,\n            options,\n            ...extra,\n        });\n    }\n    /**\n     * Send a native quiz.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param question Poll question, 1-255 characters\n     * @param options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n     */\n    sendQuiz(chatId, question, options, extra) {\n        return this.callApi('sendPoll', {\n            chat_id: chatId,\n            type: 'quiz',\n            question,\n            options,\n            ...extra,\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Identifier of the original message with the poll\n     */\n    stopPoll(chatId, messageId, extra) {\n        return this.callApi('stopPoll', {\n            chat_id: chatId,\n            message_id: messageId,\n            ...extra,\n        });\n    }\n    /**\n     * Get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.).\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    getChat(chatId) {\n        return this.callApi('getChat', { chat_id: chatId });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    getChatAdministrators(chatId) {\n        return this.callApi('getChatAdministrators', { chat_id: chatId });\n    }\n    /**\n     * Get information about a member of a chat.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     * @param userId Unique identifier of the target user\n     */\n    getChatMember(chatId, userId) {\n        return this.callApi('getChatMember', { chat_id: chatId, user_id: userId });\n    }\n    /**\n     * Get the number of members in a chat.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    getChatMembersCount(chatId) {\n        return this.callApi('getChatMembersCount', { chat_id: chatId });\n    }\n    /**\n     * Send answers to an inline query.\n     * No more than 50 results per query are allowed.\n     */\n    answerInlineQuery(inlineQueryId, results, extra) {\n        return this.callApi('answerInlineQuery', {\n            inline_query_id: inlineQueryId,\n            results,\n            ...extra,\n        });\n    }\n    setChatPermissions(chatId, permissions, extra) {\n        return this.callApi('setChatPermissions', {\n            chat_id: chatId,\n            permissions,\n            ...extra,\n        });\n    }\n    /**\n     * Kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n     * @param untilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n     */\n    banChatMember(chatId, userId, untilDate, extra) {\n        return this.callApi('banChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            until_date: untilDate,\n            ...extra,\n        });\n    }\n    /**\n     * Kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n     * @param untilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n     * @deprecated since API 5.3. Use {@link Telegram.banChatMember}\n     */\n    get kickChatMember() {\n        return this.banChatMember;\n    }\n    /**\n     * Promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     */\n    promoteChatMember(chatId, userId, extra) {\n        return this.callApi('promoteChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            ...extra,\n        });\n    }\n    /**\n     * Restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all boolean parameters to lift restrictions from a user.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     */\n    restrictChatMember(chatId, userId, extra) {\n        return this.callApi('restrictChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            ...extra,\n        });\n    }\n    setChatAdministratorCustomTitle(chatId, userId, title) {\n        return this.callApi('setChatAdministratorCustomTitle', {\n            chat_id: chatId,\n            user_id: userId,\n            custom_title: title,\n        });\n    }\n    /**\n     * Export an invite link to a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    exportChatInviteLink(chatId) {\n        return this.callApi('exportChatInviteLink', { chat_id: chatId });\n    }\n    createChatInviteLink(chatId, extra) {\n        return this.callApi('createChatInviteLink', {\n            chat_id: chatId,\n            ...extra,\n        });\n    }\n    createInvoiceLink(invoice) {\n        return this.callApi('createInvoiceLink', {\n            ...invoice,\n        });\n    }\n    editChatInviteLink(chatId, inviteLink, extra) {\n        return this.callApi('editChatInviteLink', {\n            chat_id: chatId,\n            invite_link: inviteLink,\n            ...extra,\n        });\n    }\n    revokeChatInviteLink(chatId, inviteLink) {\n        return this.callApi('revokeChatInviteLink', {\n            chat_id: chatId,\n            invite_link: inviteLink,\n        });\n    }\n    setChatPhoto(chatId, photo) {\n        return this.callApi('setChatPhoto', { chat_id: chatId, photo });\n    }\n    deleteChatPhoto(chatId) {\n        return this.callApi('deleteChatPhoto', { chat_id: chatId });\n    }\n    /**\n     * Change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n     * @param title New chat title, 1-255 characters\n     */\n    setChatTitle(chatId, title) {\n        return this.callApi('setChatTitle', { chat_id: chatId, title });\n    }\n    setChatDescription(chatId, description) {\n        return this.callApi('setChatDescription', { chat_id: chatId, description });\n    }\n    /**\n     * Pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in the supergroup or 'can_edit_messages' admin right in the channel.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     */\n    pinChatMessage(chatId, messageId, extra) {\n        return this.callApi('pinChatMessage', {\n            chat_id: chatId,\n            message_id: messageId,\n            ...extra,\n        });\n    }\n    /**\n     * Unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in the supergroup or 'can_edit_messages' admin right in the channel.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    unpinChatMessage(chatId, messageId) {\n        return this.callApi('unpinChatMessage', {\n            chat_id: chatId,\n            message_id: messageId,\n        });\n    }\n    /**\n     * Clear the list of pinned messages in a chat.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    unpinAllChatMessages(chatId) {\n        return this.callApi('unpinAllChatMessages', { chat_id: chatId });\n    }\n    /**\n     * Use this method for your bot to leave a group, supergroup or channel.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    leaveChat(chatId) {\n        return this.callApi('leaveChat', { chat_id: chatId });\n    }\n    /**\n     * Unban a user from a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format @username)\n     * @param userId Unique identifier of the target user\n     */\n    unbanChatMember(chatId, userId, extra) {\n        return this.callApi('unbanChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            ...extra,\n        });\n    }\n    answerCbQuery(callbackQueryId, text, extra) {\n        return this.callApi('answerCallbackQuery', {\n            text,\n            callback_query_id: callbackQueryId,\n            ...extra,\n        });\n    }\n    answerGameQuery(callbackQueryId, url) {\n        return this.callApi('answerCallbackQuery', {\n            url,\n            callback_query_id: callbackQueryId,\n        });\n    }\n    /**\n     * Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object.\n     * @param chat_id Unique identifier for the chat or username of the channel (in the format `@channelusername`)\n     * @param user_id Unique identifier of the target user\n     */\n    getUserChatBoosts(chat_id, user_id) {\n        return this.callApi('getUserChatBoosts', {\n            chat_id,\n            user_id,\n        });\n    }\n    /**\n     * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n     * the Bot API will send an Update with a shipping_query field to the bot.\n     * Reply to shipping queries.\n     * @param ok  Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)\n     * @param shippingOptions Required if ok is True. A JSON-serialized array of available shipping options.\n     * @param errorMessage Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.\n     */\n    answerShippingQuery(shippingQueryId, ok, shippingOptions, errorMessage) {\n        return this.callApi('answerShippingQuery', {\n            ok,\n            shipping_query_id: shippingQueryId,\n            shipping_options: shippingOptions,\n            error_message: errorMessage,\n        });\n    }\n    /**\n     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query.\n     * Respond to such pre-checkout queries. On success, True is returned.\n     * Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n     * @param ok  Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.\n     * @param errorMessage Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n     */\n    answerPreCheckoutQuery(preCheckoutQueryId, ok, errorMessage) {\n        return this.callApi('answerPreCheckoutQuery', {\n            ok,\n            pre_checkout_query_id: preCheckoutQueryId,\n            error_message: errorMessage,\n        });\n    }\n    answerWebAppQuery(webAppQueryId, result) {\n        return this.callApi('answerWebAppQuery', {\n            web_app_query_id: webAppQueryId,\n            result,\n        });\n    }\n    /**\n     * Edit text and game messages sent by the bot or via the bot (for inline bots).\n     * On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param text New text of the message\n     */\n    editMessageText(chatId, messageId, inlineMessageId, text, extra) {\n        const t = format_1.FmtString.normalise(text);\n        return this.callApi('editMessageText', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            ...extra,\n            ...t,\n        });\n    }\n    /**\n     * Edit captions of messages sent by the bot or via the bot (for inline bots).\n     * On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param caption New caption of the message\n     * @param markup A JSON-serialized object for an inline keyboard.\n     */\n    editMessageCaption(chatId, messageId, inlineMessageId, caption, extra) {\n        return this.callApi('editMessageCaption', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            ...extra,\n            ...(0, util_1.fmtCaption)({ caption }),\n        });\n    }\n    /**\n     * Edit animation, audio, document, photo, or video messages.\n     * If a message is a part of a message album, then it can be edited only to a photo or a video.\n     * Otherwise, message type can be changed arbitrarily.\n     * When inline message is edited, new file can't be uploaded.\n     * Use previously uploaded file via its file_id or specify a URL.\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param media New media of message\n     * @param extra Additional parameters, such as reply_markup\n     */\n    editMessageMedia(chatId, messageId, inlineMessageId, media, extra) {\n        return this.callApi('editMessageMedia', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            media: (0, util_1.fmtCaption)(media),\n            ...extra,\n        });\n    }\n    /**\n     * Edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param markup A JSON-serialized object for an inline keyboard.\n     * @returns If edited message is sent by the bot, the edited Message is returned, otherwise True is returned.\n     */\n    editMessageReplyMarkup(chatId, messageId, inlineMessageId, markup) {\n        return this.callApi('editMessageReplyMarkup', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            reply_markup: markup,\n        });\n    }\n    editMessageLiveLocation(chatId, messageId, inlineMessageId, latitude, longitude, extra) {\n        return this.callApi('editMessageLiveLocation', {\n            latitude,\n            longitude,\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            ...extra,\n        });\n    }\n    stopMessageLiveLocation(chatId, messageId, inlineMessageId, markup) {\n        return this.callApi('stopMessageLiveLocation', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            reply_markup: markup,\n        });\n    }\n    /**\n     * Delete a message, including service messages, with the following limitations:\n     * - A message can only be deleted if it was sent less than 48 hours ago.\n     * - Bots can delete outgoing messages in groups and supergroups.\n     * - Bots granted can_post_messages permissions can delete outgoing messages in channels.\n     * - If the bot is an administrator of a group, it can delete any message there.\n     * - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Identifier of the message to delete\n     */\n    deleteMessage(chatId, messageId) {\n        return this.callApi('deleteMessage', {\n            chat_id: chatId,\n            message_id: messageId,\n        });\n    }\n    /**\n     * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageIds Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n     */\n    deleteMessages(chatId, messageIds) {\n        return this.callApi('deleteMessages', {\n            chat_id: chatId,\n            message_ids: messageIds,\n        });\n    }\n    setChatStickerSet(chatId, setName) {\n        return this.callApi('setChatStickerSet', {\n            chat_id: chatId,\n            sticker_set_name: setName,\n        });\n    }\n    deleteChatStickerSet(chatId) {\n        return this.callApi('deleteChatStickerSet', { chat_id: chatId });\n    }\n    /**\n     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n     * Requires no parameters. Returns an Array of Sticker objects.\n     *\n     * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n     */\n    getForumTopicIconStickers() {\n        return this.callApi('getForumTopicIconStickers', {});\n    }\n    /**\n     * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this\n     * to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a\n     * ForumTopic object.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param name Topic name, 1-128 characters\n     *\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n    createForumTopic(chat_id, name, extra) {\n        return this.callApi('createForumTopic', {\n            chat_id,\n            name,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the\n     * topic. Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n    editForumTopic(chat_id, message_thread_id, extra) {\n        return this.callApi('editForumTopic', {\n            chat_id,\n            message_thread_id,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n    closeForumTopic(chat_id, message_thread_id) {\n        return this.callApi('closeForumTopic', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n    reopenForumTopic(chat_id, message_thread_id) {\n        return this.callApi('reopenForumTopic', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an\n     * administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     * Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n    deleteForumTopic(chat_id, message_thread_id) {\n        return this.callApi('deleteForumTopic', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat\n     * for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n    unpinAllForumTopicMessages(chat_id, message_thread_id) {\n        return this.callApi('unpinAllForumTopicMessages', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator\n     * in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     * @param name New topic name, 1-128 characters\n     *\n     * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n     */\n    editGeneralForumTopic(chat_id, name) {\n        return this.callApi('editGeneralForumTopic', { chat_id, name });\n    }\n    /**\n     * Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n     */\n    closeGeneralForumTopic(chat_id) {\n        return this.callApi('closeGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically\n     * unhidden if it was hidden. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n     */\n    reopenGeneralForumTopic(chat_id) {\n        return this.callApi('reopenGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed\n     * if it was open. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n     */\n    hideGeneralForumTopic(chat_id) {\n        return this.callApi('hideGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n    unhideGeneralForumTopic(chat_id) {\n        return this.callApi('unhideGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator\n     * right in the supergroup.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     */\n    unpinAllGeneralForumTopicMessages(chat_id) {\n        return this.callApi('unpinAllGeneralForumTopicMessages', { chat_id });\n    }\n    getStickerSet(name) {\n        return this.callApi('getStickerSet', { name });\n    }\n    /**\n     * Upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times).\n     * https://core.telegram.org/bots/api#sending-files\n     * @param ownerId User identifier of sticker file owner\n     * @param stickerFile Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px.\n     */\n    uploadStickerFile(ownerId, sticker, sticker_format) {\n        return this.callApi('uploadStickerFile', {\n            user_id: ownerId,\n            sticker_format,\n            sticker,\n        });\n    }\n    /**\n     * Create new sticker set owned by a user. The bot will be able to edit the created sticker set.\n     * @param ownerId User identifier of created sticker set owner\n     * @param name Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in “_by_<bot username>”. <bot_username> is case insensitive. 1-64 characters.\n     * @param title Sticker set title, 1-64 characters\n     */\n    createNewStickerSet(ownerId, name, title, stickerData) {\n        return this.callApi('createNewStickerSet', {\n            name,\n            title,\n            user_id: ownerId,\n            ...stickerData,\n        });\n    }\n    /**\n     * Add a new sticker to a set created by the bot.\n     * @param ownerId User identifier of sticker set owner\n     * @param name Sticker set name\n     */\n    addStickerToSet(ownerId, name, stickerData) {\n        return this.callApi('addStickerToSet', {\n            name,\n            user_id: ownerId,\n            ...stickerData,\n        });\n    }\n    /**\n     * Move a sticker in a set created by the bot to a specific position.\n     * @param sticker File identifier of the sticker\n     * @param position New sticker position in the set, zero-based\n     */\n    setStickerPositionInSet(sticker, position) {\n        return this.callApi('setStickerPositionInSet', {\n            sticker,\n            position,\n        });\n    }\n    /**\n     * @deprecated since API 6.8. Use {@link Telegram.setStickerSetThumbnail}\n     */\n    get setStickerSetThumb() {\n        return this.setStickerSetThumbnail;\n    }\n    /**\n     * Use this method to set the thumbnail of a regular or mask sticker set.\n     * The format of the thumbnail file must match the format of the stickers in the set.\n     * @param name Sticker set name\n     * @param userId User identifier of the sticker set owner\n     * @param thumbnail A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size\n     * and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to\n     * 32 kilobytes in size (see\n     * [animated sticker technical requirements](https://core.telegram.org/stickers#animated-sticker-requirements)),\n     * or a WEBM video with the thumbnail up to 32 kilobytes in size; see\n     * [video sticker technical requirements](https://core.telegram.org/stickers#video-sticker-requirements).\n     * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass a\n     * HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using\n     * Input helpers. Animated and video sticker set thumbnails can't be uploaded via HTTP URL.\n     * If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.\n     */\n    setStickerSetThumbnail(name, userId, thumbnail) {\n        return this.callApi('setStickerSetThumbnail', {\n            name,\n            user_id: userId,\n            thumbnail,\n        });\n    }\n    setStickerMaskPosition(sticker, mask_position) {\n        return this.callApi('setStickerMaskPosition', { sticker, mask_position });\n    }\n    setStickerKeywords(sticker, keywords) {\n        return this.callApi('setStickerKeywords', { sticker, keywords });\n    }\n    setStickerEmojiList(sticker, emoji_list) {\n        return this.callApi('setStickerEmojiList', { sticker, emoji_list });\n    }\n    deleteStickerSet(name) {\n        return this.callApi('deleteStickerSet', { name });\n    }\n    setStickerSetTitle(name, title) {\n        return this.callApi('setStickerSetTitle', { name, title });\n    }\n    setCustomEmojiStickerSetThumbnail(name, custom_emoji_id) {\n        return this.callApi('setCustomEmojiStickerSetThumbnail', {\n            name,\n            custom_emoji_id,\n        });\n    }\n    /**\n     * Delete a sticker from a set created by the bot.\n     * @param sticker File identifier of the sticker\n     */\n    deleteStickerFromSet(sticker) {\n        return this.callApi('deleteStickerFromSet', { sticker });\n    }\n    getCustomEmojiStickers(custom_emoji_ids) {\n        return this.callApi('getCustomEmojiStickers', { custom_emoji_ids });\n    }\n    /**\n     * Change the list of the bot's commands.\n     * @param commands A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n     */\n    setMyCommands(commands, extra) {\n        return this.callApi('setMyCommands', { commands, ...extra });\n    }\n    deleteMyCommands(extra = {}) {\n        return this.callApi('deleteMyCommands', extra);\n    }\n    /**\n     * Get the current list of the bot's commands.\n     */\n    getMyCommands(extra = {}) {\n        return this.callApi('getMyCommands', extra);\n    }\n    /**\n     * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n     * @param description New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.\n     * @param language_code A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.\n     */\n    setMyDescription(description, language_code) {\n        return this.callApi('setMyDescription', { description, language_code });\n    }\n    /**\n     * Use this method to change the bot's name.\n     * @param name New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.\n     * @param language_code A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.\n     */\n    setMyName(name, language_code) {\n        return this.callApi('setMyName', { name, language_code });\n    }\n    /**\n     * Use this method to get the current bot name for the given user language.\n     * @param language_code A two-letter ISO 639-1 language code or an empty string\n     */\n    getMyName(language_code) {\n        return this.callApi('getMyName', { language_code });\n    }\n    /**\n     * Use this method to get the current bot description for the given user language.\n     * @param language_code A two-letter ISO 639-1 language code.\n     */\n    getMyDescription(language_code) {\n        return this.callApi('getMyDescription', { language_code });\n    }\n    /**\n     * Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot.\n     * @param description New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.\n     * @param language_code A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.\n     */\n    setMyShortDescription(short_description, language_code) {\n        return this.callApi('setMyShortDescription', {\n            short_description,\n            language_code,\n        });\n    }\n    /**\n     * Use this method to get the current bot short description for the given user language.\n     * @param language_code A two-letter ISO 639-1 language code or an empty string\n     */\n    getMyShortDescription(language_code) {\n        return this.callApi('getMyShortDescription', { language_code });\n    }\n    setPassportDataErrors(userId, errors) {\n        return this.callApi('setPassportDataErrors', {\n            user_id: userId,\n            errors: errors,\n        });\n    }\n    /**\n     * Send copy of existing message.\n     * @deprecated use `copyMessage` instead\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message Received message object\n     */\n    sendCopy(chatId, message, extra) {\n        return this.copyMessage(chatId, message.chat.id, message.message_id, extra);\n    }\n    /**\n     * Send copy of existing message.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param fromChatId Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\n     * @param messageId Message identifier in the chat specified in from_chat_id\n     */\n    copyMessage(chatId, fromChatId, messageId, extra) {\n        return this.callApi('copyMessage', {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_id: messageId,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param fromChatId Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername)\n     * @param messageIds Identifiers of 1-100 messages in the chat from_chat_id to copy. The identifiers must be specified in a strictly increasing order.\n     */\n    copyMessages(chatId, fromChatId, messageIds, extra) {\n        return this.callApi('copyMessages', {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_ids: messageIds,\n            ...extra,\n        });\n    }\n    /**\n     * Approve a chat join request.\n     * The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param userId Unique identifier of the target user\n     */\n    approveChatJoinRequest(chatId, userId) {\n        return this.callApi('approveChatJoinRequest', {\n            chat_id: chatId,\n            user_id: userId,\n        });\n    }\n    /**\n     * Decline a chat join request.\n     * The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param userId Unique identifier of the target user\n     */\n    declineChatJoinRequest(chatId, userId) {\n        return this.callApi('declineChatJoinRequest', {\n            chat_id: chatId,\n            user_id: userId,\n        });\n    }\n    /**\n     * Ban a channel chat in a supergroup or a channel. The owner of the chat will not be able to send messages and join live streams on behalf of the chat, unless it is unbanned first.\n     * The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param senderChatId Unique identifier of the target sender chat\n     */\n    banChatSenderChat(chatId, senderChatId, extra) {\n        return this.callApi('banChatSenderChat', {\n            chat_id: chatId,\n            sender_chat_id: senderChatId,\n            ...extra,\n        });\n    }\n    /**\n     * Unban a previously banned channel chat in a supergroup or channel.\n     * The bot must be an administrator for this to work and must have the appropriate administrator rights.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param senderChatId Unique identifier of the target sender chat\n     */\n    unbanChatSenderChat(chatId, senderChatId) {\n        return this.callApi('unbanChatSenderChat', {\n            chat_id: chatId,\n            sender_chat_id: senderChatId,\n        });\n    }\n    /**\n     * Use this method to change the bot's menu button in a private chat, or the default menu button. Returns true on success.\n     * @param chatId Unique identifier for the target private chat. If not specified, default bot's menu button will be changed.\n     * @param menuButton An object for the bot's new menu button.\n     */\n    setChatMenuButton({ chatId, menuButton, } = {}) {\n        return this.callApi('setChatMenuButton', {\n            chat_id: chatId,\n            menu_button: menuButton,\n        });\n    }\n    /**\n     * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.\n     * @param chatId Unique identifier for the target private chat. If not specified, default bot's menu button will be returned.\n     */\n    getChatMenuButton({ chatId } = {}) {\n        return this.callApi('getChatMenuButton', {\n            chat_id: chatId,\n        });\n    }\n    /**\n     * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n     * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n     */\n    setMyDefaultAdministratorRights({ rights, forChannels, } = {}) {\n        return this.callApi('setMyDefaultAdministratorRights', {\n            rights,\n            for_channels: forChannels,\n        });\n    }\n    /**\n     * Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.\n     * @param forChannels Pass true to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.\n     */\n    getMyDefaultAdministratorRights({ forChannels, } = {}) {\n        return this.callApi('getMyDefaultAdministratorRights', {\n            for_channels: forChannels,\n        });\n    }\n    /**\n     * Log out from the cloud Bot API server before launching the bot locally.\n     */\n    logOut() {\n        return this.callApi('logOut', {});\n    }\n    /**\n     * Close the bot instance before moving it from one local server to another.\n     */\n    close() {\n        return this.callApi('close', {});\n    }\n}\nexports.Telegram = Telegram;\nexports[\"default\"] = Telegram;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/telegraf/lib/telegram.js\n");

/***/ })

};
;