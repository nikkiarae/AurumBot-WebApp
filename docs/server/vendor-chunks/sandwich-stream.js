"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sandwich-stream";
exports.ids = ["vendor-chunks/sandwich-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/sandwich-stream/dist/sandwich-stream.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/sandwich-stream/dist/sandwich-stream.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandwichStream: () => (/* binding */ SandwichStream),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\n\n/**\r\n * Handles Readable streams requests as concatenation through data handling as\r\n * well adding tags it each begin, end and between of the streams\r\n */\r\nclass SandwichStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\r\n    /**\r\n     * Initiates the SandwichStream, you can consider it also passing\r\n     * ReadableOptions to it\r\n     *\r\n     * @param head Pushes this content before all other content\r\n     * @param tail Pushes this content after all other data has been pushed\r\n     * @param separator Pushes this content between each stream\r\n     * @param remaining The other kind of options to be passed to Readable\r\n     * @example\r\n     * const ss = new SandwichStream({\r\n     *     head: 'This at the top\\n',\r\n     *     tail: '\\nThis at the bottom',\r\n     *     separator: '\\n --- \\n'\r\n     * });\r\n     */\r\n    constructor(_a) {\r\n        var { head, tail, separator } = _a, remaining = __rest(_a, [\"head\", \"tail\", \"separator\"]);\r\n        super(remaining);\r\n        this.streamsActive = false;\r\n        this.streams = [];\r\n        this.newStreams = [];\r\n        this.currentStream = null;\r\n        this.head = (null !== head && undefined !== head) ? head : null;\r\n        this.tail = (null !== tail && undefined !== tail) ? tail : null;\r\n        this.separator = (null !== separator && undefined !== separator) ? separator : null;\r\n    }\r\n    /**\r\n     * Add a new Readable stream in the queue\r\n     *\r\n     * @param newStream The Readable stream\r\n     * @example\r\n     * sandwichStream.add(streamOne);\r\n     * sandwichStream.add(streamTwo);\r\n     * sandwichStream.add(streamThree);\r\n     * @throws An Error in case that this request was not accepted\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    add(newStream) {\r\n        if (false === this.streamsActive) {\r\n            this.streams.push(newStream);\r\n            newStream.on('error', this.subStreamOnError.bind(this));\r\n        }\r\n        else {\r\n            this.newStreams.push(newStream);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Works in a similar way from the Readable read, only that this one checks\r\n     * for whether or not a stream is already being handled\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    _read() {\r\n        if (false === this.streamsActive) {\r\n            this.streamsActive = true;\r\n            this.pushHead();\r\n            this.streamNextStream();\r\n        }\r\n    }\r\n    /**\r\n     * Binds an error thrown from one of the streams being handled\r\n     *\r\n     * @param err Error to be bind\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    subStreamOnError(err) {\r\n        this.emit('error', err);\r\n    }\r\n    /**\r\n     * Fetches the next stream to be handled\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    streamNextStream() {\r\n        if (true === this.nextStream()) {\r\n            this.bindCurrentStreamEvents();\r\n        }\r\n        else {\r\n            this.pushTail();\r\n            this.push(null);\r\n        }\r\n    }\r\n    /**\r\n     * Verifies whether or not the stream queue has ended\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    nextStream() {\r\n        const tmp = this.streams.shift();\r\n        this.currentStream = (undefined !== tmp) ? tmp : null;\r\n        return null !== this.currentStream;\r\n    }\r\n    /**\r\n     * Once the current stream starts to pass their data, this handles it in a\r\n     * less complicated way\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    bindCurrentStreamEvents() {\r\n        this.currentStream.on('readable', this.currentStreamOnReadable.bind(this));\r\n        this.currentStream.on('end', this.currentStreamOnEnd.bind(this));\r\n    }\r\n    /**\r\n     * Handles the data from a current stream once they are being streamed\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    currentStreamOnReadable() {\r\n        const tmp = this.currentStream.read();\r\n        const data = (undefined !== tmp && null !== tmp) ? tmp : '';\r\n        this.push(data);\r\n    }\r\n    /**\r\n     * Handles the tagging once a stream is finished\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    currentStreamOnEnd() {\r\n        this.pushSeparator();\r\n        this.streams.concat(this.newStreams);\r\n        this.newStreams = [];\r\n        this.streamNextStream();\r\n    }\r\n    /**\r\n     * Adds the head tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushHead() {\r\n        if (null !== this.head) {\r\n            this.push(this.head);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the separator tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushSeparator() {\r\n        if (0 < this.streams.length && null !== this.separator) {\r\n            this.push(this.separator);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the tail tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushTail() {\r\n        if (null !== this.tail) {\r\n            this.push(this.tail);\r\n        }\r\n    }\r\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SandwichStream);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2FuZHdpY2gtc3RyZWFtL2Rpc3Qvc2FuZHdpY2gtc3RyZWFtLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0M7O0FBRWxDO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxjQUFjO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0Q0FBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsY0FBYyx3QkFBd0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLGNBQWMsRUFBQztBQUNKIiwic291cmNlcyI6WyIvVXNlcnMvbmlra2lyYWUvRGVza3RvcC9BdXJ1bUJvdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvc2FuZHdpY2gtc3RyZWFtL2Rpc3Qvc2FuZHdpY2gtc3RyZWFtLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XG5cbi8qKlxyXG4gKiBIYW5kbGVzIFJlYWRhYmxlIHN0cmVhbXMgcmVxdWVzdHMgYXMgY29uY2F0ZW5hdGlvbiB0aHJvdWdoIGRhdGEgaGFuZGxpbmcgYXNcclxuICogd2VsbCBhZGRpbmcgdGFncyBpdCBlYWNoIGJlZ2luLCBlbmQgYW5kIGJldHdlZW4gb2YgdGhlIHN0cmVhbXNcclxuICovXHJcbmNsYXNzIFNhbmR3aWNoU3RyZWFtIGV4dGVuZHMgUmVhZGFibGUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWF0ZXMgdGhlIFNhbmR3aWNoU3RyZWFtLCB5b3UgY2FuIGNvbnNpZGVyIGl0IGFsc28gcGFzc2luZ1xyXG4gICAgICogUmVhZGFibGVPcHRpb25zIHRvIGl0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGhlYWQgUHVzaGVzIHRoaXMgY29udGVudCBiZWZvcmUgYWxsIG90aGVyIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB0YWlsIFB1c2hlcyB0aGlzIGNvbnRlbnQgYWZ0ZXIgYWxsIG90aGVyIGRhdGEgaGFzIGJlZW4gcHVzaGVkXHJcbiAgICAgKiBAcGFyYW0gc2VwYXJhdG9yIFB1c2hlcyB0aGlzIGNvbnRlbnQgYmV0d2VlbiBlYWNoIHN0cmVhbVxyXG4gICAgICogQHBhcmFtIHJlbWFpbmluZyBUaGUgb3RoZXIga2luZCBvZiBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byBSZWFkYWJsZVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNvbnN0IHNzID0gbmV3IFNhbmR3aWNoU3RyZWFtKHtcclxuICAgICAqICAgICBoZWFkOiAnVGhpcyBhdCB0aGUgdG9wXFxuJyxcclxuICAgICAqICAgICB0YWlsOiAnXFxuVGhpcyBhdCB0aGUgYm90dG9tJyxcclxuICAgICAqICAgICBzZXBhcmF0b3I6ICdcXG4gLS0tIFxcbidcclxuICAgICAqIH0pO1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihfYSkge1xyXG4gICAgICAgIHZhciB7IGhlYWQsIHRhaWwsIHNlcGFyYXRvciB9ID0gX2EsIHJlbWFpbmluZyA9IF9fcmVzdChfYSwgW1wiaGVhZFwiLCBcInRhaWxcIiwgXCJzZXBhcmF0b3JcIl0pO1xyXG4gICAgICAgIHN1cGVyKHJlbWFpbmluZyk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1zQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1zID0gW107XHJcbiAgICAgICAgdGhpcy5uZXdTdHJlYW1zID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhlYWQgPSAobnVsbCAhPT0gaGVhZCAmJiB1bmRlZmluZWQgIT09IGhlYWQpID8gaGVhZCA6IG51bGw7XHJcbiAgICAgICAgdGhpcy50YWlsID0gKG51bGwgIT09IHRhaWwgJiYgdW5kZWZpbmVkICE9PSB0YWlsKSA/IHRhaWwgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gKG51bGwgIT09IHNlcGFyYXRvciAmJiB1bmRlZmluZWQgIT09IHNlcGFyYXRvcikgPyBzZXBhcmF0b3IgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBuZXcgUmVhZGFibGUgc3RyZWFtIGluIHRoZSBxdWV1ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuZXdTdHJlYW0gVGhlIFJlYWRhYmxlIHN0cmVhbVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHNhbmR3aWNoU3RyZWFtLmFkZChzdHJlYW1PbmUpO1xyXG4gICAgICogc2FuZHdpY2hTdHJlYW0uYWRkKHN0cmVhbVR3byk7XHJcbiAgICAgKiBzYW5kd2ljaFN0cmVhbS5hZGQoc3RyZWFtVGhyZWUpO1xyXG4gICAgICogQHRocm93cyBBbiBFcnJvciBpbiBjYXNlIHRoYXQgdGhpcyByZXF1ZXN0IHdhcyBub3QgYWNjZXB0ZWRcclxuICAgICAqIEByZXR1cm5zIFRoaXMgaW5zdGFuY2Ugb2YgU2FuZHdpY2ggU3RyZWFtXHJcbiAgICAgKi9cclxuICAgIGFkZChuZXdTdHJlYW0pIHtcclxuICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuc3RyZWFtc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbXMucHVzaChuZXdTdHJlYW0pO1xyXG4gICAgICAgICAgICBuZXdTdHJlYW0ub24oJ2Vycm9yJywgdGhpcy5zdWJTdHJlYW1PbkVycm9yLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5uZXdTdHJlYW1zLnB1c2gobmV3U3RyZWFtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdvcmtzIGluIGEgc2ltaWxhciB3YXkgZnJvbSB0aGUgUmVhZGFibGUgcmVhZCwgb25seSB0aGF0IHRoaXMgb25lIGNoZWNrc1xyXG4gICAgICogZm9yIHdoZXRoZXIgb3Igbm90IGEgc3RyZWFtIGlzIGFscmVhZHkgYmVpbmcgaGFuZGxlZFxyXG4gICAgICogQHJldHVybnMgVGhpcyBpbnN0YW5jZSBvZiBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqL1xyXG4gICAgX3JlYWQoKSB7XHJcbiAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLnN0cmVhbXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW1zQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5wdXNoSGVhZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU5leHRTdHJlYW0oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEJpbmRzIGFuIGVycm9yIHRocm93biBmcm9tIG9uZSBvZiB0aGUgc3RyZWFtcyBiZWluZyBoYW5kbGVkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVyciBFcnJvciB0byBiZSBiaW5kXHJcbiAgICAgKiBAcmV0dXJucyBUaGlzIGluc3RhbmNlIG9mIFNhbmR3aWNoIFN0cmVhbVxyXG4gICAgICovXHJcbiAgICBzdWJTdHJlYW1PbkVycm9yKGVycikge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBuZXh0IHN0cmVhbSB0byBiZSBoYW5kbGVkXHJcbiAgICAgKiBAcmV0dXJucyBUaGlzIGluc3RhbmNlIG9mIFNhbmR3aWNoIFN0cmVhbVxyXG4gICAgICovXHJcbiAgICBzdHJlYW1OZXh0U3RyZWFtKCkge1xyXG4gICAgICAgIGlmICh0cnVlID09PSB0aGlzLm5leHRTdHJlYW0oKSkge1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRDdXJyZW50U3RyZWFtRXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hUYWlsKCk7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWVzIHdoZXRoZXIgb3Igbm90IHRoZSBzdHJlYW0gcXVldWUgaGFzIGVuZGVkXHJcbiAgICAgKiBAcmV0dXJucyBUaGlzIGluc3RhbmNlIG9mIFNhbmR3aWNoIFN0cmVhbVxyXG4gICAgICovXHJcbiAgICBuZXh0U3RyZWFtKCkge1xyXG4gICAgICAgIGNvbnN0IHRtcCA9IHRoaXMuc3RyZWFtcy5zaGlmdCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFN0cmVhbSA9ICh1bmRlZmluZWQgIT09IHRtcCkgPyB0bXAgOiBudWxsO1xyXG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmN1cnJlbnRTdHJlYW07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE9uY2UgdGhlIGN1cnJlbnQgc3RyZWFtIHN0YXJ0cyB0byBwYXNzIHRoZWlyIGRhdGEsIHRoaXMgaGFuZGxlcyBpdCBpbiBhXHJcbiAgICAgKiBsZXNzIGNvbXBsaWNhdGVkIHdheVxyXG4gICAgICogQHJldHVybnMgVGhpcyBpbnN0YW5jZSBvZiBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqL1xyXG4gICAgYmluZEN1cnJlbnRTdHJlYW1FdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtLm9uKCdyZWFkYWJsZScsIHRoaXMuY3VycmVudFN0cmVhbU9uUmVhZGFibGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtLm9uKCdlbmQnLCB0aGlzLmN1cnJlbnRTdHJlYW1PbkVuZC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUgZGF0YSBmcm9tIGEgY3VycmVudCBzdHJlYW0gb25jZSB0aGV5IGFyZSBiZWluZyBzdHJlYW1lZFxyXG4gICAgICogQHJldHVybnMgVGhpcyBpbnN0YW5jZSBvZiBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqL1xyXG4gICAgY3VycmVudFN0cmVhbU9uUmVhZGFibGUoKSB7XHJcbiAgICAgICAgY29uc3QgdG1wID0gdGhpcy5jdXJyZW50U3RyZWFtLnJlYWQoKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gKHVuZGVmaW5lZCAhPT0gdG1wICYmIG51bGwgIT09IHRtcCkgPyB0bXAgOiAnJztcclxuICAgICAgICB0aGlzLnB1c2goZGF0YSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgdGhlIHRhZ2dpbmcgb25jZSBhIHN0cmVhbSBpcyBmaW5pc2hlZFxyXG4gICAgICogQHJldHVybnMgVGhpcyBpbnN0YW5jZSBvZiBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqL1xyXG4gICAgY3VycmVudFN0cmVhbU9uRW5kKCkge1xyXG4gICAgICAgIHRoaXMucHVzaFNlcGFyYXRvcigpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtcy5jb25jYXQodGhpcy5uZXdTdHJlYW1zKTtcclxuICAgICAgICB0aGlzLm5ld1N0cmVhbXMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0cmVhbU5leHRTdHJlYW0oKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgaGVhZCB0YWcgdG8gdGhlIFNhbmR3aWNoIFN0cmVhbVxyXG4gICAgICogQHJldHVybnMgVGhpcyBpbnN0YW5jZSBvZiBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqL1xyXG4gICAgcHVzaEhlYWQoKSB7XHJcbiAgICAgICAgaWYgKG51bGwgIT09IHRoaXMuaGVhZCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2godGhpcy5oZWFkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIHNlcGFyYXRvciB0YWcgdG8gdGhlIFNhbmR3aWNoIFN0cmVhbVxyXG4gICAgICogQHJldHVybnMgVGhpcyBpbnN0YW5jZSBvZiBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqL1xyXG4gICAgcHVzaFNlcGFyYXRvcigpIHtcclxuICAgICAgICBpZiAoMCA8IHRoaXMuc3RyZWFtcy5sZW5ndGggJiYgbnVsbCAhPT0gdGhpcy5zZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKHRoaXMuc2VwYXJhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIHRhaWwgdGFnIHRvIHRoZSBTYW5kd2ljaCBTdHJlYW1cclxuICAgICAqIEByZXR1cm5zIFRoaXMgaW5zdGFuY2Ugb2YgU2FuZHdpY2ggU3RyZWFtXHJcbiAgICAgKi9cclxuICAgIHB1c2hUYWlsKCkge1xyXG4gICAgICAgIGlmIChudWxsICE9PSB0aGlzLnRhaWwpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKHRoaXMudGFpbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNhbmR3aWNoU3RyZWFtO1xuZXhwb3J0IHsgU2FuZHdpY2hTdHJlYW0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sandwich-stream/dist/sandwich-stream.mjs\n");

/***/ })

};
;